
BTL_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004138  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08004244  08004244  00014244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042a8  080042a8  000200c4  2**0
                  CONTENTS
  4 .ARM          00000000  080042a8  080042a8  000200c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080042a8  080042a8  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042a8  080042a8  000142a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042ac  080042ac  000142ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  080042b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  200000c4  08004374  000200c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  08004374  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014731  00000000  00000000  000200ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002afb  00000000  00000000  0003481e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  00037320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed0  00000000  00000000  00038318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000196af  00000000  00000000  000391e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014725  00000000  00000000  00052897  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d996  00000000  00000000  00066fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f4952  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000452c  00000000  00000000  000f49a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000c4 	.word	0x200000c4
 8000128:	00000000 	.word	0x00000000
 800012c:	0800422c 	.word	0x0800422c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000c8 	.word	0x200000c8
 8000148:	0800422c 	.word	0x0800422c

0800014c <isButton1Pressed>:
int TimerForKeyPress3 = 200;
int button1_flag = 0;
int button2_flag = 0;
int button3_flag = 0;

int isButton1Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button1_flag ==1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	200000e0 	.word	0x200000e0

08000170 <isButton2Pressed>:

int isButton2Pressed(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button2_flag == 1){
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton2Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton2Pressed+0x16>
		button2_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton2Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton2Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	200000e4 	.word	0x200000e4

08000194 <isButton3Pressed>:

int isButton3Pressed(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(button3_flag == 1){
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton3Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton3Pressed+0x16>
		button3_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton3Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton3Pressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	200000e8 	.word	0x200000e8

080001b8 <getKeyInput>:

void getKeyInput(){
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	Key1Reg[0] = Key1Reg[1];
 80001bc:	4b5c      	ldr	r3, [pc, #368]	; (8000330 <getKeyInput+0x178>)
 80001be:	685b      	ldr	r3, [r3, #4]
 80001c0:	4a5b      	ldr	r2, [pc, #364]	; (8000330 <getKeyInput+0x178>)
 80001c2:	6013      	str	r3, [r2, #0]
	Key1Reg[1] = Key1Reg[2];
 80001c4:	4b5a      	ldr	r3, [pc, #360]	; (8000330 <getKeyInput+0x178>)
 80001c6:	689b      	ldr	r3, [r3, #8]
 80001c8:	4a59      	ldr	r2, [pc, #356]	; (8000330 <getKeyInput+0x178>)
 80001ca:	6053      	str	r3, [r2, #4]
	Key1Reg[2] = HAL_GPIO_ReadPin(A1_GPIO_Port, A1_Pin);
 80001cc:	2102      	movs	r1, #2
 80001ce:	4859      	ldr	r0, [pc, #356]	; (8000334 <getKeyInput+0x17c>)
 80001d0:	f001 fdcc 	bl	8001d6c <HAL_GPIO_ReadPin>
 80001d4:	4603      	mov	r3, r0
 80001d6:	461a      	mov	r2, r3
 80001d8:	4b55      	ldr	r3, [pc, #340]	; (8000330 <getKeyInput+0x178>)
 80001da:	609a      	str	r2, [r3, #8]
	if ((Key1Reg[0] == Key1Reg[1]) && (Key1Reg[1] == Key1Reg[2])){
 80001dc:	4b54      	ldr	r3, [pc, #336]	; (8000330 <getKeyInput+0x178>)
 80001de:	681a      	ldr	r2, [r3, #0]
 80001e0:	4b53      	ldr	r3, [pc, #332]	; (8000330 <getKeyInput+0x178>)
 80001e2:	685b      	ldr	r3, [r3, #4]
 80001e4:	429a      	cmp	r2, r3
 80001e6:	d126      	bne.n	8000236 <getKeyInput+0x7e>
 80001e8:	4b51      	ldr	r3, [pc, #324]	; (8000330 <getKeyInput+0x178>)
 80001ea:	685a      	ldr	r2, [r3, #4]
 80001ec:	4b50      	ldr	r3, [pc, #320]	; (8000330 <getKeyInput+0x178>)
 80001ee:	689b      	ldr	r3, [r3, #8]
 80001f0:	429a      	cmp	r2, r3
 80001f2:	d120      	bne.n	8000236 <getKeyInput+0x7e>
		if (Key1Reg[3] != Key1Reg[2]){
 80001f4:	4b4e      	ldr	r3, [pc, #312]	; (8000330 <getKeyInput+0x178>)
 80001f6:	68da      	ldr	r2, [r3, #12]
 80001f8:	4b4d      	ldr	r3, [pc, #308]	; (8000330 <getKeyInput+0x178>)
 80001fa:	689b      	ldr	r3, [r3, #8]
 80001fc:	429a      	cmp	r2, r3
 80001fe:	d00e      	beq.n	800021e <getKeyInput+0x66>
			Key1Reg[3] = Key1Reg[2];
 8000200:	4b4b      	ldr	r3, [pc, #300]	; (8000330 <getKeyInput+0x178>)
 8000202:	689b      	ldr	r3, [r3, #8]
 8000204:	4a4a      	ldr	r2, [pc, #296]	; (8000330 <getKeyInput+0x178>)
 8000206:	60d3      	str	r3, [r2, #12]
			if (Key1Reg[2] == PRESSED_STATE){
 8000208:	4b49      	ldr	r3, [pc, #292]	; (8000330 <getKeyInput+0x178>)
 800020a:	689b      	ldr	r3, [r3, #8]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d112      	bne.n	8000236 <getKeyInput+0x7e>
				button1_flag = 1;
 8000210:	4b49      	ldr	r3, [pc, #292]	; (8000338 <getKeyInput+0x180>)
 8000212:	2201      	movs	r2, #1
 8000214:	601a      	str	r2, [r3, #0]
				TimerForKeyPress1 = 200;
 8000216:	4b49      	ldr	r3, [pc, #292]	; (800033c <getKeyInput+0x184>)
 8000218:	22c8      	movs	r2, #200	; 0xc8
 800021a:	601a      	str	r2, [r3, #0]
 800021c:	e00b      	b.n	8000236 <getKeyInput+0x7e>
			}
		}
		else{
			TimerForKeyPress1--;
 800021e:	4b47      	ldr	r3, [pc, #284]	; (800033c <getKeyInput+0x184>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	3b01      	subs	r3, #1
 8000224:	4a45      	ldr	r2, [pc, #276]	; (800033c <getKeyInput+0x184>)
 8000226:	6013      	str	r3, [r2, #0]
			if (TimerForKeyPress1 <= 0){
 8000228:	4b44      	ldr	r3, [pc, #272]	; (800033c <getKeyInput+0x184>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	2b00      	cmp	r3, #0
 800022e:	dc02      	bgt.n	8000236 <getKeyInput+0x7e>
				Key1Reg[3] = NORMAL_STATE;
 8000230:	4b3f      	ldr	r3, [pc, #252]	; (8000330 <getKeyInput+0x178>)
 8000232:	2201      	movs	r2, #1
 8000234:	60da      	str	r2, [r3, #12]
			}
		}
	}

	Key2Reg[0] = Key2Reg[1];
 8000236:	4b42      	ldr	r3, [pc, #264]	; (8000340 <getKeyInput+0x188>)
 8000238:	685b      	ldr	r3, [r3, #4]
 800023a:	4a41      	ldr	r2, [pc, #260]	; (8000340 <getKeyInput+0x188>)
 800023c:	6013      	str	r3, [r2, #0]
	Key2Reg[1] = Key2Reg[2];
 800023e:	4b40      	ldr	r3, [pc, #256]	; (8000340 <getKeyInput+0x188>)
 8000240:	689b      	ldr	r3, [r3, #8]
 8000242:	4a3f      	ldr	r2, [pc, #252]	; (8000340 <getKeyInput+0x188>)
 8000244:	6053      	str	r3, [r2, #4]
	Key2Reg[2] = HAL_GPIO_ReadPin(A2_GPIO_Port, A2_Pin);
 8000246:	2110      	movs	r1, #16
 8000248:	483a      	ldr	r0, [pc, #232]	; (8000334 <getKeyInput+0x17c>)
 800024a:	f001 fd8f 	bl	8001d6c <HAL_GPIO_ReadPin>
 800024e:	4603      	mov	r3, r0
 8000250:	461a      	mov	r2, r3
 8000252:	4b3b      	ldr	r3, [pc, #236]	; (8000340 <getKeyInput+0x188>)
 8000254:	609a      	str	r2, [r3, #8]
	if ((Key2Reg[0] == Key2Reg[1]) && (Key2Reg[1] == Key2Reg[2])){
 8000256:	4b3a      	ldr	r3, [pc, #232]	; (8000340 <getKeyInput+0x188>)
 8000258:	681a      	ldr	r2, [r3, #0]
 800025a:	4b39      	ldr	r3, [pc, #228]	; (8000340 <getKeyInput+0x188>)
 800025c:	685b      	ldr	r3, [r3, #4]
 800025e:	429a      	cmp	r2, r3
 8000260:	d126      	bne.n	80002b0 <getKeyInput+0xf8>
 8000262:	4b37      	ldr	r3, [pc, #220]	; (8000340 <getKeyInput+0x188>)
 8000264:	685a      	ldr	r2, [r3, #4]
 8000266:	4b36      	ldr	r3, [pc, #216]	; (8000340 <getKeyInput+0x188>)
 8000268:	689b      	ldr	r3, [r3, #8]
 800026a:	429a      	cmp	r2, r3
 800026c:	d120      	bne.n	80002b0 <getKeyInput+0xf8>
		if (Key2Reg[3] != Key2Reg[2]){
 800026e:	4b34      	ldr	r3, [pc, #208]	; (8000340 <getKeyInput+0x188>)
 8000270:	68da      	ldr	r2, [r3, #12]
 8000272:	4b33      	ldr	r3, [pc, #204]	; (8000340 <getKeyInput+0x188>)
 8000274:	689b      	ldr	r3, [r3, #8]
 8000276:	429a      	cmp	r2, r3
 8000278:	d00e      	beq.n	8000298 <getKeyInput+0xe0>
			Key2Reg[3] = Key2Reg[2];
 800027a:	4b31      	ldr	r3, [pc, #196]	; (8000340 <getKeyInput+0x188>)
 800027c:	689b      	ldr	r3, [r3, #8]
 800027e:	4a30      	ldr	r2, [pc, #192]	; (8000340 <getKeyInput+0x188>)
 8000280:	60d3      	str	r3, [r2, #12]
			if (Key2Reg[2] == PRESSED_STATE){
 8000282:	4b2f      	ldr	r3, [pc, #188]	; (8000340 <getKeyInput+0x188>)
 8000284:	689b      	ldr	r3, [r3, #8]
 8000286:	2b00      	cmp	r3, #0
 8000288:	d112      	bne.n	80002b0 <getKeyInput+0xf8>
				button2_flag = 1;
 800028a:	4b2e      	ldr	r3, [pc, #184]	; (8000344 <getKeyInput+0x18c>)
 800028c:	2201      	movs	r2, #1
 800028e:	601a      	str	r2, [r3, #0]
				TimerForKeyPress2 = 200;
 8000290:	4b2d      	ldr	r3, [pc, #180]	; (8000348 <getKeyInput+0x190>)
 8000292:	22c8      	movs	r2, #200	; 0xc8
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	e00b      	b.n	80002b0 <getKeyInput+0xf8>
			}
		}
		else{
			TimerForKeyPress2--;
 8000298:	4b2b      	ldr	r3, [pc, #172]	; (8000348 <getKeyInput+0x190>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	3b01      	subs	r3, #1
 800029e:	4a2a      	ldr	r2, [pc, #168]	; (8000348 <getKeyInput+0x190>)
 80002a0:	6013      	str	r3, [r2, #0]
			if (TimerForKeyPress2 <= 0){
 80002a2:	4b29      	ldr	r3, [pc, #164]	; (8000348 <getKeyInput+0x190>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	dc02      	bgt.n	80002b0 <getKeyInput+0xf8>
				Key2Reg[3] = NORMAL_STATE;
 80002aa:	4b25      	ldr	r3, [pc, #148]	; (8000340 <getKeyInput+0x188>)
 80002ac:	2201      	movs	r2, #1
 80002ae:	60da      	str	r2, [r3, #12]
			}
		}
	}

	Key3Reg[0] = Key3Reg[1];
 80002b0:	4b26      	ldr	r3, [pc, #152]	; (800034c <getKeyInput+0x194>)
 80002b2:	685b      	ldr	r3, [r3, #4]
 80002b4:	4a25      	ldr	r2, [pc, #148]	; (800034c <getKeyInput+0x194>)
 80002b6:	6013      	str	r3, [r2, #0]
	Key3Reg[1] = Key3Reg[2];
 80002b8:	4b24      	ldr	r3, [pc, #144]	; (800034c <getKeyInput+0x194>)
 80002ba:	689b      	ldr	r3, [r3, #8]
 80002bc:	4a23      	ldr	r2, [pc, #140]	; (800034c <getKeyInput+0x194>)
 80002be:	6053      	str	r3, [r2, #4]
	Key3Reg[2] = HAL_GPIO_ReadPin(A3_GPIO_Port, A3_Pin);
 80002c0:	2101      	movs	r1, #1
 80002c2:	4823      	ldr	r0, [pc, #140]	; (8000350 <getKeyInput+0x198>)
 80002c4:	f001 fd52 	bl	8001d6c <HAL_GPIO_ReadPin>
 80002c8:	4603      	mov	r3, r0
 80002ca:	461a      	mov	r2, r3
 80002cc:	4b1f      	ldr	r3, [pc, #124]	; (800034c <getKeyInput+0x194>)
 80002ce:	609a      	str	r2, [r3, #8]
	if ((Key3Reg[0] == Key3Reg[1]) && (Key3Reg[1] == Key3Reg[2])){
 80002d0:	4b1e      	ldr	r3, [pc, #120]	; (800034c <getKeyInput+0x194>)
 80002d2:	681a      	ldr	r2, [r3, #0]
 80002d4:	4b1d      	ldr	r3, [pc, #116]	; (800034c <getKeyInput+0x194>)
 80002d6:	685b      	ldr	r3, [r3, #4]
 80002d8:	429a      	cmp	r2, r3
 80002da:	d126      	bne.n	800032a <getKeyInput+0x172>
 80002dc:	4b1b      	ldr	r3, [pc, #108]	; (800034c <getKeyInput+0x194>)
 80002de:	685a      	ldr	r2, [r3, #4]
 80002e0:	4b1a      	ldr	r3, [pc, #104]	; (800034c <getKeyInput+0x194>)
 80002e2:	689b      	ldr	r3, [r3, #8]
 80002e4:	429a      	cmp	r2, r3
 80002e6:	d120      	bne.n	800032a <getKeyInput+0x172>
		if (Key3Reg[3] != Key3Reg[2]){
 80002e8:	4b18      	ldr	r3, [pc, #96]	; (800034c <getKeyInput+0x194>)
 80002ea:	68da      	ldr	r2, [r3, #12]
 80002ec:	4b17      	ldr	r3, [pc, #92]	; (800034c <getKeyInput+0x194>)
 80002ee:	689b      	ldr	r3, [r3, #8]
 80002f0:	429a      	cmp	r2, r3
 80002f2:	d00e      	beq.n	8000312 <getKeyInput+0x15a>
			Key3Reg[3] = Key3Reg[2];
 80002f4:	4b15      	ldr	r3, [pc, #84]	; (800034c <getKeyInput+0x194>)
 80002f6:	689b      	ldr	r3, [r3, #8]
 80002f8:	4a14      	ldr	r2, [pc, #80]	; (800034c <getKeyInput+0x194>)
 80002fa:	60d3      	str	r3, [r2, #12]
			if (Key3Reg[2] == PRESSED_STATE){
 80002fc:	4b13      	ldr	r3, [pc, #76]	; (800034c <getKeyInput+0x194>)
 80002fe:	689b      	ldr	r3, [r3, #8]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d112      	bne.n	800032a <getKeyInput+0x172>
				button3_flag = 1;
 8000304:	4b13      	ldr	r3, [pc, #76]	; (8000354 <getKeyInput+0x19c>)
 8000306:	2201      	movs	r2, #1
 8000308:	601a      	str	r2, [r3, #0]
				TimerForKeyPress3 = 200;
 800030a:	4b13      	ldr	r3, [pc, #76]	; (8000358 <getKeyInput+0x1a0>)
 800030c:	22c8      	movs	r2, #200	; 0xc8
 800030e:	601a      	str	r2, [r3, #0]
				Key3Reg[3] = NORMAL_STATE;
			}
		}
	}

}
 8000310:	e00b      	b.n	800032a <getKeyInput+0x172>
			TimerForKeyPress3--;
 8000312:	4b11      	ldr	r3, [pc, #68]	; (8000358 <getKeyInput+0x1a0>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	3b01      	subs	r3, #1
 8000318:	4a0f      	ldr	r2, [pc, #60]	; (8000358 <getKeyInput+0x1a0>)
 800031a:	6013      	str	r3, [r2, #0]
			if (TimerForKeyPress3 <= 0){
 800031c:	4b0e      	ldr	r3, [pc, #56]	; (8000358 <getKeyInput+0x1a0>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	2b00      	cmp	r3, #0
 8000322:	dc02      	bgt.n	800032a <getKeyInput+0x172>
				Key3Reg[3] = NORMAL_STATE;
 8000324:	4b09      	ldr	r3, [pc, #36]	; (800034c <getKeyInput+0x194>)
 8000326:	2201      	movs	r2, #1
 8000328:	60da      	str	r2, [r3, #12]
}
 800032a:	bf00      	nop
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	20000000 	.word	0x20000000
 8000334:	40010800 	.word	0x40010800
 8000338:	200000e0 	.word	0x200000e0
 800033c:	20000010 	.word	0x20000010
 8000340:	20000014 	.word	0x20000014
 8000344:	200000e4 	.word	0x200000e4
 8000348:	20000024 	.word	0x20000024
 800034c:	20000028 	.word	0x20000028
 8000350:	40010c00 	.word	0x40010c00
 8000354:	200000e8 	.word	0x200000e8
 8000358:	20000038 	.word	0x20000038

0800035c <fsm_automatic_run0>:
#include "traffic_light.h"
#include "i2c_lcd.h"
#include "lcd_display.h"
#include "scheduler.h"

void fsm_automatic_run0(){
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
	switch(status[0]){
 8000360:	4b3d      	ldr	r3, [pc, #244]	; (8000458 <fsm_automatic_run0+0xfc>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	2b03      	cmp	r3, #3
 8000366:	d873      	bhi.n	8000450 <fsm_automatic_run0+0xf4>
 8000368:	a201      	add	r2, pc, #4	; (adr r2, 8000370 <fsm_automatic_run0+0x14>)
 800036a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800036e:	bf00      	nop
 8000370:	08000381 	.word	0x08000381
 8000374:	080003b5 	.word	0x080003b5
 8000378:	080003e9 	.word	0x080003e9
 800037c:	0800041d 	.word	0x0800041d
	case INIT:
		status[0] = AUTO_RED;
 8000380:	4b35      	ldr	r3, [pc, #212]	; (8000458 <fsm_automatic_run0+0xfc>)
 8000382:	2201      	movs	r2, #1
 8000384:	601a      	str	r2, [r3, #0]
		setRed(0);
 8000386:	2000      	movs	r0, #0
 8000388:	f001 f85c 	bl	8001444 <setRed>
		//setBuffer7SEG(0, timerLed[0] / 1000);
		setBufferLCD(0, timerLed[0] / 1000);
 800038c:	4b33      	ldr	r3, [pc, #204]	; (800045c <fsm_automatic_run0+0x100>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a33      	ldr	r2, [pc, #204]	; (8000460 <fsm_automatic_run0+0x104>)
 8000392:	fb82 1203 	smull	r1, r2, r2, r3
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	17db      	asrs	r3, r3, #31
 800039a:	1ad3      	subs	r3, r2, r3
 800039c:	4619      	mov	r1, r3
 800039e:	2000      	movs	r0, #0
 80003a0:	f000 fb44 	bl	8000a2c <setBufferLCD>
		SCH_Add_Task(fsm_automatic_run0, timerLed[0], 0);
 80003a4:	4b2d      	ldr	r3, [pc, #180]	; (800045c <fsm_automatic_run0+0x100>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	2200      	movs	r2, #0
 80003aa:	4619      	mov	r1, r3
 80003ac:	482d      	ldr	r0, [pc, #180]	; (8000464 <fsm_automatic_run0+0x108>)
 80003ae:	f000 fd65 	bl	8000e7c <SCH_Add_Task>
		break;
 80003b2:	e04e      	b.n	8000452 <fsm_automatic_run0+0xf6>
	case AUTO_RED:
		status[0] = AUTO_GREEN;
 80003b4:	4b28      	ldr	r3, [pc, #160]	; (8000458 <fsm_automatic_run0+0xfc>)
 80003b6:	2202      	movs	r2, #2
 80003b8:	601a      	str	r2, [r3, #0]
		setGreen(0);
 80003ba:	2000      	movs	r0, #0
 80003bc:	f001 f882 	bl	80014c4 <setGreen>
		//setBuffer7SEG(0, timerLed[1] / 1000);
		setBufferLCD(0, timerLed[1] / 1000);
 80003c0:	4b26      	ldr	r3, [pc, #152]	; (800045c <fsm_automatic_run0+0x100>)
 80003c2:	685b      	ldr	r3, [r3, #4]
 80003c4:	4a26      	ldr	r2, [pc, #152]	; (8000460 <fsm_automatic_run0+0x104>)
 80003c6:	fb82 1203 	smull	r1, r2, r2, r3
 80003ca:	1192      	asrs	r2, r2, #6
 80003cc:	17db      	asrs	r3, r3, #31
 80003ce:	1ad3      	subs	r3, r2, r3
 80003d0:	4619      	mov	r1, r3
 80003d2:	2000      	movs	r0, #0
 80003d4:	f000 fb2a 	bl	8000a2c <setBufferLCD>
		SCH_Add_Task(fsm_automatic_run0, timerLed[1], 0);
 80003d8:	4b20      	ldr	r3, [pc, #128]	; (800045c <fsm_automatic_run0+0x100>)
 80003da:	685b      	ldr	r3, [r3, #4]
 80003dc:	2200      	movs	r2, #0
 80003de:	4619      	mov	r1, r3
 80003e0:	4820      	ldr	r0, [pc, #128]	; (8000464 <fsm_automatic_run0+0x108>)
 80003e2:	f000 fd4b 	bl	8000e7c <SCH_Add_Task>
		break;
 80003e6:	e034      	b.n	8000452 <fsm_automatic_run0+0xf6>
	case AUTO_GREEN:
		status[0] = AUTO_YELLOW;
 80003e8:	4b1b      	ldr	r3, [pc, #108]	; (8000458 <fsm_automatic_run0+0xfc>)
 80003ea:	2203      	movs	r2, #3
 80003ec:	601a      	str	r2, [r3, #0]
		setYellow(0);
 80003ee:	2000      	movs	r0, #0
 80003f0:	f001 f8a8 	bl	8001544 <setYellow>
		//setBuffer7SEG(0, timerLed[2] / 1000);
		setBufferLCD(0, timerLed[2] / 1000);
 80003f4:	4b19      	ldr	r3, [pc, #100]	; (800045c <fsm_automatic_run0+0x100>)
 80003f6:	689b      	ldr	r3, [r3, #8]
 80003f8:	4a19      	ldr	r2, [pc, #100]	; (8000460 <fsm_automatic_run0+0x104>)
 80003fa:	fb82 1203 	smull	r1, r2, r2, r3
 80003fe:	1192      	asrs	r2, r2, #6
 8000400:	17db      	asrs	r3, r3, #31
 8000402:	1ad3      	subs	r3, r2, r3
 8000404:	4619      	mov	r1, r3
 8000406:	2000      	movs	r0, #0
 8000408:	f000 fb10 	bl	8000a2c <setBufferLCD>
		SCH_Add_Task(fsm_automatic_run0, timerLed[2], 0);
 800040c:	4b13      	ldr	r3, [pc, #76]	; (800045c <fsm_automatic_run0+0x100>)
 800040e:	689b      	ldr	r3, [r3, #8]
 8000410:	2200      	movs	r2, #0
 8000412:	4619      	mov	r1, r3
 8000414:	4813      	ldr	r0, [pc, #76]	; (8000464 <fsm_automatic_run0+0x108>)
 8000416:	f000 fd31 	bl	8000e7c <SCH_Add_Task>
		break;
 800041a:	e01a      	b.n	8000452 <fsm_automatic_run0+0xf6>
	case AUTO_YELLOW:
		status[0] = AUTO_RED;
 800041c:	4b0e      	ldr	r3, [pc, #56]	; (8000458 <fsm_automatic_run0+0xfc>)
 800041e:	2201      	movs	r2, #1
 8000420:	601a      	str	r2, [r3, #0]
		setRed(0);
 8000422:	2000      	movs	r0, #0
 8000424:	f001 f80e 	bl	8001444 <setRed>
		//setBuffer7SEG(0, timerLed[0] / 1000);
		setBufferLCD(0, timerLed[0] / 1000);
 8000428:	4b0c      	ldr	r3, [pc, #48]	; (800045c <fsm_automatic_run0+0x100>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a0c      	ldr	r2, [pc, #48]	; (8000460 <fsm_automatic_run0+0x104>)
 800042e:	fb82 1203 	smull	r1, r2, r2, r3
 8000432:	1192      	asrs	r2, r2, #6
 8000434:	17db      	asrs	r3, r3, #31
 8000436:	1ad3      	subs	r3, r2, r3
 8000438:	4619      	mov	r1, r3
 800043a:	2000      	movs	r0, #0
 800043c:	f000 faf6 	bl	8000a2c <setBufferLCD>
		SCH_Add_Task(fsm_automatic_run0, timerLed[0], 0);
 8000440:	4b06      	ldr	r3, [pc, #24]	; (800045c <fsm_automatic_run0+0x100>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	2200      	movs	r2, #0
 8000446:	4619      	mov	r1, r3
 8000448:	4806      	ldr	r0, [pc, #24]	; (8000464 <fsm_automatic_run0+0x108>)
 800044a:	f000 fd17 	bl	8000e7c <SCH_Add_Task>
		break;
 800044e:	e000      	b.n	8000452 <fsm_automatic_run0+0xf6>
	default:
		break;
 8000450:	bf00      	nop
	}
}
 8000452:	bf00      	nop
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	200000ec 	.word	0x200000ec
 800045c:	20000048 	.word	0x20000048
 8000460:	10624dd3 	.word	0x10624dd3
 8000464:	0800035d 	.word	0x0800035d

08000468 <fsm_automatic_run1>:

void fsm_automatic_run1(){
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
	switch(status[1]){
 800046c:	4b3d      	ldr	r3, [pc, #244]	; (8000564 <fsm_automatic_run1+0xfc>)
 800046e:	685b      	ldr	r3, [r3, #4]
 8000470:	2b03      	cmp	r3, #3
 8000472:	d873      	bhi.n	800055c <fsm_automatic_run1+0xf4>
 8000474:	a201      	add	r2, pc, #4	; (adr r2, 800047c <fsm_automatic_run1+0x14>)
 8000476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800047a:	bf00      	nop
 800047c:	0800048d 	.word	0x0800048d
 8000480:	080004c1 	.word	0x080004c1
 8000484:	080004f5 	.word	0x080004f5
 8000488:	08000529 	.word	0x08000529
	case INIT:
		status[1] = AUTO_GREEN;
 800048c:	4b35      	ldr	r3, [pc, #212]	; (8000564 <fsm_automatic_run1+0xfc>)
 800048e:	2202      	movs	r2, #2
 8000490:	605a      	str	r2, [r3, #4]
		setGreen(1);
 8000492:	2001      	movs	r0, #1
 8000494:	f001 f816 	bl	80014c4 <setGreen>
		//setBuffer7SEG(1, timerLed[1] / 1000);
		setBufferLCD(1, timerLed[1] / 1000);
 8000498:	4b33      	ldr	r3, [pc, #204]	; (8000568 <fsm_automatic_run1+0x100>)
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	4a33      	ldr	r2, [pc, #204]	; (800056c <fsm_automatic_run1+0x104>)
 800049e:	fb82 1203 	smull	r1, r2, r2, r3
 80004a2:	1192      	asrs	r2, r2, #6
 80004a4:	17db      	asrs	r3, r3, #31
 80004a6:	1ad3      	subs	r3, r2, r3
 80004a8:	4619      	mov	r1, r3
 80004aa:	2001      	movs	r0, #1
 80004ac:	f000 fabe 	bl	8000a2c <setBufferLCD>
		SCH_Add_Task(fsm_automatic_run1, timerLed[1], 0);
 80004b0:	4b2d      	ldr	r3, [pc, #180]	; (8000568 <fsm_automatic_run1+0x100>)
 80004b2:	685b      	ldr	r3, [r3, #4]
 80004b4:	2200      	movs	r2, #0
 80004b6:	4619      	mov	r1, r3
 80004b8:	482d      	ldr	r0, [pc, #180]	; (8000570 <fsm_automatic_run1+0x108>)
 80004ba:	f000 fcdf 	bl	8000e7c <SCH_Add_Task>
		break;
 80004be:	e04e      	b.n	800055e <fsm_automatic_run1+0xf6>
	case AUTO_RED:
		status[1] = AUTO_GREEN;
 80004c0:	4b28      	ldr	r3, [pc, #160]	; (8000564 <fsm_automatic_run1+0xfc>)
 80004c2:	2202      	movs	r2, #2
 80004c4:	605a      	str	r2, [r3, #4]
		setRed(1);
 80004c6:	2001      	movs	r0, #1
 80004c8:	f000 ffbc 	bl	8001444 <setRed>
		//setBuffer7SEG(1, timerLed[1] / 1000);
		setBufferLCD(1, timerLed[1] / 1000);
 80004cc:	4b26      	ldr	r3, [pc, #152]	; (8000568 <fsm_automatic_run1+0x100>)
 80004ce:	685b      	ldr	r3, [r3, #4]
 80004d0:	4a26      	ldr	r2, [pc, #152]	; (800056c <fsm_automatic_run1+0x104>)
 80004d2:	fb82 1203 	smull	r1, r2, r2, r3
 80004d6:	1192      	asrs	r2, r2, #6
 80004d8:	17db      	asrs	r3, r3, #31
 80004da:	1ad3      	subs	r3, r2, r3
 80004dc:	4619      	mov	r1, r3
 80004de:	2001      	movs	r0, #1
 80004e0:	f000 faa4 	bl	8000a2c <setBufferLCD>
		SCH_Add_Task(fsm_automatic_run1, timerLed[1], 0);
 80004e4:	4b20      	ldr	r3, [pc, #128]	; (8000568 <fsm_automatic_run1+0x100>)
 80004e6:	685b      	ldr	r3, [r3, #4]
 80004e8:	2200      	movs	r2, #0
 80004ea:	4619      	mov	r1, r3
 80004ec:	4820      	ldr	r0, [pc, #128]	; (8000570 <fsm_automatic_run1+0x108>)
 80004ee:	f000 fcc5 	bl	8000e7c <SCH_Add_Task>
		break;
 80004f2:	e034      	b.n	800055e <fsm_automatic_run1+0xf6>
	case AUTO_GREEN:
		status[1] = AUTO_YELLOW;
 80004f4:	4b1b      	ldr	r3, [pc, #108]	; (8000564 <fsm_automatic_run1+0xfc>)
 80004f6:	2203      	movs	r2, #3
 80004f8:	605a      	str	r2, [r3, #4]
		setYellow(1);
 80004fa:	2001      	movs	r0, #1
 80004fc:	f001 f822 	bl	8001544 <setYellow>
		//setBuffer7SEG(1, timerLed[2] / 1000);
		setBufferLCD(1, timerLed[2] / 1000);
 8000500:	4b19      	ldr	r3, [pc, #100]	; (8000568 <fsm_automatic_run1+0x100>)
 8000502:	689b      	ldr	r3, [r3, #8]
 8000504:	4a19      	ldr	r2, [pc, #100]	; (800056c <fsm_automatic_run1+0x104>)
 8000506:	fb82 1203 	smull	r1, r2, r2, r3
 800050a:	1192      	asrs	r2, r2, #6
 800050c:	17db      	asrs	r3, r3, #31
 800050e:	1ad3      	subs	r3, r2, r3
 8000510:	4619      	mov	r1, r3
 8000512:	2001      	movs	r0, #1
 8000514:	f000 fa8a 	bl	8000a2c <setBufferLCD>
		SCH_Add_Task(fsm_automatic_run1, timerLed[2], 0);
 8000518:	4b13      	ldr	r3, [pc, #76]	; (8000568 <fsm_automatic_run1+0x100>)
 800051a:	689b      	ldr	r3, [r3, #8]
 800051c:	2200      	movs	r2, #0
 800051e:	4619      	mov	r1, r3
 8000520:	4813      	ldr	r0, [pc, #76]	; (8000570 <fsm_automatic_run1+0x108>)
 8000522:	f000 fcab 	bl	8000e7c <SCH_Add_Task>
		break;
 8000526:	e01a      	b.n	800055e <fsm_automatic_run1+0xf6>
	case AUTO_YELLOW:
		status[1] = AUTO_RED;
 8000528:	4b0e      	ldr	r3, [pc, #56]	; (8000564 <fsm_automatic_run1+0xfc>)
 800052a:	2201      	movs	r2, #1
 800052c:	605a      	str	r2, [r3, #4]
		setRed(1);
 800052e:	2001      	movs	r0, #1
 8000530:	f000 ff88 	bl	8001444 <setRed>
		//setBuffer7SEG(1, timerLed[0] / 1000);
		setBufferLCD(1, timerLed[0] / 1000);
 8000534:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <fsm_automatic_run1+0x100>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a0c      	ldr	r2, [pc, #48]	; (800056c <fsm_automatic_run1+0x104>)
 800053a:	fb82 1203 	smull	r1, r2, r2, r3
 800053e:	1192      	asrs	r2, r2, #6
 8000540:	17db      	asrs	r3, r3, #31
 8000542:	1ad3      	subs	r3, r2, r3
 8000544:	4619      	mov	r1, r3
 8000546:	2001      	movs	r0, #1
 8000548:	f000 fa70 	bl	8000a2c <setBufferLCD>
		SCH_Add_Task(fsm_automatic_run1, timerLed[0], 0);
 800054c:	4b06      	ldr	r3, [pc, #24]	; (8000568 <fsm_automatic_run1+0x100>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	2200      	movs	r2, #0
 8000552:	4619      	mov	r1, r3
 8000554:	4806      	ldr	r0, [pc, #24]	; (8000570 <fsm_automatic_run1+0x108>)
 8000556:	f000 fc91 	bl	8000e7c <SCH_Add_Task>
		break;
 800055a:	e000      	b.n	800055e <fsm_automatic_run1+0xf6>
	default:
		break;
 800055c:	bf00      	nop
	}
}
 800055e:	bf00      	nop
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	200000ec 	.word	0x200000ec
 8000568:	20000048 	.word	0x20000048
 800056c:	10624dd3 	.word	0x10624dd3
 8000570:	08000469 	.word	0x08000469

08000574 <fsm_manual_run>:
#include "fsm_manual.h"
#include "traffic_light.h"
#include "global.h"
#include "scheduler.h"

void fsm_manual_run(){
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	switch (status[0]){
 8000578:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <fsm_manual_run+0x34>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	2b0d      	cmp	r3, #13
 800057e:	d00c      	beq.n	800059a <fsm_manual_run+0x26>
 8000580:	2b0d      	cmp	r3, #13
 8000582:	dc0d      	bgt.n	80005a0 <fsm_manual_run+0x2c>
 8000584:	2b0b      	cmp	r3, #11
 8000586:	d002      	beq.n	800058e <fsm_manual_run+0x1a>
 8000588:	2b0c      	cmp	r3, #12
 800058a:	d003      	beq.n	8000594 <fsm_manual_run+0x20>
		break;
	case MANUAL_YELLOW:
		blinkYellow();
		break;
	default:
		break;
 800058c:	e008      	b.n	80005a0 <fsm_manual_run+0x2c>
		blinkRed();
 800058e:	f001 f819 	bl	80015c4 <blinkRed>
		break;
 8000592:	e006      	b.n	80005a2 <fsm_manual_run+0x2e>
		blinkGreen();
 8000594:	f001 f876 	bl	8001684 <blinkGreen>
		break;
 8000598:	e003      	b.n	80005a2 <fsm_manual_run+0x2e>
		blinkYellow();
 800059a:	f001 f845 	bl	8001628 <blinkYellow>
		break;
 800059e:	e000      	b.n	80005a2 <fsm_manual_run+0x2e>
		break;
 80005a0:	bf00      	nop
	}
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	200000ec 	.word	0x200000ec

080005ac <fsm_setting_run>:
#include "fsm_automatic.h"
#include "fsm_manual.h"

int tmp[3] = {5000, 3000, 2000};

void fsm_setting_run(){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
	if(status[0] > 10){
 80005b2:	4b87      	ldr	r3, [pc, #540]	; (80007d0 <fsm_setting_run+0x224>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b0a      	cmp	r3, #10
 80005b8:	dd70      	ble.n	800069c <fsm_setting_run+0xf0>
		if(isButton2Pressed()){
 80005ba:	f7ff fdd9 	bl	8000170 <isButton2Pressed>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d052      	beq.n	800066a <fsm_setting_run+0xbe>
			switch(status[0]){
 80005c4:	4b82      	ldr	r3, [pc, #520]	; (80007d0 <fsm_setting_run+0x224>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b0d      	cmp	r3, #13
 80005ca:	d036      	beq.n	800063a <fsm_setting_run+0x8e>
 80005cc:	2b0d      	cmp	r3, #13
 80005ce:	dc4e      	bgt.n	800066e <fsm_setting_run+0xc2>
 80005d0:	2b0b      	cmp	r3, #11
 80005d2:	d002      	beq.n	80005da <fsm_setting_run+0x2e>
 80005d4:	2b0c      	cmp	r3, #12
 80005d6:	d018      	beq.n	800060a <fsm_setting_run+0x5e>
				if(tmp[2] < 99*1000) tmp[2] = tmp[2] + 1000;
				//setBuffer7SEG(0, tmp[2] / 1000);
				setBufferLCD(0, tmp[2] / 1000);
				break;
			default:
				break;
 80005d8:	e049      	b.n	800066e <fsm_setting_run+0xc2>
				if(tmp[0] < 99*1000) tmp[0] = tmp[0] + 1000;
 80005da:	4b7e      	ldr	r3, [pc, #504]	; (80007d4 <fsm_setting_run+0x228>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a7e      	ldr	r2, [pc, #504]	; (80007d8 <fsm_setting_run+0x22c>)
 80005e0:	4293      	cmp	r3, r2
 80005e2:	dc05      	bgt.n	80005f0 <fsm_setting_run+0x44>
 80005e4:	4b7b      	ldr	r3, [pc, #492]	; (80007d4 <fsm_setting_run+0x228>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80005ec:	4a79      	ldr	r2, [pc, #484]	; (80007d4 <fsm_setting_run+0x228>)
 80005ee:	6013      	str	r3, [r2, #0]
				setBufferLCD(0, tmp[0] / 1000);
 80005f0:	4b78      	ldr	r3, [pc, #480]	; (80007d4 <fsm_setting_run+0x228>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a79      	ldr	r2, [pc, #484]	; (80007dc <fsm_setting_run+0x230>)
 80005f6:	fb82 1203 	smull	r1, r2, r2, r3
 80005fa:	1192      	asrs	r2, r2, #6
 80005fc:	17db      	asrs	r3, r3, #31
 80005fe:	1ad3      	subs	r3, r2, r3
 8000600:	4619      	mov	r1, r3
 8000602:	2000      	movs	r0, #0
 8000604:	f000 fa12 	bl	8000a2c <setBufferLCD>
				break;
 8000608:	e032      	b.n	8000670 <fsm_setting_run+0xc4>
				if(tmp[1] < 99*1000) tmp[1] = tmp[1] + 1000;
 800060a:	4b72      	ldr	r3, [pc, #456]	; (80007d4 <fsm_setting_run+0x228>)
 800060c:	685b      	ldr	r3, [r3, #4]
 800060e:	4a72      	ldr	r2, [pc, #456]	; (80007d8 <fsm_setting_run+0x22c>)
 8000610:	4293      	cmp	r3, r2
 8000612:	dc05      	bgt.n	8000620 <fsm_setting_run+0x74>
 8000614:	4b6f      	ldr	r3, [pc, #444]	; (80007d4 <fsm_setting_run+0x228>)
 8000616:	685b      	ldr	r3, [r3, #4]
 8000618:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800061c:	4a6d      	ldr	r2, [pc, #436]	; (80007d4 <fsm_setting_run+0x228>)
 800061e:	6053      	str	r3, [r2, #4]
				setBufferLCD(0, tmp[1] / 1000);
 8000620:	4b6c      	ldr	r3, [pc, #432]	; (80007d4 <fsm_setting_run+0x228>)
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	4a6d      	ldr	r2, [pc, #436]	; (80007dc <fsm_setting_run+0x230>)
 8000626:	fb82 1203 	smull	r1, r2, r2, r3
 800062a:	1192      	asrs	r2, r2, #6
 800062c:	17db      	asrs	r3, r3, #31
 800062e:	1ad3      	subs	r3, r2, r3
 8000630:	4619      	mov	r1, r3
 8000632:	2000      	movs	r0, #0
 8000634:	f000 f9fa 	bl	8000a2c <setBufferLCD>
				break;
 8000638:	e01a      	b.n	8000670 <fsm_setting_run+0xc4>
				if(tmp[2] < 99*1000) tmp[2] = tmp[2] + 1000;
 800063a:	4b66      	ldr	r3, [pc, #408]	; (80007d4 <fsm_setting_run+0x228>)
 800063c:	689b      	ldr	r3, [r3, #8]
 800063e:	4a66      	ldr	r2, [pc, #408]	; (80007d8 <fsm_setting_run+0x22c>)
 8000640:	4293      	cmp	r3, r2
 8000642:	dc05      	bgt.n	8000650 <fsm_setting_run+0xa4>
 8000644:	4b63      	ldr	r3, [pc, #396]	; (80007d4 <fsm_setting_run+0x228>)
 8000646:	689b      	ldr	r3, [r3, #8]
 8000648:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800064c:	4a61      	ldr	r2, [pc, #388]	; (80007d4 <fsm_setting_run+0x228>)
 800064e:	6093      	str	r3, [r2, #8]
				setBufferLCD(0, tmp[2] / 1000);
 8000650:	4b60      	ldr	r3, [pc, #384]	; (80007d4 <fsm_setting_run+0x228>)
 8000652:	689b      	ldr	r3, [r3, #8]
 8000654:	4a61      	ldr	r2, [pc, #388]	; (80007dc <fsm_setting_run+0x230>)
 8000656:	fb82 1203 	smull	r1, r2, r2, r3
 800065a:	1192      	asrs	r2, r2, #6
 800065c:	17db      	asrs	r3, r3, #31
 800065e:	1ad3      	subs	r3, r2, r3
 8000660:	4619      	mov	r1, r3
 8000662:	2000      	movs	r0, #0
 8000664:	f000 f9e2 	bl	8000a2c <setBufferLCD>
				break;
 8000668:	e002      	b.n	8000670 <fsm_setting_run+0xc4>
			}
		}
 800066a:	bf00      	nop
 800066c:	e000      	b.n	8000670 <fsm_setting_run+0xc4>
				break;
 800066e:	bf00      	nop
		if(isButton3Pressed()){
 8000670:	f7ff fd90 	bl	8000194 <isButton3Pressed>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d010      	beq.n	800069c <fsm_setting_run+0xf0>
			for(int i = 0; i < 3; i++){
 800067a:	2300      	movs	r3, #0
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	e00a      	b.n	8000696 <fsm_setting_run+0xea>
				timerLed[i] = tmp[i];
 8000680:	4a54      	ldr	r2, [pc, #336]	; (80007d4 <fsm_setting_run+0x228>)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000688:	4955      	ldr	r1, [pc, #340]	; (80007e0 <fsm_setting_run+0x234>)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(int i = 0; i < 3; i++){
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	3301      	adds	r3, #1
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2b02      	cmp	r3, #2
 800069a:	ddf1      	ble.n	8000680 <fsm_setting_run+0xd4>
			}
		}
	}
	if (isButton1Pressed()){
 800069c:	f7ff fd56 	bl	800014c <isButton1Pressed>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	f000 8090 	beq.w	80007c8 <fsm_setting_run+0x21c>
		if (status[0] > 10){
 80006a8:	4b49      	ldr	r3, [pc, #292]	; (80007d0 <fsm_setting_run+0x224>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b0a      	cmp	r3, #10
 80006ae:	dd4e      	ble.n	800074e <fsm_setting_run+0x1a2>
			switch (status[0]){
 80006b0:	4b47      	ldr	r3, [pc, #284]	; (80007d0 <fsm_setting_run+0x224>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2b0d      	cmp	r3, #13
 80006b6:	d035      	beq.n	8000724 <fsm_setting_run+0x178>
 80006b8:	2b0d      	cmp	r3, #13
 80006ba:	f300 8084 	bgt.w	80007c6 <fsm_setting_run+0x21a>
 80006be:	2b0b      	cmp	r3, #11
 80006c0:	d002      	beq.n	80006c8 <fsm_setting_run+0x11c>
 80006c2:	2b0c      	cmp	r3, #12
 80006c4:	d017      	beq.n	80006f6 <fsm_setting_run+0x14a>
				fsm_automatic_run1();
				//SCH_Add_Task(updateBuffer7SEG, 1000, 1000);
				SCH_Add_Task(updateBufferLCD, 1000, 1000);
				break;
			default:
				break;
 80006c6:	e07e      	b.n	80007c6 <fsm_setting_run+0x21a>
				status[0] = MANUAL_GREEN;
 80006c8:	4b41      	ldr	r3, [pc, #260]	; (80007d0 <fsm_setting_run+0x224>)
 80006ca:	220c      	movs	r2, #12
 80006cc:	601a      	str	r2, [r3, #0]
				status[1] = MANUAL_GREEN;
 80006ce:	4b40      	ldr	r3, [pc, #256]	; (80007d0 <fsm_setting_run+0x224>)
 80006d0:	220c      	movs	r2, #12
 80006d2:	605a      	str	r2, [r3, #4]
				setBufferLCD(0, tmp[1] / 1000);
 80006d4:	4b3f      	ldr	r3, [pc, #252]	; (80007d4 <fsm_setting_run+0x228>)
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	4a40      	ldr	r2, [pc, #256]	; (80007dc <fsm_setting_run+0x230>)
 80006da:	fb82 1203 	smull	r1, r2, r2, r3
 80006de:	1192      	asrs	r2, r2, #6
 80006e0:	17db      	asrs	r3, r3, #31
 80006e2:	1ad3      	subs	r3, r2, r3
 80006e4:	4619      	mov	r1, r3
 80006e6:	2000      	movs	r0, #0
 80006e8:	f000 f9a0 	bl	8000a2c <setBufferLCD>
				setBufferLCD(0, 3);
 80006ec:	2103      	movs	r1, #3
 80006ee:	2000      	movs	r0, #0
 80006f0:	f000 f99c 	bl	8000a2c <setBufferLCD>
				break;
 80006f4:	e068      	b.n	80007c8 <fsm_setting_run+0x21c>
				status[0] = MANUAL_YELLOW;
 80006f6:	4b36      	ldr	r3, [pc, #216]	; (80007d0 <fsm_setting_run+0x224>)
 80006f8:	220d      	movs	r2, #13
 80006fa:	601a      	str	r2, [r3, #0]
				status[1] = MANUAL_YELLOW;
 80006fc:	4b34      	ldr	r3, [pc, #208]	; (80007d0 <fsm_setting_run+0x224>)
 80006fe:	220d      	movs	r2, #13
 8000700:	605a      	str	r2, [r3, #4]
				setBufferLCD(0, tmp[2] / 1000);
 8000702:	4b34      	ldr	r3, [pc, #208]	; (80007d4 <fsm_setting_run+0x228>)
 8000704:	689b      	ldr	r3, [r3, #8]
 8000706:	4a35      	ldr	r2, [pc, #212]	; (80007dc <fsm_setting_run+0x230>)
 8000708:	fb82 1203 	smull	r1, r2, r2, r3
 800070c:	1192      	asrs	r2, r2, #6
 800070e:	17db      	asrs	r3, r3, #31
 8000710:	1ad3      	subs	r3, r2, r3
 8000712:	4619      	mov	r1, r3
 8000714:	2000      	movs	r0, #0
 8000716:	f000 f989 	bl	8000a2c <setBufferLCD>
				setBufferLCD(1, 4);
 800071a:	2104      	movs	r1, #4
 800071c:	2001      	movs	r0, #1
 800071e:	f000 f985 	bl	8000a2c <setBufferLCD>
				break;
 8000722:	e051      	b.n	80007c8 <fsm_setting_run+0x21c>
				status[0] = INIT;
 8000724:	4b2a      	ldr	r3, [pc, #168]	; (80007d0 <fsm_setting_run+0x224>)
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
				status[1] = INIT;
 800072a:	4b29      	ldr	r3, [pc, #164]	; (80007d0 <fsm_setting_run+0x224>)
 800072c:	2200      	movs	r2, #0
 800072e:	605a      	str	r2, [r3, #4]
				SCH_Delete(fsm_manual_run);
 8000730:	482c      	ldr	r0, [pc, #176]	; (80007e4 <fsm_setting_run+0x238>)
 8000732:	f000 fc99 	bl	8001068 <SCH_Delete>
				fsm_automatic_run0();
 8000736:	f7ff fe11 	bl	800035c <fsm_automatic_run0>
				fsm_automatic_run1();
 800073a:	f7ff fe95 	bl	8000468 <fsm_automatic_run1>
				SCH_Add_Task(updateBufferLCD, 1000, 1000);
 800073e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000742:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000746:	4828      	ldr	r0, [pc, #160]	; (80007e8 <fsm_setting_run+0x23c>)
 8000748:	f000 fb98 	bl	8000e7c <SCH_Add_Task>
				break;
 800074c:	e03c      	b.n	80007c8 <fsm_setting_run+0x21c>
			}
		}
		else if (status[0] < 10 ){
 800074e:	4b20      	ldr	r3, [pc, #128]	; (80007d0 <fsm_setting_run+0x224>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2b09      	cmp	r3, #9
 8000754:	dc38      	bgt.n	80007c8 <fsm_setting_run+0x21c>
			for (int i = 0; i < 3; i++){
 8000756:	2300      	movs	r3, #0
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	e00a      	b.n	8000772 <fsm_setting_run+0x1c6>
				tmp[i] = timerLed[i];
 800075c:	4a20      	ldr	r2, [pc, #128]	; (80007e0 <fsm_setting_run+0x234>)
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000764:	491b      	ldr	r1, [pc, #108]	; (80007d4 <fsm_setting_run+0x228>)
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for (int i = 0; i < 3; i++){
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	3301      	adds	r3, #1
 8000770:	603b      	str	r3, [r7, #0]
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	2b02      	cmp	r3, #2
 8000776:	ddf1      	ble.n	800075c <fsm_setting_run+0x1b0>
			}

			SCH_Delete(fsm_automatic_run0);
 8000778:	481c      	ldr	r0, [pc, #112]	; (80007ec <fsm_setting_run+0x240>)
 800077a:	f000 fc75 	bl	8001068 <SCH_Delete>
			SCH_Delete(fsm_automatic_run1);
 800077e:	481c      	ldr	r0, [pc, #112]	; (80007f0 <fsm_setting_run+0x244>)
 8000780:	f000 fc72 	bl	8001068 <SCH_Delete>
			SCH_Delete(updateBufferLCD);
 8000784:	4818      	ldr	r0, [pc, #96]	; (80007e8 <fsm_setting_run+0x23c>)
 8000786:	f000 fc6f 	bl	8001068 <SCH_Delete>
			status[0] = MANUAL_RED;
 800078a:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <fsm_setting_run+0x224>)
 800078c:	220b      	movs	r2, #11
 800078e:	601a      	str	r2, [r3, #0]
			status[1] = MANUAL_RED;
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <fsm_setting_run+0x224>)
 8000792:	220b      	movs	r2, #11
 8000794:	605a      	str	r2, [r3, #4]
			//setBuffer7SEG(0, timerLed[0] / 1000);
			//setBuffer7SEG(1, 2);
			setBufferLCD(0, timerLed[0] / 1000);
 8000796:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <fsm_setting_run+0x234>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a10      	ldr	r2, [pc, #64]	; (80007dc <fsm_setting_run+0x230>)
 800079c:	fb82 1203 	smull	r1, r2, r2, r3
 80007a0:	1192      	asrs	r2, r2, #6
 80007a2:	17db      	asrs	r3, r3, #31
 80007a4:	1ad3      	subs	r3, r2, r3
 80007a6:	4619      	mov	r1, r3
 80007a8:	2000      	movs	r0, #0
 80007aa:	f000 f93f 	bl	8000a2c <setBufferLCD>
			setBufferLCD(1, 2);
 80007ae:	2102      	movs	r1, #2
 80007b0:	2001      	movs	r0, #1
 80007b2:	f000 f93b 	bl	8000a2c <setBufferLCD>
			setInit();
 80007b6:	f000 fe0f 	bl	80013d8 <setInit>
			SCH_Add_Task(fsm_manual_run, 0, 250);
 80007ba:	22fa      	movs	r2, #250	; 0xfa
 80007bc:	2100      	movs	r1, #0
 80007be:	4809      	ldr	r0, [pc, #36]	; (80007e4 <fsm_setting_run+0x238>)
 80007c0:	f000 fb5c 	bl	8000e7c <SCH_Add_Task>
		}
	}
}
 80007c4:	e000      	b.n	80007c8 <fsm_setting_run+0x21c>
				break;
 80007c6:	bf00      	nop
}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	200000ec 	.word	0x200000ec
 80007d4:	2000003c 	.word	0x2000003c
 80007d8:	000182b7 	.word	0x000182b7
 80007dc:	10624dd3 	.word	0x10624dd3
 80007e0:	20000048 	.word	0x20000048
 80007e4:	08000575 	.word	0x08000575
 80007e8:	08000a55 	.word	0x08000a55
 80007ec:	0800035d 	.word	0x0800035d
 80007f0:	08000469 	.word	0x08000469

080007f4 <lcd_send_cmd>:
#include "i2c_lcd.h"
extern I2C_HandleTypeDef hi2c1;
#define SLAVE_ADDRESS_LCD (0x21 << 1)

void lcd_send_cmd (char cmd)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af02      	add	r7, sp, #8
 80007fa:	4603      	mov	r3, r0
 80007fc:	71fb      	strb	r3, [r7, #7]
  	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	f023 030f 	bic.w	r3, r3, #15
 8000804:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	011b      	lsls	r3, r3, #4
 800080a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800080c:	7bfb      	ldrb	r3, [r7, #15]
 800080e:	f043 030c 	orr.w	r3, r3, #12
 8000812:	b2db      	uxtb	r3, r3
 8000814:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000816:	7bfb      	ldrb	r3, [r7, #15]
 8000818:	f043 0308 	orr.w	r3, r3, #8
 800081c:	b2db      	uxtb	r3, r3
 800081e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000820:	7bbb      	ldrb	r3, [r7, #14]
 8000822:	f043 030c 	orr.w	r3, r3, #12
 8000826:	b2db      	uxtb	r3, r3
 8000828:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800082a:	7bbb      	ldrb	r3, [r7, #14]
 800082c:	f043 0308 	orr.w	r3, r3, #8
 8000830:	b2db      	uxtb	r3, r3
 8000832:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000834:	f107 0208 	add.w	r2, r7, #8
 8000838:	2364      	movs	r3, #100	; 0x64
 800083a:	9300      	str	r3, [sp, #0]
 800083c:	2304      	movs	r3, #4
 800083e:	2142      	movs	r1, #66	; 0x42
 8000840:	4803      	ldr	r0, [pc, #12]	; (8000850 <lcd_send_cmd+0x5c>)
 8000842:	f001 fc41 	bl	80020c8 <HAL_I2C_Master_Transmit>
}
 8000846:	bf00      	nop
 8000848:	3710      	adds	r7, #16
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000118 	.word	0x20000118

08000854 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b086      	sub	sp, #24
 8000858:	af02      	add	r7, sp, #8
 800085a:	4603      	mov	r3, r0
 800085c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	f023 030f 	bic.w	r3, r3, #15
 8000864:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	011b      	lsls	r3, r3, #4
 800086a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800086c:	7bfb      	ldrb	r3, [r7, #15]
 800086e:	f043 030d 	orr.w	r3, r3, #13
 8000872:	b2db      	uxtb	r3, r3
 8000874:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000876:	7bfb      	ldrb	r3, [r7, #15]
 8000878:	f043 0309 	orr.w	r3, r3, #9
 800087c:	b2db      	uxtb	r3, r3
 800087e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000880:	7bbb      	ldrb	r3, [r7, #14]
 8000882:	f043 030d 	orr.w	r3, r3, #13
 8000886:	b2db      	uxtb	r3, r3
 8000888:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800088a:	7bbb      	ldrb	r3, [r7, #14]
 800088c:	f043 0309 	orr.w	r3, r3, #9
 8000890:	b2db      	uxtb	r3, r3
 8000892:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000894:	f107 0208 	add.w	r2, r7, #8
 8000898:	2364      	movs	r3, #100	; 0x64
 800089a:	9300      	str	r3, [sp, #0]
 800089c:	2304      	movs	r3, #4
 800089e:	2142      	movs	r1, #66	; 0x42
 80008a0:	4803      	ldr	r0, [pc, #12]	; (80008b0 <lcd_send_data+0x5c>)
 80008a2:	f001 fc11 	bl	80020c8 <HAL_I2C_Master_Transmit>
}
 80008a6:	bf00      	nop
 80008a8:	3710      	adds	r7, #16
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000118 	.word	0x20000118

080008b4 <lcd_init>:

void lcd_init (void) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 80008b8:	2033      	movs	r0, #51	; 0x33
 80008ba:	f7ff ff9b 	bl	80007f4 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 80008be:	2032      	movs	r0, #50	; 0x32
 80008c0:	f7ff ff98 	bl	80007f4 <lcd_send_cmd>
	HAL_Delay(50);
 80008c4:	2032      	movs	r0, #50	; 0x32
 80008c6:	f000 ff9b 	bl	8001800 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 80008ca:	2028      	movs	r0, #40	; 0x28
 80008cc:	f7ff ff92 	bl	80007f4 <lcd_send_cmd>
	HAL_Delay(50);
 80008d0:	2032      	movs	r0, #50	; 0x32
 80008d2:	f000 ff95 	bl	8001800 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 80008d6:	2001      	movs	r0, #1
 80008d8:	f7ff ff8c 	bl	80007f4 <lcd_send_cmd>
	HAL_Delay(50);
 80008dc:	2032      	movs	r0, #50	; 0x32
 80008de:	f000 ff8f 	bl	8001800 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 80008e2:	2006      	movs	r0, #6
 80008e4:	f7ff ff86 	bl	80007f4 <lcd_send_cmd>
	HAL_Delay(50);
 80008e8:	2032      	movs	r0, #50	; 0x32
 80008ea:	f000 ff89 	bl	8001800 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 80008ee:	200c      	movs	r0, #12
 80008f0:	f7ff ff80 	bl	80007f4 <lcd_send_cmd>
	HAL_Delay(50);
 80008f4:	2032      	movs	r0, #50	; 0x32
 80008f6:	f000 ff83 	bl	8001800 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 80008fa:	2002      	movs	r0, #2
 80008fc:	f7ff ff7a 	bl	80007f4 <lcd_send_cmd>
	HAL_Delay(50);
 8000900:	2032      	movs	r0, #50	; 0x32
 8000902:	f000 ff7d 	bl	8001800 <HAL_Delay>
	lcd_send_cmd (0x80);
 8000906:	2080      	movs	r0, #128	; 0x80
 8000908:	f7ff ff74 	bl	80007f4 <lcd_send_cmd>
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}

08000910 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000918:	e006      	b.n	8000928 <lcd_send_string+0x18>
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	1c5a      	adds	r2, r3, #1
 800091e:	607a      	str	r2, [r7, #4]
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	4618      	mov	r0, r3
 8000924:	f7ff ff96 	bl	8000854 <lcd_send_data>
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d1f4      	bne.n	800091a <lcd_send_string+0xa>
}
 8000930:	bf00      	nop
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <lcd_clear_display>:

void lcd_clear_display (void)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 800093e:	2001      	movs	r0, #1
 8000940:	f7ff ff58 	bl	80007f4 <lcd_send_cmd>
}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}

08000948 <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2b01      	cmp	r3, #1
 8000956:	d108      	bne.n	800096a <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	b2da      	uxtb	r2, r3
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	b2db      	uxtb	r3, r3
 8000960:	4413      	add	r3, r2
 8000962:	b2db      	uxtb	r3, r3
 8000964:	337f      	adds	r3, #127	; 0x7f
 8000966:	73fb      	strb	r3, [r7, #15]
 8000968:	e008      	b.n	800097c <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	b2db      	uxtb	r3, r3
 800096e:	3340      	adds	r3, #64	; 0x40
 8000970:	b2db      	uxtb	r3, r3
 8000972:	b25b      	sxtb	r3, r3
 8000974:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000978:	b25b      	sxtb	r3, r3
 800097a:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 800097c:	7bfb      	ldrb	r3, [r7, #15]
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff ff38 	bl	80007f4 <lcd_send_cmd>
}
 8000984:	bf00      	nop
 8000986:	3710      	adds	r7, #16
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <displayLCD>:


int buffer[2] = {0, 0};
char buffer_bytes[16];

void displayLCD(int index){
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
	if(index == 0){
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d10d      	bne.n	80009b6 <displayLCD+0x2a>
		sprintf(buffer_bytes, "%d", buffer[0]);
 800099a:	4b21      	ldr	r3, [pc, #132]	; (8000a20 <displayLCD+0x94>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	461a      	mov	r2, r3
 80009a0:	4920      	ldr	r1, [pc, #128]	; (8000a24 <displayLCD+0x98>)
 80009a2:	4821      	ldr	r0, [pc, #132]	; (8000a28 <displayLCD+0x9c>)
 80009a4:	f003 f8be 	bl	8003b24 <siprintf>
		lcd_goto_XY(0, 0);
 80009a8:	2100      	movs	r1, #0
 80009aa:	2000      	movs	r0, #0
 80009ac:	f7ff ffcc 	bl	8000948 <lcd_goto_XY>
		lcd_send_string(buffer_bytes);
 80009b0:	481d      	ldr	r0, [pc, #116]	; (8000a28 <displayLCD+0x9c>)
 80009b2:	f7ff ffad 	bl	8000910 <lcd_send_string>
	}
	if(index == 1){
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d10d      	bne.n	80009d8 <displayLCD+0x4c>
		sprintf(buffer_bytes, "%d", buffer[1]);
 80009bc:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <displayLCD+0x94>)
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	461a      	mov	r2, r3
 80009c2:	4918      	ldr	r1, [pc, #96]	; (8000a24 <displayLCD+0x98>)
 80009c4:	4818      	ldr	r0, [pc, #96]	; (8000a28 <displayLCD+0x9c>)
 80009c6:	f003 f8ad 	bl	8003b24 <siprintf>
		lcd_goto_XY(1, 0);
 80009ca:	2100      	movs	r1, #0
 80009cc:	2001      	movs	r0, #1
 80009ce:	f7ff ffbb 	bl	8000948 <lcd_goto_XY>
		lcd_send_string(buffer_bytes);
 80009d2:	4815      	ldr	r0, [pc, #84]	; (8000a28 <displayLCD+0x9c>)
 80009d4:	f7ff ff9c 	bl	8000910 <lcd_send_string>
	}
	if(index == -1){
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009de:	d11b      	bne.n	8000a18 <displayLCD+0x8c>
		sprintf(buffer_bytes, "%d", buffer[0]);
 80009e0:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <displayLCD+0x94>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	461a      	mov	r2, r3
 80009e6:	490f      	ldr	r1, [pc, #60]	; (8000a24 <displayLCD+0x98>)
 80009e8:	480f      	ldr	r0, [pc, #60]	; (8000a28 <displayLCD+0x9c>)
 80009ea:	f003 f89b 	bl	8003b24 <siprintf>
		lcd_goto_XY(0, 0);
 80009ee:	2100      	movs	r1, #0
 80009f0:	2000      	movs	r0, #0
 80009f2:	f7ff ffa9 	bl	8000948 <lcd_goto_XY>
		lcd_send_string(buffer_bytes);
 80009f6:	480c      	ldr	r0, [pc, #48]	; (8000a28 <displayLCD+0x9c>)
 80009f8:	f7ff ff8a 	bl	8000910 <lcd_send_string>
		sprintf(buffer_bytes, "%d", buffer[1]);
 80009fc:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <displayLCD+0x94>)
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	461a      	mov	r2, r3
 8000a02:	4908      	ldr	r1, [pc, #32]	; (8000a24 <displayLCD+0x98>)
 8000a04:	4808      	ldr	r0, [pc, #32]	; (8000a28 <displayLCD+0x9c>)
 8000a06:	f003 f88d 	bl	8003b24 <siprintf>
		lcd_goto_XY(1, 0);
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	f7ff ff9b 	bl	8000948 <lcd_goto_XY>
		lcd_send_string(buffer_bytes);
 8000a12:	4805      	ldr	r0, [pc, #20]	; (8000a28 <displayLCD+0x9c>)
 8000a14:	f7ff ff7c 	bl	8000910 <lcd_send_string>
	}
}
 8000a18:	bf00      	nop
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	200000f4 	.word	0x200000f4
 8000a24:	08004244 	.word	0x08004244
 8000a28:	20000108 	.word	0x20000108

08000a2c <setBufferLCD>:

void setBufferLCD(int index, int data){
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	6039      	str	r1, [r7, #0]
	buffer[index] = data;
 8000a36:	4906      	ldr	r1, [pc, #24]	; (8000a50 <setBufferLCD+0x24>)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	683a      	ldr	r2, [r7, #0]
 8000a3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	displayLCD(index);
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f7ff ffa3 	bl	800098c <displayLCD>
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	200000f4 	.word	0x200000f4

08000a54 <updateBufferLCD>:

void updateBufferLCD(){
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	buffer[0]--;
 8000a58:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <updateBufferLCD+0x28>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	3b01      	subs	r3, #1
 8000a5e:	4a07      	ldr	r2, [pc, #28]	; (8000a7c <updateBufferLCD+0x28>)
 8000a60:	6013      	str	r3, [r2, #0]
	buffer[1]--;
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <updateBufferLCD+0x28>)
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	4a04      	ldr	r2, [pc, #16]	; (8000a7c <updateBufferLCD+0x28>)
 8000a6a:	6053      	str	r3, [r2, #4]
	lcd_clear_display();
 8000a6c:	f7ff ff65 	bl	800093a <lcd_clear_display>
	displayLCD(-1);
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	f7ff ff8a 	bl	800098c <displayLCD>
}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	200000f4 	.word	0x200000f4

08000a80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a84:	f000 fe5a 	bl	800173c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a88:	f000 f83e 	bl	8000b08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a8c:	f000 f922 	bl	8000cd4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a90:	f000 f8f6 	bl	8000c80 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000a94:	f000 f87a 	bl	8000b8c <MX_I2C1_Init>
  MX_TIM2_Init();
 8000a98:	f000 f8a6 	bl	8000be8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000a9c:	4814      	ldr	r0, [pc, #80]	; (8000af0 <main+0x70>)
 8000a9e:	f002 fac9 	bl	8003034 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Init();
 8000aa2:	f000 f9d9 	bl	8000e58 <SCH_Init>
  lcd_init();
 8000aa6:	f7ff ff05 	bl	80008b4 <lcd_init>
  //SCH_Add_Task(update7SEG, 1000, 250);
  //SCH_Add_Task(updateBuffer7SEG, 1000, 1000);
  SCH_Add_Task(updateBufferLCD, 1000, 1000);
 8000aaa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000aae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ab2:	4810      	ldr	r0, [pc, #64]	; (8000af4 <main+0x74>)
 8000ab4:	f000 f9e2 	bl	8000e7c <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic_run0, 1000, 0);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000abe:	480e      	ldr	r0, [pc, #56]	; (8000af8 <main+0x78>)
 8000ac0:	f000 f9dc 	bl	8000e7c <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic_run1, 1000, 0);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000aca:	480c      	ldr	r0, [pc, #48]	; (8000afc <main+0x7c>)
 8000acc:	f000 f9d6 	bl	8000e7c <SCH_Add_Task>
  SCH_Add_Task(fsm_setting_run, 1000, 10);
 8000ad0:	220a      	movs	r2, #10
 8000ad2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ad6:	480a      	ldr	r0, [pc, #40]	; (8000b00 <main+0x80>)
 8000ad8:	f000 f9d0 	bl	8000e7c <SCH_Add_Task>
  SCH_Add_Task(getKeyInput, 1000, 10);
 8000adc:	220a      	movs	r2, #10
 8000ade:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ae2:	4808      	ldr	r0, [pc, #32]	; (8000b04 <main+0x84>)
 8000ae4:	f000 f9ca 	bl	8000e7c <SCH_Add_Task>
  while (1)
  {
	  SCH_Dispatch_Tasks();
 8000ae8:	f000 fa74 	bl	8000fd4 <SCH_Dispatch_Tasks>
 8000aec:	e7fc      	b.n	8000ae8 <main+0x68>
 8000aee:	bf00      	nop
 8000af0:	2000016c 	.word	0x2000016c
 8000af4:	08000a55 	.word	0x08000a55
 8000af8:	0800035d 	.word	0x0800035d
 8000afc:	08000469 	.word	0x08000469
 8000b00:	080005ad 	.word	0x080005ad
 8000b04:	080001b9 	.word	0x080001b9

08000b08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b090      	sub	sp, #64	; 0x40
 8000b0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b0e:	f107 0318 	add.w	r3, r7, #24
 8000b12:	2228      	movs	r2, #40	; 0x28
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f002 ff46 	bl	80039a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
 8000b28:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b32:	2310      	movs	r3, #16
 8000b34:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b36:	2302      	movs	r3, #2
 8000b38:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000b3e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000b42:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b44:	f107 0318 	add.w	r3, r7, #24
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f001 fe15 	bl	8002778 <HAL_RCC_OscConfig>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000b54:	f000 f97a 	bl	8000e4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b58:	230f      	movs	r3, #15
 8000b5a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	2102      	movs	r1, #2
 8000b72:	4618      	mov	r0, r3
 8000b74:	f002 f880 	bl	8002c78 <HAL_RCC_ClockConfig>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000b7e:	f000 f965 	bl	8000e4c <Error_Handler>
  }
}
 8000b82:	bf00      	nop
 8000b84:	3740      	adds	r7, #64	; 0x40
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
	...

08000b8c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b90:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_I2C1_Init+0x50>)
 8000b92:	4a13      	ldr	r2, [pc, #76]	; (8000be0 <MX_I2C1_Init+0x54>)
 8000b94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <MX_I2C1_Init+0x50>)
 8000b98:	4a12      	ldr	r2, [pc, #72]	; (8000be4 <MX_I2C1_Init+0x58>)
 8000b9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <MX_I2C1_Init+0x50>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <MX_I2C1_Init+0x50>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <MX_I2C1_Init+0x50>)
 8000baa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bb0:	4b0a      	ldr	r3, [pc, #40]	; (8000bdc <MX_I2C1_Init+0x50>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bb6:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <MX_I2C1_Init+0x50>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bbc:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <MX_I2C1_Init+0x50>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bc2:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <MX_I2C1_Init+0x50>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bc8:	4804      	ldr	r0, [pc, #16]	; (8000bdc <MX_I2C1_Init+0x50>)
 8000bca:	f001 f939 	bl	8001e40 <HAL_I2C_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bd4:	f000 f93a 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20000118 	.word	0x20000118
 8000be0:	40005400 	.word	0x40005400
 8000be4:	000186a0 	.word	0x000186a0

08000be8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bee:	f107 0308 	add.w	r3, r7, #8
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bfc:	463b      	mov	r3, r7
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c04:	4b1d      	ldr	r3, [pc, #116]	; (8000c7c <MX_TIM2_Init+0x94>)
 8000c06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000c0c:	4b1b      	ldr	r3, [pc, #108]	; (8000c7c <MX_TIM2_Init+0x94>)
 8000c0e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000c12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c14:	4b19      	ldr	r3, [pc, #100]	; (8000c7c <MX_TIM2_Init+0x94>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000c1a:	4b18      	ldr	r3, [pc, #96]	; (8000c7c <MX_TIM2_Init+0x94>)
 8000c1c:	2209      	movs	r2, #9
 8000c1e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c20:	4b16      	ldr	r3, [pc, #88]	; (8000c7c <MX_TIM2_Init+0x94>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c26:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <MX_TIM2_Init+0x94>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c2c:	4813      	ldr	r0, [pc, #76]	; (8000c7c <MX_TIM2_Init+0x94>)
 8000c2e:	f002 f9b1 	bl	8002f94 <HAL_TIM_Base_Init>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c38:	f000 f908 	bl	8000e4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c42:	f107 0308 	add.w	r3, r7, #8
 8000c46:	4619      	mov	r1, r3
 8000c48:	480c      	ldr	r0, [pc, #48]	; (8000c7c <MX_TIM2_Init+0x94>)
 8000c4a:	f002 fb35 	bl	80032b8 <HAL_TIM_ConfigClockSource>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c54:	f000 f8fa 	bl	8000e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c60:	463b      	mov	r3, r7
 8000c62:	4619      	mov	r1, r3
 8000c64:	4805      	ldr	r0, [pc, #20]	; (8000c7c <MX_TIM2_Init+0x94>)
 8000c66:	f002 fd17 	bl	8003698 <HAL_TIMEx_MasterConfigSynchronization>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c70:	f000 f8ec 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c74:	bf00      	nop
 8000c76:	3718      	adds	r7, #24
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	2000016c 	.word	0x2000016c

08000c80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c84:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000c86:	4a12      	ldr	r2, [pc, #72]	; (8000cd0 <MX_USART2_UART_Init+0x50>)
 8000c88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c8a:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000c8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c92:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ca4:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000ca6:	220c      	movs	r2, #12
 8000ca8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000caa:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cb6:	4805      	ldr	r0, [pc, #20]	; (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000cb8:	f002 fd5e 	bl	8003778 <HAL_UART_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cc2:	f000 f8c3 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	200001b4 	.word	0x200001b4
 8000cd0:	40004400 	.word	0x40004400

08000cd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b088      	sub	sp, #32
 8000cd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cda:	f107 0310 	add.w	r3, r7, #16
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce8:	4b4e      	ldr	r3, [pc, #312]	; (8000e24 <MX_GPIO_Init+0x150>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	4a4d      	ldr	r2, [pc, #308]	; (8000e24 <MX_GPIO_Init+0x150>)
 8000cee:	f043 0310 	orr.w	r3, r3, #16
 8000cf2:	6193      	str	r3, [r2, #24]
 8000cf4:	4b4b      	ldr	r3, [pc, #300]	; (8000e24 <MX_GPIO_Init+0x150>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	f003 0310 	and.w	r3, r3, #16
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d00:	4b48      	ldr	r3, [pc, #288]	; (8000e24 <MX_GPIO_Init+0x150>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	4a47      	ldr	r2, [pc, #284]	; (8000e24 <MX_GPIO_Init+0x150>)
 8000d06:	f043 0320 	orr.w	r3, r3, #32
 8000d0a:	6193      	str	r3, [r2, #24]
 8000d0c:	4b45      	ldr	r3, [pc, #276]	; (8000e24 <MX_GPIO_Init+0x150>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f003 0320 	and.w	r3, r3, #32
 8000d14:	60bb      	str	r3, [r7, #8]
 8000d16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d18:	4b42      	ldr	r3, [pc, #264]	; (8000e24 <MX_GPIO_Init+0x150>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	4a41      	ldr	r2, [pc, #260]	; (8000e24 <MX_GPIO_Init+0x150>)
 8000d1e:	f043 0304 	orr.w	r3, r3, #4
 8000d22:	6193      	str	r3, [r2, #24]
 8000d24:	4b3f      	ldr	r3, [pc, #252]	; (8000e24 <MX_GPIO_Init+0x150>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	f003 0304 	and.w	r3, r3, #4
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d30:	4b3c      	ldr	r3, [pc, #240]	; (8000e24 <MX_GPIO_Init+0x150>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	4a3b      	ldr	r2, [pc, #236]	; (8000e24 <MX_GPIO_Init+0x150>)
 8000d36:	f043 0308 	orr.w	r3, r3, #8
 8000d3a:	6193      	str	r3, [r2, #24]
 8000d3c:	4b39      	ldr	r3, [pc, #228]	; (8000e24 <MX_GPIO_Init+0x150>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	f003 0308 	and.w	r3, r3, #8
 8000d44:	603b      	str	r3, [r7, #0]
 8000d46:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|D7_Pin|D8_Pin|D2_Pin, GPIO_PIN_RESET);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f44f 61e4 	mov.w	r1, #1824	; 0x720
 8000d4e:	4836      	ldr	r0, [pc, #216]	; (8000e28 <MX_GPIO_Init+0x154>)
 8000d50:	f001 f823 	bl	8001d9a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8000d54:	2200      	movs	r2, #0
 8000d56:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000d5a:	4834      	ldr	r0, [pc, #208]	; (8000e2c <MX_GPIO_Init+0x158>)
 8000d5c:	f001 f81d 	bl	8001d9a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D9_GPIO_Port, D9_Pin, GPIO_PIN_RESET);
 8000d60:	2200      	movs	r2, #0
 8000d62:	2180      	movs	r1, #128	; 0x80
 8000d64:	4832      	ldr	r0, [pc, #200]	; (8000e30 <MX_GPIO_Init+0x15c>)
 8000d66:	f001 f818 	bl	8001d9a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d70:	4b30      	ldr	r3, [pc, #192]	; (8000e34 <MX_GPIO_Init+0x160>)
 8000d72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d78:	f107 0310 	add.w	r3, r7, #16
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	482c      	ldr	r0, [pc, #176]	; (8000e30 <MX_GPIO_Init+0x15c>)
 8000d80:	f000 fe70 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : A1_Pin A2_Pin */
  GPIO_InitStruct.Pin = A1_Pin|A2_Pin;
 8000d84:	2312      	movs	r3, #18
 8000d86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d90:	f107 0310 	add.w	r3, r7, #16
 8000d94:	4619      	mov	r1, r3
 8000d96:	4824      	ldr	r0, [pc, #144]	; (8000e28 <MX_GPIO_Init+0x154>)
 8000d98:	f000 fe64 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin D7_Pin D8_Pin D2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|D7_Pin|D8_Pin|D2_Pin;
 8000d9c:	f44f 63e4 	mov.w	r3, #1824	; 0x720
 8000da0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da2:	2301      	movs	r3, #1
 8000da4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000daa:	2302      	movs	r3, #2
 8000dac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dae:	f107 0310 	add.w	r3, r7, #16
 8000db2:	4619      	mov	r1, r3
 8000db4:	481c      	ldr	r0, [pc, #112]	; (8000e28 <MX_GPIO_Init+0x154>)
 8000db6:	f000 fe55 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_Pin */
  GPIO_InitStruct.Pin = A3_Pin;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(A3_GPIO_Port, &GPIO_InitStruct);
 8000dc6:	f107 0310 	add.w	r3, r7, #16
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4817      	ldr	r0, [pc, #92]	; (8000e2c <MX_GPIO_Init+0x158>)
 8000dce:	f000 fe49 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 8000dd2:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000dd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	2302      	movs	r3, #2
 8000de2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de4:	f107 0310 	add.w	r3, r7, #16
 8000de8:	4619      	mov	r1, r3
 8000dea:	4810      	ldr	r0, [pc, #64]	; (8000e2c <MX_GPIO_Init+0x158>)
 8000dec:	f000 fe3a 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : D9_Pin */
  GPIO_InitStruct.Pin = D9_Pin;
 8000df0:	2380      	movs	r3, #128	; 0x80
 8000df2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df4:	2301      	movs	r3, #1
 8000df6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D9_GPIO_Port, &GPIO_InitStruct);
 8000e00:	f107 0310 	add.w	r3, r7, #16
 8000e04:	4619      	mov	r1, r3
 8000e06:	480a      	ldr	r0, [pc, #40]	; (8000e30 <MX_GPIO_Init+0x15c>)
 8000e08:	f000 fe2c 	bl	8001a64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2100      	movs	r1, #0
 8000e10:	2028      	movs	r0, #40	; 0x28
 8000e12:	f000 fdf0 	bl	80019f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e16:	2028      	movs	r0, #40	; 0x28
 8000e18:	f000 fe09 	bl	8001a2e <HAL_NVIC_EnableIRQ>

}
 8000e1c:	bf00      	nop
 8000e1e:	3720      	adds	r7, #32
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40021000 	.word	0x40021000
 8000e28:	40010800 	.word	0x40010800
 8000e2c:	40010c00 	.word	0x40010c00
 8000e30:	40011000 	.word	0x40011000
 8000e34:	10110000 	.word	0x10110000

08000e38 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8000e40:	f000 f8b6 	bl	8000fb0 <SCH_Update>
}
 8000e44:	bf00      	nop
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e50:	b672      	cpsid	i
}
 8000e52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <Error_Handler+0x8>
	...

08000e58 <SCH_Init>:

#include "scheduler.h"

DLinkedList listTask;

void SCH_Init(void){
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
	listTask.head = NULL;
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <SCH_Init+0x20>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	605a      	str	r2, [r3, #4]
	listTask.tail = NULL;
 8000e62:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <SCH_Init+0x20>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	609a      	str	r2, [r3, #8]
	listTask.nTask = 0;
 8000e68:	4b03      	ldr	r3, [pc, #12]	; (8000e78 <SCH_Init+0x20>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
}
 8000e6e:	bf00      	nop
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bc80      	pop	{r7}
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	200001fc 	.word	0x200001fc

08000e7c <SCH_Add_Task>:

void SCH_Add_Task(void (*function)(), uint32_t DELAY, uint32_t PERIOD){
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
	sTask * newTask = (sTask *) malloc (sizeof(sTask));
 8000e88:	2014      	movs	r0, #20
 8000e8a:	f002 fd7d 	bl	8003988 <malloc>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	613b      	str	r3, [r7, #16]
	if (newTask == NULL) return;
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	f000 8082 	beq.w	8000f9e <SCH_Add_Task+0x122>

	newTask->pTask = function;
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	68fa      	ldr	r2, [r7, #12]
 8000e9e:	601a      	str	r2, [r3, #0]
	newTask->Delay = DELAY/10;
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	4a41      	ldr	r2, [pc, #260]	; (8000fa8 <SCH_Add_Task+0x12c>)
 8000ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea8:	08da      	lsrs	r2, r3, #3
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	605a      	str	r2, [r3, #4]
	newTask->Period = PERIOD/10;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a3d      	ldr	r2, [pc, #244]	; (8000fa8 <SCH_Add_Task+0x12c>)
 8000eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb6:	08da      	lsrs	r2, r3, #3
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	609a      	str	r2, [r3, #8]
	newTask->nextTask = NULL;
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	611a      	str	r2, [r3, #16]
	newTask->preTask = NULL;
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	60da      	str	r2, [r3, #12]


	if(listTask.head == NULL){
 8000ec8:	4b38      	ldr	r3, [pc, #224]	; (8000fac <SCH_Add_Task+0x130>)
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d10b      	bne.n	8000ee8 <SCH_Add_Task+0x6c>
		listTask.head = newTask;
 8000ed0:	4a36      	ldr	r2, [pc, #216]	; (8000fac <SCH_Add_Task+0x130>)
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	6053      	str	r3, [r2, #4]
		listTask.tail = newTask;
 8000ed6:	4a35      	ldr	r2, [pc, #212]	; (8000fac <SCH_Add_Task+0x130>)
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	6093      	str	r3, [r2, #8]
		listTask.nTask++;
 8000edc:	4b33      	ldr	r3, [pc, #204]	; (8000fac <SCH_Add_Task+0x130>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	4a32      	ldr	r2, [pc, #200]	; (8000fac <SCH_Add_Task+0x130>)
 8000ee4:	6013      	str	r3, [r2, #0]
		return;
 8000ee6:	e05b      	b.n	8000fa0 <SCH_Add_Task+0x124>
	}

	sTask *currTask = listTask.head;
 8000ee8:	4b30      	ldr	r3, [pc, #192]	; (8000fac <SCH_Add_Task+0x130>)
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	617b      	str	r3, [r7, #20]
	while(currTask != NULL && newTask->Delay >= currTask->Delay){
 8000eee:	e009      	b.n	8000f04 <SCH_Add_Task+0x88>
		newTask->Delay = newTask->Delay - currTask->Delay;
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	685a      	ldr	r2, [r3, #4]
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	1ad2      	subs	r2, r2, r3
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	605a      	str	r2, [r3, #4]
		currTask = currTask->nextTask;
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	691b      	ldr	r3, [r3, #16]
 8000f02:	617b      	str	r3, [r7, #20]
	while(currTask != NULL && newTask->Delay >= currTask->Delay){
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d005      	beq.n	8000f16 <SCH_Add_Task+0x9a>
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	685a      	ldr	r2, [r3, #4]
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d2ec      	bcs.n	8000ef0 <SCH_Add_Task+0x74>
	}

	if(currTask == listTask.head){
 8000f16:	4b25      	ldr	r3, [pc, #148]	; (8000fac <SCH_Add_Task+0x130>)
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	697a      	ldr	r2, [r7, #20]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d114      	bne.n	8000f4a <SCH_Add_Task+0xce>
		newTask->nextTask = listTask.head;
 8000f20:	4b22      	ldr	r3, [pc, #136]	; (8000fac <SCH_Add_Task+0x130>)
 8000f22:	685a      	ldr	r2, [r3, #4]
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	611a      	str	r2, [r3, #16]
		listTask.head->preTask = newTask;
 8000f28:	4b20      	ldr	r3, [pc, #128]	; (8000fac <SCH_Add_Task+0x130>)
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	60da      	str	r2, [r3, #12]
		listTask.head->Delay = listTask.head->Delay - newTask->Delay;
 8000f30:	4b1e      	ldr	r3, [pc, #120]	; (8000fac <SCH_Add_Task+0x130>)
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	6859      	ldr	r1, [r3, #4]
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	685a      	ldr	r2, [r3, #4]
 8000f3a:	4b1c      	ldr	r3, [pc, #112]	; (8000fac <SCH_Add_Task+0x130>)
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	1a8a      	subs	r2, r1, r2
 8000f40:	605a      	str	r2, [r3, #4]
		listTask.head = newTask;
 8000f42:	4a1a      	ldr	r2, [pc, #104]	; (8000fac <SCH_Add_Task+0x130>)
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	6053      	str	r3, [r2, #4]
 8000f48:	e023      	b.n	8000f92 <SCH_Add_Task+0x116>
	}
	else if(currTask == NULL){
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d10b      	bne.n	8000f68 <SCH_Add_Task+0xec>
		newTask->preTask = listTask.tail;
 8000f50:	4b16      	ldr	r3, [pc, #88]	; (8000fac <SCH_Add_Task+0x130>)
 8000f52:	689a      	ldr	r2, [r3, #8]
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	60da      	str	r2, [r3, #12]
		listTask.tail->nextTask = newTask;
 8000f58:	4b14      	ldr	r3, [pc, #80]	; (8000fac <SCH_Add_Task+0x130>)
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	611a      	str	r2, [r3, #16]
		listTask.tail = newTask;
 8000f60:	4a12      	ldr	r2, [pc, #72]	; (8000fac <SCH_Add_Task+0x130>)
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	6093      	str	r3, [r2, #8]
 8000f66:	e014      	b.n	8000f92 <SCH_Add_Task+0x116>
	}
	else{
		newTask->nextTask = currTask;
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	697a      	ldr	r2, [r7, #20]
 8000f6c:	611a      	str	r2, [r3, #16]
		newTask->preTask = currTask->preTask;
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	68da      	ldr	r2, [r3, #12]
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	60da      	str	r2, [r3, #12]
		currTask->preTask->nextTask = newTask;
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	611a      	str	r2, [r3, #16]
		currTask->preTask = newTask;
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	60da      	str	r2, [r3, #12]
		currTask->Delay = currTask->Delay - newTask->Delay;
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	685a      	ldr	r2, [r3, #4]
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	1ad2      	subs	r2, r2, r3
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	605a      	str	r2, [r3, #4]
		}

	listTask.nTask++;
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <SCH_Add_Task+0x130>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	3301      	adds	r3, #1
 8000f98:	4a04      	ldr	r2, [pc, #16]	; (8000fac <SCH_Add_Task+0x130>)
 8000f9a:	6013      	str	r3, [r2, #0]
 8000f9c:	e000      	b.n	8000fa0 <SCH_Add_Task+0x124>
	if (newTask == NULL) return;
 8000f9e:	bf00      	nop
}
 8000fa0:	3718      	adds	r7, #24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	cccccccd 	.word	0xcccccccd
 8000fac:	200001fc 	.word	0x200001fc

08000fb0 <SCH_Update>:

void SCH_Update(void){
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
	if(listTask.head != NULL) listTask.head->Delay--;
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <SCH_Update+0x20>)
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d004      	beq.n	8000fc6 <SCH_Update+0x16>
 8000fbc:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <SCH_Update+0x20>)
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	685a      	ldr	r2, [r3, #4]
 8000fc2:	3a01      	subs	r2, #1
 8000fc4:	605a      	str	r2, [r3, #4]
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc80      	pop	{r7}
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	200001fc 	.word	0x200001fc

08000fd4 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
	if(listTask.head == NULL) return;
 8000fda:	4b22      	ldr	r3, [pc, #136]	; (8001064 <SCH_Dispatch_Tasks+0x90>)
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d03b      	beq.n	800105a <SCH_Dispatch_Tasks+0x86>

	if(listTask.head->Delay <= 0){
 8000fe2:	4b20      	ldr	r3, [pc, #128]	; (8001064 <SCH_Dispatch_Tasks+0x90>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d137      	bne.n	800105c <SCH_Dispatch_Tasks+0x88>
		listTask.head->pTask();
 8000fec:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <SCH_Dispatch_Tasks+0x90>)
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4798      	blx	r3
		sTask *removedTask = listTask.head;
 8000ff4:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <SCH_Dispatch_Tasks+0x90>)
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	607b      	str	r3, [r7, #4]
		listTask.head = listTask.head->nextTask;
 8000ffa:	4b1a      	ldr	r3, [pc, #104]	; (8001064 <SCH_Dispatch_Tasks+0x90>)
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	691b      	ldr	r3, [r3, #16]
 8001000:	4a18      	ldr	r2, [pc, #96]	; (8001064 <SCH_Dispatch_Tasks+0x90>)
 8001002:	6053      	str	r3, [r2, #4]

		if(listTask.head != NULL) listTask.head->preTask = NULL;
 8001004:	4b17      	ldr	r3, [pc, #92]	; (8001064 <SCH_Dispatch_Tasks+0x90>)
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d004      	beq.n	8001016 <SCH_Dispatch_Tasks+0x42>
 800100c:	4b15      	ldr	r3, [pc, #84]	; (8001064 <SCH_Dispatch_Tasks+0x90>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	60da      	str	r2, [r3, #12]
 8001014:	e002      	b.n	800101c <SCH_Dispatch_Tasks+0x48>
		else listTask.tail = NULL;
 8001016:	4b13      	ldr	r3, [pc, #76]	; (8001064 <SCH_Dispatch_Tasks+0x90>)
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]

		listTask.nTask--;
 800101c:	4b11      	ldr	r3, [pc, #68]	; (8001064 <SCH_Dispatch_Tasks+0x90>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	3b01      	subs	r3, #1
 8001022:	4a10      	ldr	r2, [pc, #64]	; (8001064 <SCH_Dispatch_Tasks+0x90>)
 8001024:	6013      	str	r3, [r2, #0]
		if(removedTask->Period > 0){
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d011      	beq.n	8001052 <SCH_Dispatch_Tasks+0x7e>
			SCH_Add_Task(removedTask->pTask, removedTask->Period * 10, removedTask->Period * 10);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6818      	ldr	r0, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	689a      	ldr	r2, [r3, #8]
 8001036:	4613      	mov	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4413      	add	r3, r2
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	4619      	mov	r1, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689a      	ldr	r2, [r3, #8]
 8001044:	4613      	mov	r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	4413      	add	r3, r2
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	461a      	mov	r2, r3
 800104e:	f7ff ff15 	bl	8000e7c <SCH_Add_Task>
		}

		free(removedTask);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f002 fca0 	bl	8003998 <free>
 8001058:	e000      	b.n	800105c <SCH_Dispatch_Tasks+0x88>
	if(listTask.head == NULL) return;
 800105a:	bf00      	nop
	}
}
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200001fc 	.word	0x200001fc

08001068 <SCH_Delete>:

void SCH_Delete(void (*pFunction)()){
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	if(listTask.head == NULL) return;
 8001070:	4b34      	ldr	r3, [pc, #208]	; (8001144 <SCH_Delete+0xdc>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d060      	beq.n	800113a <SCH_Delete+0xd2>

	sTask *currTask = listTask.head;
 8001078:	4b32      	ldr	r3, [pc, #200]	; (8001144 <SCH_Delete+0xdc>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	60fb      	str	r3, [r7, #12]
	while(currTask != NULL){
 800107e:	e058      	b.n	8001132 <SCH_Delete+0xca>
		if(currTask->pTask == pFunction){
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	429a      	cmp	r2, r3
 8001088:	d150      	bne.n	800112c <SCH_Delete+0xc4>
			sTask *removedTask = currTask;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	60bb      	str	r3, [r7, #8]
			currTask = currTask->nextTask;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	691b      	ldr	r3, [r3, #16]
 8001092:	60fb      	str	r3, [r7, #12]

			if(removedTask == listTask.head){
 8001094:	4b2b      	ldr	r3, [pc, #172]	; (8001144 <SCH_Delete+0xdc>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	68ba      	ldr	r2, [r7, #8]
 800109a:	429a      	cmp	r2, r3
 800109c:	d11a      	bne.n	80010d4 <SCH_Delete+0x6c>
				listTask.head = listTask.head->nextTask;
 800109e:	4b29      	ldr	r3, [pc, #164]	; (8001144 <SCH_Delete+0xdc>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	691b      	ldr	r3, [r3, #16]
 80010a4:	4a27      	ldr	r2, [pc, #156]	; (8001144 <SCH_Delete+0xdc>)
 80010a6:	6053      	str	r3, [r2, #4]
				if (listTask.head != NULL){
 80010a8:	4b26      	ldr	r3, [pc, #152]	; (8001144 <SCH_Delete+0xdc>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d00d      	beq.n	80010cc <SCH_Delete+0x64>
					listTask.head->preTask = NULL;
 80010b0:	4b24      	ldr	r3, [pc, #144]	; (8001144 <SCH_Delete+0xdc>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	60da      	str	r2, [r3, #12]
					listTask.head->Delay = listTask.head->Delay + removedTask->Delay;
 80010b8:	4b22      	ldr	r3, [pc, #136]	; (8001144 <SCH_Delete+0xdc>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	6859      	ldr	r1, [r3, #4]
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	685a      	ldr	r2, [r3, #4]
 80010c2:	4b20      	ldr	r3, [pc, #128]	; (8001144 <SCH_Delete+0xdc>)
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	440a      	add	r2, r1
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	e026      	b.n	800111a <SCH_Delete+0xb2>
				}
				else{
					listTask.tail = NULL;
 80010cc:	4b1d      	ldr	r3, [pc, #116]	; (8001144 <SCH_Delete+0xdc>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
 80010d2:	e022      	b.n	800111a <SCH_Delete+0xb2>
				}
			}
			else if(removedTask == listTask.tail){
 80010d4:	4b1b      	ldr	r3, [pc, #108]	; (8001144 <SCH_Delete+0xdc>)
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	68ba      	ldr	r2, [r7, #8]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d10a      	bne.n	80010f4 <SCH_Delete+0x8c>
				listTask.tail->preTask->nextTask = NULL;
 80010de:	4b19      	ldr	r3, [pc, #100]	; (8001144 <SCH_Delete+0xdc>)
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
				listTask.tail = listTask.tail->preTask;
 80010e8:	4b16      	ldr	r3, [pc, #88]	; (8001144 <SCH_Delete+0xdc>)
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	4a15      	ldr	r2, [pc, #84]	; (8001144 <SCH_Delete+0xdc>)
 80010f0:	6093      	str	r3, [r2, #8]
 80010f2:	e012      	b.n	800111a <SCH_Delete+0xb2>
			}
			else{
				removedTask->preTask->nextTask = removedTask->nextTask;
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	68ba      	ldr	r2, [r7, #8]
 80010fa:	6912      	ldr	r2, [r2, #16]
 80010fc:	611a      	str	r2, [r3, #16]
				removedTask->nextTask->preTask = removedTask->preTask;
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	691b      	ldr	r3, [r3, #16]
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	68d2      	ldr	r2, [r2, #12]
 8001106:	60da      	str	r2, [r3, #12]
				removedTask->nextTask->Delay = removedTask->Delay + removedTask->nextTask->Delay;
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	6859      	ldr	r1, [r3, #4]
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	691b      	ldr	r3, [r3, #16]
 8001110:	685a      	ldr	r2, [r3, #4]
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	691b      	ldr	r3, [r3, #16]
 8001116:	440a      	add	r2, r1
 8001118:	605a      	str	r2, [r3, #4]
			}

			free(removedTask);
 800111a:	68b8      	ldr	r0, [r7, #8]
 800111c:	f002 fc3c 	bl	8003998 <free>
			listTask.nTask--;
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <SCH_Delete+0xdc>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	3b01      	subs	r3, #1
 8001126:	4a07      	ldr	r2, [pc, #28]	; (8001144 <SCH_Delete+0xdc>)
 8001128:	6013      	str	r3, [r2, #0]
 800112a:	e002      	b.n	8001132 <SCH_Delete+0xca>
		}
		else currTask = currTask->nextTask;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	691b      	ldr	r3, [r3, #16]
 8001130:	60fb      	str	r3, [r7, #12]
	while(currTask != NULL){
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d1a3      	bne.n	8001080 <SCH_Delete+0x18>
 8001138:	e000      	b.n	800113c <SCH_Delete+0xd4>
	if(listTask.head == NULL) return;
 800113a:	bf00      	nop
	}
}
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	200001fc 	.word	0x200001fc

08001148 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <HAL_MspInit+0x5c>)
 8001150:	699b      	ldr	r3, [r3, #24]
 8001152:	4a14      	ldr	r2, [pc, #80]	; (80011a4 <HAL_MspInit+0x5c>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	6193      	str	r3, [r2, #24]
 800115a:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <HAL_MspInit+0x5c>)
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001166:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <HAL_MspInit+0x5c>)
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	4a0e      	ldr	r2, [pc, #56]	; (80011a4 <HAL_MspInit+0x5c>)
 800116c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001170:	61d3      	str	r3, [r2, #28]
 8001172:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <HAL_MspInit+0x5c>)
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800117e:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <HAL_MspInit+0x60>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	4a04      	ldr	r2, [pc, #16]	; (80011a8 <HAL_MspInit+0x60>)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800119a:	bf00      	nop
 800119c:	3714      	adds	r7, #20
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40010000 	.word	0x40010000

080011ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b088      	sub	sp, #32
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 0310 	add.w	r3, r7, #16
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a15      	ldr	r2, [pc, #84]	; (800121c <HAL_I2C_MspInit+0x70>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d123      	bne.n	8001214 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011cc:	4b14      	ldr	r3, [pc, #80]	; (8001220 <HAL_I2C_MspInit+0x74>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	4a13      	ldr	r2, [pc, #76]	; (8001220 <HAL_I2C_MspInit+0x74>)
 80011d2:	f043 0308 	orr.w	r3, r3, #8
 80011d6:	6193      	str	r3, [r2, #24]
 80011d8:	4b11      	ldr	r3, [pc, #68]	; (8001220 <HAL_I2C_MspInit+0x74>)
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	f003 0308 	and.w	r3, r3, #8
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011e4:	23c0      	movs	r3, #192	; 0xc0
 80011e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011e8:	2312      	movs	r3, #18
 80011ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011ec:	2303      	movs	r3, #3
 80011ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f0:	f107 0310 	add.w	r3, r7, #16
 80011f4:	4619      	mov	r1, r3
 80011f6:	480b      	ldr	r0, [pc, #44]	; (8001224 <HAL_I2C_MspInit+0x78>)
 80011f8:	f000 fc34 	bl	8001a64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011fc:	4b08      	ldr	r3, [pc, #32]	; (8001220 <HAL_I2C_MspInit+0x74>)
 80011fe:	69db      	ldr	r3, [r3, #28]
 8001200:	4a07      	ldr	r2, [pc, #28]	; (8001220 <HAL_I2C_MspInit+0x74>)
 8001202:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001206:	61d3      	str	r3, [r2, #28]
 8001208:	4b05      	ldr	r3, [pc, #20]	; (8001220 <HAL_I2C_MspInit+0x74>)
 800120a:	69db      	ldr	r3, [r3, #28]
 800120c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001214:	bf00      	nop
 8001216:	3720      	adds	r7, #32
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40005400 	.word	0x40005400
 8001220:	40021000 	.word	0x40021000
 8001224:	40010c00 	.word	0x40010c00

08001228 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001238:	d113      	bne.n	8001262 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800123a:	4b0c      	ldr	r3, [pc, #48]	; (800126c <HAL_TIM_Base_MspInit+0x44>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	4a0b      	ldr	r2, [pc, #44]	; (800126c <HAL_TIM_Base_MspInit+0x44>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	61d3      	str	r3, [r2, #28]
 8001246:	4b09      	ldr	r3, [pc, #36]	; (800126c <HAL_TIM_Base_MspInit+0x44>)
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	2100      	movs	r1, #0
 8001256:	201c      	movs	r0, #28
 8001258:	f000 fbcd 	bl	80019f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800125c:	201c      	movs	r0, #28
 800125e:	f000 fbe6 	bl	8001a2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001262:	bf00      	nop
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40021000 	.word	0x40021000

08001270 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b088      	sub	sp, #32
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001278:	f107 0310 	add.w	r3, r7, #16
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a15      	ldr	r2, [pc, #84]	; (80012e0 <HAL_UART_MspInit+0x70>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d123      	bne.n	80012d8 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001290:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <HAL_UART_MspInit+0x74>)
 8001292:	69db      	ldr	r3, [r3, #28]
 8001294:	4a13      	ldr	r2, [pc, #76]	; (80012e4 <HAL_UART_MspInit+0x74>)
 8001296:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800129a:	61d3      	str	r3, [r2, #28]
 800129c:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <HAL_UART_MspInit+0x74>)
 800129e:	69db      	ldr	r3, [r3, #28]
 80012a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a8:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <HAL_UART_MspInit+0x74>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	4a0d      	ldr	r2, [pc, #52]	; (80012e4 <HAL_UART_MspInit+0x74>)
 80012ae:	f043 0304 	orr.w	r3, r3, #4
 80012b2:	6193      	str	r3, [r2, #24]
 80012b4:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <HAL_UART_MspInit+0x74>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	f003 0304 	and.w	r3, r3, #4
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012c0:	230c      	movs	r3, #12
 80012c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c4:	2302      	movs	r3, #2
 80012c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c8:	2302      	movs	r3, #2
 80012ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012cc:	f107 0310 	add.w	r3, r7, #16
 80012d0:	4619      	mov	r1, r3
 80012d2:	4805      	ldr	r0, [pc, #20]	; (80012e8 <HAL_UART_MspInit+0x78>)
 80012d4:	f000 fbc6 	bl	8001a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012d8:	bf00      	nop
 80012da:	3720      	adds	r7, #32
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40004400 	.word	0x40004400
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40010800 	.word	0x40010800

080012ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <NMI_Handler+0x4>

080012f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f6:	e7fe      	b.n	80012f6 <HardFault_Handler+0x4>

080012f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012fc:	e7fe      	b.n	80012fc <MemManage_Handler+0x4>

080012fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001302:	e7fe      	b.n	8001302 <BusFault_Handler+0x4>

08001304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001308:	e7fe      	b.n	8001308 <UsageFault_Handler+0x4>

0800130a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr

08001316 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr

08001322 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr

0800132e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001332:	f000 fa49 	bl	80017c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
	...

0800133c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001340:	4802      	ldr	r0, [pc, #8]	; (800134c <TIM2_IRQHandler+0x10>)
 8001342:	f001 fec9 	bl	80030d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	2000016c 	.word	0x2000016c

08001350 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001354:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001358:	f000 fd50 	bl	8001dfc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}

08001360 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001368:	4a14      	ldr	r2, [pc, #80]	; (80013bc <_sbrk+0x5c>)
 800136a:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <_sbrk+0x60>)
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001374:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <_sbrk+0x64>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d102      	bne.n	8001382 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800137c:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <_sbrk+0x64>)
 800137e:	4a12      	ldr	r2, [pc, #72]	; (80013c8 <_sbrk+0x68>)
 8001380:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <_sbrk+0x64>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4413      	add	r3, r2
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	429a      	cmp	r2, r3
 800138e:	d207      	bcs.n	80013a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001390:	f002 fad0 	bl	8003934 <__errno>
 8001394:	4603      	mov	r3, r0
 8001396:	220c      	movs	r2, #12
 8001398:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800139a:	f04f 33ff 	mov.w	r3, #4294967295
 800139e:	e009      	b.n	80013b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <_sbrk+0x64>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013a6:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <_sbrk+0x64>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4413      	add	r3, r2
 80013ae:	4a05      	ldr	r2, [pc, #20]	; (80013c4 <_sbrk+0x64>)
 80013b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013b2:	68fb      	ldr	r3, [r7, #12]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3718      	adds	r7, #24
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20005000 	.word	0x20005000
 80013c0:	00000400 	.word	0x00000400
 80013c4:	200000fc 	.word	0x200000fc
 80013c8:	20000220 	.word	0x20000220

080013cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr

080013d8 <setInit>:
 */

#include "traffic_light.h"
#include "main.h"

void setInit(){
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 80013dc:	2200      	movs	r2, #0
 80013de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013e2:	4815      	ldr	r0, [pc, #84]	; (8001438 <setInit+0x60>)
 80013e4:	f000 fcd9 	bl	8001d9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 80013e8:	2200      	movs	r2, #0
 80013ea:	2108      	movs	r1, #8
 80013ec:	4813      	ldr	r0, [pc, #76]	; (800143c <setInit+0x64>)
 80013ee:	f000 fcd4 	bl	8001d9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2120      	movs	r1, #32
 80013f6:	4811      	ldr	r0, [pc, #68]	; (800143c <setInit+0x64>)
 80013f8:	f000 fccf 	bl	8001d9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 80013fc:	2200      	movs	r2, #0
 80013fe:	2110      	movs	r1, #16
 8001400:	480e      	ldr	r0, [pc, #56]	; (800143c <setInit+0x64>)
 8001402:	f000 fcca 	bl	8001d9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8001406:	2200      	movs	r2, #0
 8001408:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800140c:	480b      	ldr	r0, [pc, #44]	; (800143c <setInit+0x64>)
 800140e:	f000 fcc4 	bl	8001d9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8001412:	2200      	movs	r2, #0
 8001414:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001418:	4807      	ldr	r0, [pc, #28]	; (8001438 <setInit+0x60>)
 800141a:	f000 fcbe 	bl	8001d9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, RESET);
 800141e:	2200      	movs	r2, #0
 8001420:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001424:	4804      	ldr	r0, [pc, #16]	; (8001438 <setInit+0x60>)
 8001426:	f000 fcb8 	bl	8001d9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D9_GPIO_Port, D9_Pin, RESET);
 800142a:	2200      	movs	r2, #0
 800142c:	2180      	movs	r1, #128	; 0x80
 800142e:	4804      	ldr	r0, [pc, #16]	; (8001440 <setInit+0x68>)
 8001430:	f000 fcb3 	bl	8001d9a <HAL_GPIO_WritePin>
}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40010800 	.word	0x40010800
 800143c:	40010c00 	.word	0x40010c00
 8001440:	40011000 	.word	0x40011000

08001444 <setRed>:

void setRed(int i){
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
	if(i == 0){
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d114      	bne.n	800147c <setRed+0x38>
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8001452:	2201      	movs	r2, #1
 8001454:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001458:	4817      	ldr	r0, [pc, #92]	; (80014b8 <setRed+0x74>)
 800145a:	f000 fc9e 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 800145e:	2200      	movs	r2, #0
 8001460:	2108      	movs	r1, #8
 8001462:	4816      	ldr	r0, [pc, #88]	; (80014bc <setRed+0x78>)
 8001464:	f000 fc99 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8001468:	2201      	movs	r2, #1
 800146a:	2120      	movs	r1, #32
 800146c:	4813      	ldr	r0, [pc, #76]	; (80014bc <setRed+0x78>)
 800146e:	f000 fc94 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8001472:	2200      	movs	r2, #0
 8001474:	2110      	movs	r1, #16
 8001476:	4811      	ldr	r0, [pc, #68]	; (80014bc <setRed+0x78>)
 8001478:	f000 fc8f 	bl	8001d9a <HAL_GPIO_WritePin>
	}
	if(i == 1){
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d116      	bne.n	80014b0 <setRed+0x6c>
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 8001482:	2201      	movs	r2, #1
 8001484:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001488:	480c      	ldr	r0, [pc, #48]	; (80014bc <setRed+0x78>)
 800148a:	f000 fc86 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 800148e:	2200      	movs	r2, #0
 8001490:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001494:	4808      	ldr	r0, [pc, #32]	; (80014b8 <setRed+0x74>)
 8001496:	f000 fc80 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, SET);
 800149a:	2201      	movs	r2, #1
 800149c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014a0:	4805      	ldr	r0, [pc, #20]	; (80014b8 <setRed+0x74>)
 80014a2:	f000 fc7a 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D9_GPIO_Port, D9_Pin, RESET);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2180      	movs	r1, #128	; 0x80
 80014aa:	4805      	ldr	r0, [pc, #20]	; (80014c0 <setRed+0x7c>)
 80014ac:	f000 fc75 	bl	8001d9a <HAL_GPIO_WritePin>
	}
}
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40010800 	.word	0x40010800
 80014bc:	40010c00 	.word	0x40010c00
 80014c0:	40011000 	.word	0x40011000

080014c4 <setGreen>:

void setGreen(int i){
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	if(i == 0){
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d114      	bne.n	80014fc <setGreen+0x38>
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 80014d2:	2200      	movs	r2, #0
 80014d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014d8:	4817      	ldr	r0, [pc, #92]	; (8001538 <setGreen+0x74>)
 80014da:	f000 fc5e 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 80014de:	2201      	movs	r2, #1
 80014e0:	2108      	movs	r1, #8
 80014e2:	4816      	ldr	r0, [pc, #88]	; (800153c <setGreen+0x78>)
 80014e4:	f000 fc59 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 80014e8:	2200      	movs	r2, #0
 80014ea:	2120      	movs	r1, #32
 80014ec:	4813      	ldr	r0, [pc, #76]	; (800153c <setGreen+0x78>)
 80014ee:	f000 fc54 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 80014f2:	2201      	movs	r2, #1
 80014f4:	2110      	movs	r1, #16
 80014f6:	4811      	ldr	r0, [pc, #68]	; (800153c <setGreen+0x78>)
 80014f8:	f000 fc4f 	bl	8001d9a <HAL_GPIO_WritePin>
	}
	if(i == 1){
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d116      	bne.n	8001530 <setGreen+0x6c>
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8001502:	2200      	movs	r2, #0
 8001504:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001508:	480c      	ldr	r0, [pc, #48]	; (800153c <setGreen+0x78>)
 800150a:	f000 fc46 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 800150e:	2201      	movs	r2, #1
 8001510:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001514:	4808      	ldr	r0, [pc, #32]	; (8001538 <setGreen+0x74>)
 8001516:	f000 fc40 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, RESET);
 800151a:	2200      	movs	r2, #0
 800151c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001520:	4805      	ldr	r0, [pc, #20]	; (8001538 <setGreen+0x74>)
 8001522:	f000 fc3a 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D9_GPIO_Port, D9_Pin, SET);
 8001526:	2201      	movs	r2, #1
 8001528:	2180      	movs	r1, #128	; 0x80
 800152a:	4805      	ldr	r0, [pc, #20]	; (8001540 <setGreen+0x7c>)
 800152c:	f000 fc35 	bl	8001d9a <HAL_GPIO_WritePin>
	}
}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40010800 	.word	0x40010800
 800153c:	40010c00 	.word	0x40010c00
 8001540:	40011000 	.word	0x40011000

08001544 <setYellow>:

void setYellow(int i){
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
	if(i == 0){
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d114      	bne.n	800157c <setYellow+0x38>
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8001552:	2201      	movs	r2, #1
 8001554:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001558:	4817      	ldr	r0, [pc, #92]	; (80015b8 <setYellow+0x74>)
 800155a:	f000 fc1e 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 800155e:	2201      	movs	r2, #1
 8001560:	2108      	movs	r1, #8
 8001562:	4816      	ldr	r0, [pc, #88]	; (80015bc <setYellow+0x78>)
 8001564:	f000 fc19 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8001568:	2201      	movs	r2, #1
 800156a:	2120      	movs	r1, #32
 800156c:	4813      	ldr	r0, [pc, #76]	; (80015bc <setYellow+0x78>)
 800156e:	f000 fc14 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8001572:	2201      	movs	r2, #1
 8001574:	2110      	movs	r1, #16
 8001576:	4811      	ldr	r0, [pc, #68]	; (80015bc <setYellow+0x78>)
 8001578:	f000 fc0f 	bl	8001d9a <HAL_GPIO_WritePin>
	}
	if(i == 1){
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d116      	bne.n	80015b0 <setYellow+0x6c>
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 8001582:	2201      	movs	r2, #1
 8001584:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001588:	480c      	ldr	r0, [pc, #48]	; (80015bc <setYellow+0x78>)
 800158a:	f000 fc06 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 800158e:	2201      	movs	r2, #1
 8001590:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001594:	4808      	ldr	r0, [pc, #32]	; (80015b8 <setYellow+0x74>)
 8001596:	f000 fc00 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, SET);
 800159a:	2201      	movs	r2, #1
 800159c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015a0:	4805      	ldr	r0, [pc, #20]	; (80015b8 <setYellow+0x74>)
 80015a2:	f000 fbfa 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D9_GPIO_Port, D9_Pin, SET);
 80015a6:	2201      	movs	r2, #1
 80015a8:	2180      	movs	r1, #128	; 0x80
 80015aa:	4805      	ldr	r0, [pc, #20]	; (80015c0 <setYellow+0x7c>)
 80015ac:	f000 fbf5 	bl	8001d9a <HAL_GPIO_WritePin>
	}
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40010800 	.word	0x40010800
 80015bc:	40010c00 	.word	0x40010c00
 80015c0:	40011000 	.word	0x40011000

080015c4 <blinkRed>:

void blinkRed(){
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 80015c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015cc:	4813      	ldr	r0, [pc, #76]	; (800161c <blinkRed+0x58>)
 80015ce:	f000 fbfc 	bl	8001dca <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2108      	movs	r1, #8
 80015d6:	4812      	ldr	r0, [pc, #72]	; (8001620 <blinkRed+0x5c>)
 80015d8:	f000 fbdf 	bl	8001d9a <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 80015dc:	2120      	movs	r1, #32
 80015de:	4810      	ldr	r0, [pc, #64]	; (8001620 <blinkRed+0x5c>)
 80015e0:	f000 fbf3 	bl	8001dca <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 80015e4:	2200      	movs	r2, #0
 80015e6:	2110      	movs	r1, #16
 80015e8:	480d      	ldr	r0, [pc, #52]	; (8001620 <blinkRed+0x5c>)
 80015ea:	f000 fbd6 	bl	8001d9a <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(D6_GPIO_Port, D6_Pin);
 80015ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015f2:	480b      	ldr	r0, [pc, #44]	; (8001620 <blinkRed+0x5c>)
 80015f4:	f000 fbe9 	bl	8001dca <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 80015f8:	2200      	movs	r2, #0
 80015fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015fe:	4807      	ldr	r0, [pc, #28]	; (800161c <blinkRed+0x58>)
 8001600:	f000 fbcb 	bl	8001d9a <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(D8_GPIO_Port, D8_Pin);
 8001604:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001608:	4804      	ldr	r0, [pc, #16]	; (800161c <blinkRed+0x58>)
 800160a:	f000 fbde 	bl	8001dca <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D9_GPIO_Port, D9_Pin, RESET);
 800160e:	2200      	movs	r2, #0
 8001610:	2180      	movs	r1, #128	; 0x80
 8001612:	4804      	ldr	r0, [pc, #16]	; (8001624 <blinkRed+0x60>)
 8001614:	f000 fbc1 	bl	8001d9a <HAL_GPIO_WritePin>
}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40010800 	.word	0x40010800
 8001620:	40010c00 	.word	0x40010c00
 8001624:	40011000 	.word	0x40011000

08001628 <blinkYellow>:

void blinkYellow(){
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 800162c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001630:	4811      	ldr	r0, [pc, #68]	; (8001678 <blinkYellow+0x50>)
 8001632:	f000 fbca 	bl	8001dca <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 8001636:	2108      	movs	r1, #8
 8001638:	4810      	ldr	r0, [pc, #64]	; (800167c <blinkYellow+0x54>)
 800163a:	f000 fbc6 	bl	8001dca <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 800163e:	2120      	movs	r1, #32
 8001640:	480e      	ldr	r0, [pc, #56]	; (800167c <blinkYellow+0x54>)
 8001642:	f000 fbc2 	bl	8001dca <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 8001646:	2110      	movs	r1, #16
 8001648:	480c      	ldr	r0, [pc, #48]	; (800167c <blinkYellow+0x54>)
 800164a:	f000 fbbe 	bl	8001dca <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D6_GPIO_Port, D6_Pin);
 800164e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001652:	480a      	ldr	r0, [pc, #40]	; (800167c <blinkYellow+0x54>)
 8001654:	f000 fbb9 	bl	8001dca <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D7_GPIO_Port, D7_Pin);
 8001658:	f44f 7180 	mov.w	r1, #256	; 0x100
 800165c:	4806      	ldr	r0, [pc, #24]	; (8001678 <blinkYellow+0x50>)
 800165e:	f000 fbb4 	bl	8001dca <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D8_GPIO_Port, D8_Pin);
 8001662:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001666:	4804      	ldr	r0, [pc, #16]	; (8001678 <blinkYellow+0x50>)
 8001668:	f000 fbaf 	bl	8001dca <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D9_GPIO_Port, D9_Pin);
 800166c:	2180      	movs	r1, #128	; 0x80
 800166e:	4804      	ldr	r0, [pc, #16]	; (8001680 <blinkYellow+0x58>)
 8001670:	f000 fbab 	bl	8001dca <HAL_GPIO_TogglePin>
}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40010800 	.word	0x40010800
 800167c:	40010c00 	.word	0x40010c00
 8001680:	40011000 	.word	0x40011000

08001684 <blinkGreen>:

void blinkGreen(int index){
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 800168c:	2200      	movs	r2, #0
 800168e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001692:	4814      	ldr	r0, [pc, #80]	; (80016e4 <blinkGreen+0x60>)
 8001694:	f000 fb81 	bl	8001d9a <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 8001698:	2108      	movs	r1, #8
 800169a:	4813      	ldr	r0, [pc, #76]	; (80016e8 <blinkGreen+0x64>)
 800169c:	f000 fb95 	bl	8001dca <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 80016a0:	2200      	movs	r2, #0
 80016a2:	2120      	movs	r1, #32
 80016a4:	4810      	ldr	r0, [pc, #64]	; (80016e8 <blinkGreen+0x64>)
 80016a6:	f000 fb78 	bl	8001d9a <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 80016aa:	2110      	movs	r1, #16
 80016ac:	480e      	ldr	r0, [pc, #56]	; (80016e8 <blinkGreen+0x64>)
 80016ae:	f000 fb8c 	bl	8001dca <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 80016b2:	2200      	movs	r2, #0
 80016b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016b8:	480b      	ldr	r0, [pc, #44]	; (80016e8 <blinkGreen+0x64>)
 80016ba:	f000 fb6e 	bl	8001d9a <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(D7_GPIO_Port, D7_Pin);
 80016be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016c2:	4808      	ldr	r0, [pc, #32]	; (80016e4 <blinkGreen+0x60>)
 80016c4:	f000 fb81 	bl	8001dca <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, RESET);
 80016c8:	2200      	movs	r2, #0
 80016ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016ce:	4805      	ldr	r0, [pc, #20]	; (80016e4 <blinkGreen+0x60>)
 80016d0:	f000 fb63 	bl	8001d9a <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(D9_GPIO_Port, D9_Pin);
 80016d4:	2180      	movs	r1, #128	; 0x80
 80016d6:	4805      	ldr	r0, [pc, #20]	; (80016ec <blinkGreen+0x68>)
 80016d8:	f000 fb77 	bl	8001dca <HAL_GPIO_TogglePin>
}
 80016dc:	bf00      	nop
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40010800 	.word	0x40010800
 80016e8:	40010c00 	.word	0x40010c00
 80016ec:	40011000 	.word	0x40011000

080016f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016f0:	f7ff fe6c 	bl	80013cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016f4:	480b      	ldr	r0, [pc, #44]	; (8001724 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80016f6:	490c      	ldr	r1, [pc, #48]	; (8001728 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80016f8:	4a0c      	ldr	r2, [pc, #48]	; (800172c <LoopFillZerobss+0x16>)
  movs r3, #0
 80016fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016fc:	e002      	b.n	8001704 <LoopCopyDataInit>

080016fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001700:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001702:	3304      	adds	r3, #4

08001704 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001704:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001706:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001708:	d3f9      	bcc.n	80016fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800170a:	4a09      	ldr	r2, [pc, #36]	; (8001730 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800170c:	4c09      	ldr	r4, [pc, #36]	; (8001734 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800170e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001710:	e001      	b.n	8001716 <LoopFillZerobss>

08001712 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001712:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001714:	3204      	adds	r2, #4

08001716 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001716:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001718:	d3fb      	bcc.n	8001712 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800171a:	f002 f911 	bl	8003940 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800171e:	f7ff f9af 	bl	8000a80 <main>
  bx lr
 8001722:	4770      	bx	lr
  ldr r0, =_sdata
 8001724:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001728:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 800172c:	080042b0 	.word	0x080042b0
  ldr r2, =_sbss
 8001730:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 8001734:	2000021c 	.word	0x2000021c

08001738 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001738:	e7fe      	b.n	8001738 <ADC1_2_IRQHandler>
	...

0800173c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <HAL_Init+0x28>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a07      	ldr	r2, [pc, #28]	; (8001764 <HAL_Init+0x28>)
 8001746:	f043 0310 	orr.w	r3, r3, #16
 800174a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800174c:	2003      	movs	r0, #3
 800174e:	f000 f947 	bl	80019e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001752:	2000      	movs	r0, #0
 8001754:	f000 f808 	bl	8001768 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001758:	f7ff fcf6 	bl	8001148 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40022000 	.word	0x40022000

08001768 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001770:	4b12      	ldr	r3, [pc, #72]	; (80017bc <HAL_InitTick+0x54>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <HAL_InitTick+0x58>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	4619      	mov	r1, r3
 800177a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800177e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001782:	fbb2 f3f3 	udiv	r3, r2, r3
 8001786:	4618      	mov	r0, r3
 8001788:	f000 f95f 	bl	8001a4a <HAL_SYSTICK_Config>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e00e      	b.n	80017b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b0f      	cmp	r3, #15
 800179a:	d80a      	bhi.n	80017b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800179c:	2200      	movs	r2, #0
 800179e:	6879      	ldr	r1, [r7, #4]
 80017a0:	f04f 30ff 	mov.w	r0, #4294967295
 80017a4:	f000 f927 	bl	80019f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017a8:	4a06      	ldr	r2, [pc, #24]	; (80017c4 <HAL_InitTick+0x5c>)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ae:	2300      	movs	r3, #0
 80017b0:	e000      	b.n	80017b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20000054 	.word	0x20000054
 80017c0:	2000005c 	.word	0x2000005c
 80017c4:	20000058 	.word	0x20000058

080017c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017cc:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <HAL_IncTick+0x1c>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	461a      	mov	r2, r3
 80017d2:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <HAL_IncTick+0x20>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4413      	add	r3, r2
 80017d8:	4a03      	ldr	r2, [pc, #12]	; (80017e8 <HAL_IncTick+0x20>)
 80017da:	6013      	str	r3, [r2, #0]
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr
 80017e4:	2000005c 	.word	0x2000005c
 80017e8:	20000208 	.word	0x20000208

080017ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return uwTick;
 80017f0:	4b02      	ldr	r3, [pc, #8]	; (80017fc <HAL_GetTick+0x10>)
 80017f2:	681b      	ldr	r3, [r3, #0]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr
 80017fc:	20000208 	.word	0x20000208

08001800 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001808:	f7ff fff0 	bl	80017ec <HAL_GetTick>
 800180c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001818:	d005      	beq.n	8001826 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800181a:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <HAL_Delay+0x44>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	461a      	mov	r2, r3
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	4413      	add	r3, r2
 8001824:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001826:	bf00      	nop
 8001828:	f7ff ffe0 	bl	80017ec <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	429a      	cmp	r2, r3
 8001836:	d8f7      	bhi.n	8001828 <HAL_Delay+0x28>
  {
  }
}
 8001838:	bf00      	nop
 800183a:	bf00      	nop
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	2000005c 	.word	0x2000005c

08001848 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001858:	4b0c      	ldr	r3, [pc, #48]	; (800188c <__NVIC_SetPriorityGrouping+0x44>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800185e:	68ba      	ldr	r2, [r7, #8]
 8001860:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001864:	4013      	ands	r3, r2
 8001866:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001870:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001878:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800187a:	4a04      	ldr	r2, [pc, #16]	; (800188c <__NVIC_SetPriorityGrouping+0x44>)
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	60d3      	str	r3, [r2, #12]
}
 8001880:	bf00      	nop
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001894:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	0a1b      	lsrs	r3, r3, #8
 800189a:	f003 0307 	and.w	r3, r3, #7
}
 800189e:	4618      	mov	r0, r3
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc80      	pop	{r7}
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	db0b      	blt.n	80018d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	f003 021f 	and.w	r2, r3, #31
 80018c4:	4906      	ldr	r1, [pc, #24]	; (80018e0 <__NVIC_EnableIRQ+0x34>)
 80018c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ca:	095b      	lsrs	r3, r3, #5
 80018cc:	2001      	movs	r0, #1
 80018ce:	fa00 f202 	lsl.w	r2, r0, r2
 80018d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr
 80018e0:	e000e100 	.word	0xe000e100

080018e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	6039      	str	r1, [r7, #0]
 80018ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	db0a      	blt.n	800190e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	490c      	ldr	r1, [pc, #48]	; (8001930 <__NVIC_SetPriority+0x4c>)
 80018fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001902:	0112      	lsls	r2, r2, #4
 8001904:	b2d2      	uxtb	r2, r2
 8001906:	440b      	add	r3, r1
 8001908:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800190c:	e00a      	b.n	8001924 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	b2da      	uxtb	r2, r3
 8001912:	4908      	ldr	r1, [pc, #32]	; (8001934 <__NVIC_SetPriority+0x50>)
 8001914:	79fb      	ldrb	r3, [r7, #7]
 8001916:	f003 030f 	and.w	r3, r3, #15
 800191a:	3b04      	subs	r3, #4
 800191c:	0112      	lsls	r2, r2, #4
 800191e:	b2d2      	uxtb	r2, r2
 8001920:	440b      	add	r3, r1
 8001922:	761a      	strb	r2, [r3, #24]
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	e000e100 	.word	0xe000e100
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001938:	b480      	push	{r7}
 800193a:	b089      	sub	sp, #36	; 0x24
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	f1c3 0307 	rsb	r3, r3, #7
 8001952:	2b04      	cmp	r3, #4
 8001954:	bf28      	it	cs
 8001956:	2304      	movcs	r3, #4
 8001958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	3304      	adds	r3, #4
 800195e:	2b06      	cmp	r3, #6
 8001960:	d902      	bls.n	8001968 <NVIC_EncodePriority+0x30>
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	3b03      	subs	r3, #3
 8001966:	e000      	b.n	800196a <NVIC_EncodePriority+0x32>
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800196c:	f04f 32ff 	mov.w	r2, #4294967295
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43da      	mvns	r2, r3
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	401a      	ands	r2, r3
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001980:	f04f 31ff 	mov.w	r1, #4294967295
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	fa01 f303 	lsl.w	r3, r1, r3
 800198a:	43d9      	mvns	r1, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001990:	4313      	orrs	r3, r2
         );
}
 8001992:	4618      	mov	r0, r3
 8001994:	3724      	adds	r7, #36	; 0x24
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr

0800199c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3b01      	subs	r3, #1
 80019a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019ac:	d301      	bcc.n	80019b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ae:	2301      	movs	r3, #1
 80019b0:	e00f      	b.n	80019d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019b2:	4a0a      	ldr	r2, [pc, #40]	; (80019dc <SysTick_Config+0x40>)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ba:	210f      	movs	r1, #15
 80019bc:	f04f 30ff 	mov.w	r0, #4294967295
 80019c0:	f7ff ff90 	bl	80018e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019c4:	4b05      	ldr	r3, [pc, #20]	; (80019dc <SysTick_Config+0x40>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ca:	4b04      	ldr	r3, [pc, #16]	; (80019dc <SysTick_Config+0x40>)
 80019cc:	2207      	movs	r2, #7
 80019ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	e000e010 	.word	0xe000e010

080019e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f7ff ff2d 	bl	8001848 <__NVIC_SetPriorityGrouping>
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b086      	sub	sp, #24
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	4603      	mov	r3, r0
 80019fe:	60b9      	str	r1, [r7, #8]
 8001a00:	607a      	str	r2, [r7, #4]
 8001a02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a08:	f7ff ff42 	bl	8001890 <__NVIC_GetPriorityGrouping>
 8001a0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	68b9      	ldr	r1, [r7, #8]
 8001a12:	6978      	ldr	r0, [r7, #20]
 8001a14:	f7ff ff90 	bl	8001938 <NVIC_EncodePriority>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a1e:	4611      	mov	r1, r2
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff ff5f 	bl	80018e4 <__NVIC_SetPriority>
}
 8001a26:	bf00      	nop
 8001a28:	3718      	adds	r7, #24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b082      	sub	sp, #8
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	4603      	mov	r3, r0
 8001a36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff ff35 	bl	80018ac <__NVIC_EnableIRQ>
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7ff ffa2 	bl	800199c <SysTick_Config>
 8001a58:	4603      	mov	r3, r0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
	...

08001a64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b08b      	sub	sp, #44	; 0x2c
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a72:	2300      	movs	r3, #0
 8001a74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a76:	e169      	b.n	8001d4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a78:	2201      	movs	r2, #1
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	69fa      	ldr	r2, [r7, #28]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	f040 8158 	bne.w	8001d46 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	4a9a      	ldr	r2, [pc, #616]	; (8001d04 <HAL_GPIO_Init+0x2a0>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d05e      	beq.n	8001b5e <HAL_GPIO_Init+0xfa>
 8001aa0:	4a98      	ldr	r2, [pc, #608]	; (8001d04 <HAL_GPIO_Init+0x2a0>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d875      	bhi.n	8001b92 <HAL_GPIO_Init+0x12e>
 8001aa6:	4a98      	ldr	r2, [pc, #608]	; (8001d08 <HAL_GPIO_Init+0x2a4>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d058      	beq.n	8001b5e <HAL_GPIO_Init+0xfa>
 8001aac:	4a96      	ldr	r2, [pc, #600]	; (8001d08 <HAL_GPIO_Init+0x2a4>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d86f      	bhi.n	8001b92 <HAL_GPIO_Init+0x12e>
 8001ab2:	4a96      	ldr	r2, [pc, #600]	; (8001d0c <HAL_GPIO_Init+0x2a8>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d052      	beq.n	8001b5e <HAL_GPIO_Init+0xfa>
 8001ab8:	4a94      	ldr	r2, [pc, #592]	; (8001d0c <HAL_GPIO_Init+0x2a8>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d869      	bhi.n	8001b92 <HAL_GPIO_Init+0x12e>
 8001abe:	4a94      	ldr	r2, [pc, #592]	; (8001d10 <HAL_GPIO_Init+0x2ac>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d04c      	beq.n	8001b5e <HAL_GPIO_Init+0xfa>
 8001ac4:	4a92      	ldr	r2, [pc, #584]	; (8001d10 <HAL_GPIO_Init+0x2ac>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d863      	bhi.n	8001b92 <HAL_GPIO_Init+0x12e>
 8001aca:	4a92      	ldr	r2, [pc, #584]	; (8001d14 <HAL_GPIO_Init+0x2b0>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d046      	beq.n	8001b5e <HAL_GPIO_Init+0xfa>
 8001ad0:	4a90      	ldr	r2, [pc, #576]	; (8001d14 <HAL_GPIO_Init+0x2b0>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d85d      	bhi.n	8001b92 <HAL_GPIO_Init+0x12e>
 8001ad6:	2b12      	cmp	r3, #18
 8001ad8:	d82a      	bhi.n	8001b30 <HAL_GPIO_Init+0xcc>
 8001ada:	2b12      	cmp	r3, #18
 8001adc:	d859      	bhi.n	8001b92 <HAL_GPIO_Init+0x12e>
 8001ade:	a201      	add	r2, pc, #4	; (adr r2, 8001ae4 <HAL_GPIO_Init+0x80>)
 8001ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ae4:	08001b5f 	.word	0x08001b5f
 8001ae8:	08001b39 	.word	0x08001b39
 8001aec:	08001b4b 	.word	0x08001b4b
 8001af0:	08001b8d 	.word	0x08001b8d
 8001af4:	08001b93 	.word	0x08001b93
 8001af8:	08001b93 	.word	0x08001b93
 8001afc:	08001b93 	.word	0x08001b93
 8001b00:	08001b93 	.word	0x08001b93
 8001b04:	08001b93 	.word	0x08001b93
 8001b08:	08001b93 	.word	0x08001b93
 8001b0c:	08001b93 	.word	0x08001b93
 8001b10:	08001b93 	.word	0x08001b93
 8001b14:	08001b93 	.word	0x08001b93
 8001b18:	08001b93 	.word	0x08001b93
 8001b1c:	08001b93 	.word	0x08001b93
 8001b20:	08001b93 	.word	0x08001b93
 8001b24:	08001b93 	.word	0x08001b93
 8001b28:	08001b41 	.word	0x08001b41
 8001b2c:	08001b55 	.word	0x08001b55
 8001b30:	4a79      	ldr	r2, [pc, #484]	; (8001d18 <HAL_GPIO_Init+0x2b4>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d013      	beq.n	8001b5e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b36:	e02c      	b.n	8001b92 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	623b      	str	r3, [r7, #32]
          break;
 8001b3e:	e029      	b.n	8001b94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	3304      	adds	r3, #4
 8001b46:	623b      	str	r3, [r7, #32]
          break;
 8001b48:	e024      	b.n	8001b94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	3308      	adds	r3, #8
 8001b50:	623b      	str	r3, [r7, #32]
          break;
 8001b52:	e01f      	b.n	8001b94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	330c      	adds	r3, #12
 8001b5a:	623b      	str	r3, [r7, #32]
          break;
 8001b5c:	e01a      	b.n	8001b94 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d102      	bne.n	8001b6c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b66:	2304      	movs	r3, #4
 8001b68:	623b      	str	r3, [r7, #32]
          break;
 8001b6a:	e013      	b.n	8001b94 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d105      	bne.n	8001b80 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b74:	2308      	movs	r3, #8
 8001b76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	69fa      	ldr	r2, [r7, #28]
 8001b7c:	611a      	str	r2, [r3, #16]
          break;
 8001b7e:	e009      	b.n	8001b94 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b80:	2308      	movs	r3, #8
 8001b82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	69fa      	ldr	r2, [r7, #28]
 8001b88:	615a      	str	r2, [r3, #20]
          break;
 8001b8a:	e003      	b.n	8001b94 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	623b      	str	r3, [r7, #32]
          break;
 8001b90:	e000      	b.n	8001b94 <HAL_GPIO_Init+0x130>
          break;
 8001b92:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	2bff      	cmp	r3, #255	; 0xff
 8001b98:	d801      	bhi.n	8001b9e <HAL_GPIO_Init+0x13a>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	e001      	b.n	8001ba2 <HAL_GPIO_Init+0x13e>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	2bff      	cmp	r3, #255	; 0xff
 8001ba8:	d802      	bhi.n	8001bb0 <HAL_GPIO_Init+0x14c>
 8001baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	e002      	b.n	8001bb6 <HAL_GPIO_Init+0x152>
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb2:	3b08      	subs	r3, #8
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	210f      	movs	r1, #15
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	401a      	ands	r2, r3
 8001bc8:	6a39      	ldr	r1, [r7, #32]
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd0:	431a      	orrs	r2, r3
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 80b1 	beq.w	8001d46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001be4:	4b4d      	ldr	r3, [pc, #308]	; (8001d1c <HAL_GPIO_Init+0x2b8>)
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	4a4c      	ldr	r2, [pc, #304]	; (8001d1c <HAL_GPIO_Init+0x2b8>)
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	6193      	str	r3, [r2, #24]
 8001bf0:	4b4a      	ldr	r3, [pc, #296]	; (8001d1c <HAL_GPIO_Init+0x2b8>)
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bfc:	4a48      	ldr	r2, [pc, #288]	; (8001d20 <HAL_GPIO_Init+0x2bc>)
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c00:	089b      	lsrs	r3, r3, #2
 8001c02:	3302      	adds	r3, #2
 8001c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c08:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	f003 0303 	and.w	r3, r3, #3
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	220f      	movs	r2, #15
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4a40      	ldr	r2, [pc, #256]	; (8001d24 <HAL_GPIO_Init+0x2c0>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d013      	beq.n	8001c50 <HAL_GPIO_Init+0x1ec>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a3f      	ldr	r2, [pc, #252]	; (8001d28 <HAL_GPIO_Init+0x2c4>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d00d      	beq.n	8001c4c <HAL_GPIO_Init+0x1e8>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a3e      	ldr	r2, [pc, #248]	; (8001d2c <HAL_GPIO_Init+0x2c8>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d007      	beq.n	8001c48 <HAL_GPIO_Init+0x1e4>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a3d      	ldr	r2, [pc, #244]	; (8001d30 <HAL_GPIO_Init+0x2cc>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d101      	bne.n	8001c44 <HAL_GPIO_Init+0x1e0>
 8001c40:	2303      	movs	r3, #3
 8001c42:	e006      	b.n	8001c52 <HAL_GPIO_Init+0x1ee>
 8001c44:	2304      	movs	r3, #4
 8001c46:	e004      	b.n	8001c52 <HAL_GPIO_Init+0x1ee>
 8001c48:	2302      	movs	r3, #2
 8001c4a:	e002      	b.n	8001c52 <HAL_GPIO_Init+0x1ee>
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e000      	b.n	8001c52 <HAL_GPIO_Init+0x1ee>
 8001c50:	2300      	movs	r3, #0
 8001c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c54:	f002 0203 	and.w	r2, r2, #3
 8001c58:	0092      	lsls	r2, r2, #2
 8001c5a:	4093      	lsls	r3, r2
 8001c5c:	68fa      	ldr	r2, [r7, #12]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c62:	492f      	ldr	r1, [pc, #188]	; (8001d20 <HAL_GPIO_Init+0x2bc>)
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	089b      	lsrs	r3, r3, #2
 8001c68:	3302      	adds	r3, #2
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d006      	beq.n	8001c8a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c7c:	4b2d      	ldr	r3, [pc, #180]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	492c      	ldr	r1, [pc, #176]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	608b      	str	r3, [r1, #8]
 8001c88:	e006      	b.n	8001c98 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c8a:	4b2a      	ldr	r3, [pc, #168]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001c8c:	689a      	ldr	r2, [r3, #8]
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	43db      	mvns	r3, r3
 8001c92:	4928      	ldr	r1, [pc, #160]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001c94:	4013      	ands	r3, r2
 8001c96:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d006      	beq.n	8001cb2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ca4:	4b23      	ldr	r3, [pc, #140]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001ca6:	68da      	ldr	r2, [r3, #12]
 8001ca8:	4922      	ldr	r1, [pc, #136]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	60cb      	str	r3, [r1, #12]
 8001cb0:	e006      	b.n	8001cc0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cb2:	4b20      	ldr	r3, [pc, #128]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001cb4:	68da      	ldr	r2, [r3, #12]
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	491e      	ldr	r1, [pc, #120]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d006      	beq.n	8001cda <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ccc:	4b19      	ldr	r3, [pc, #100]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001cce:	685a      	ldr	r2, [r3, #4]
 8001cd0:	4918      	ldr	r1, [pc, #96]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	604b      	str	r3, [r1, #4]
 8001cd8:	e006      	b.n	8001ce8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cda:	4b16      	ldr	r3, [pc, #88]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001cdc:	685a      	ldr	r2, [r3, #4]
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	4914      	ldr	r1, [pc, #80]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d021      	beq.n	8001d38 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cf4:	4b0f      	ldr	r3, [pc, #60]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	490e      	ldr	r1, [pc, #56]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	600b      	str	r3, [r1, #0]
 8001d00:	e021      	b.n	8001d46 <HAL_GPIO_Init+0x2e2>
 8001d02:	bf00      	nop
 8001d04:	10320000 	.word	0x10320000
 8001d08:	10310000 	.word	0x10310000
 8001d0c:	10220000 	.word	0x10220000
 8001d10:	10210000 	.word	0x10210000
 8001d14:	10120000 	.word	0x10120000
 8001d18:	10110000 	.word	0x10110000
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	40010000 	.word	0x40010000
 8001d24:	40010800 	.word	0x40010800
 8001d28:	40010c00 	.word	0x40010c00
 8001d2c:	40011000 	.word	0x40011000
 8001d30:	40011400 	.word	0x40011400
 8001d34:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d38:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <HAL_GPIO_Init+0x304>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	4909      	ldr	r1, [pc, #36]	; (8001d68 <HAL_GPIO_Init+0x304>)
 8001d42:	4013      	ands	r3, r2
 8001d44:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	3301      	adds	r3, #1
 8001d4a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d52:	fa22 f303 	lsr.w	r3, r2, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f47f ae8e 	bne.w	8001a78 <HAL_GPIO_Init+0x14>
  }
}
 8001d5c:	bf00      	nop
 8001d5e:	bf00      	nop
 8001d60:	372c      	adds	r7, #44	; 0x2c
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr
 8001d68:	40010400 	.word	0x40010400

08001d6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	887b      	ldrh	r3, [r7, #2]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d002      	beq.n	8001d8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d84:	2301      	movs	r3, #1
 8001d86:	73fb      	strb	r3, [r7, #15]
 8001d88:	e001      	b.n	8001d8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3714      	adds	r7, #20
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bc80      	pop	{r7}
 8001d98:	4770      	bx	lr

08001d9a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	460b      	mov	r3, r1
 8001da4:	807b      	strh	r3, [r7, #2]
 8001da6:	4613      	mov	r3, r2
 8001da8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001daa:	787b      	ldrb	r3, [r7, #1]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d003      	beq.n	8001db8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001db0:	887a      	ldrh	r2, [r7, #2]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001db6:	e003      	b.n	8001dc0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001db8:	887b      	ldrh	r3, [r7, #2]
 8001dba:	041a      	lsls	r2, r3, #16
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	611a      	str	r2, [r3, #16]
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bc80      	pop	{r7}
 8001dc8:	4770      	bx	lr

08001dca <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b085      	sub	sp, #20
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ddc:	887a      	ldrh	r2, [r7, #2]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	4013      	ands	r3, r2
 8001de2:	041a      	lsls	r2, r3, #16
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	43d9      	mvns	r1, r3
 8001de8:	887b      	ldrh	r3, [r7, #2]
 8001dea:	400b      	ands	r3, r1
 8001dec:	431a      	orrs	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	611a      	str	r2, [r3, #16]
}
 8001df2:	bf00      	nop
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr

08001dfc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e06:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e08:	695a      	ldr	r2, [r3, #20]
 8001e0a:	88fb      	ldrh	r3, [r7, #6]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d006      	beq.n	8001e20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e12:	4a05      	ldr	r2, [pc, #20]	; (8001e28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e14:	88fb      	ldrh	r3, [r7, #6]
 8001e16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e18:	88fb      	ldrh	r3, [r7, #6]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f000 f806 	bl	8001e2c <HAL_GPIO_EXTI_Callback>
  }
}
 8001e20:	bf00      	nop
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40010400 	.word	0x40010400

08001e2c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr

08001e40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e12b      	b.n	80020aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d106      	bne.n	8001e6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7ff f9a0 	bl	80011ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2224      	movs	r2, #36	; 0x24
 8001e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 0201 	bic.w	r2, r2, #1
 8001e82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ea2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ea4:	f001 f830 	bl	8002f08 <HAL_RCC_GetPCLK1Freq>
 8001ea8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	4a81      	ldr	r2, [pc, #516]	; (80020b4 <HAL_I2C_Init+0x274>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d807      	bhi.n	8001ec4 <HAL_I2C_Init+0x84>
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4a80      	ldr	r2, [pc, #512]	; (80020b8 <HAL_I2C_Init+0x278>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	bf94      	ite	ls
 8001ebc:	2301      	movls	r3, #1
 8001ebe:	2300      	movhi	r3, #0
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	e006      	b.n	8001ed2 <HAL_I2C_Init+0x92>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4a7d      	ldr	r2, [pc, #500]	; (80020bc <HAL_I2C_Init+0x27c>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	bf94      	ite	ls
 8001ecc:	2301      	movls	r3, #1
 8001ece:	2300      	movhi	r3, #0
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e0e7      	b.n	80020aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	4a78      	ldr	r2, [pc, #480]	; (80020c0 <HAL_I2C_Init+0x280>)
 8001ede:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee2:	0c9b      	lsrs	r3, r3, #18
 8001ee4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68ba      	ldr	r2, [r7, #8]
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	4a6a      	ldr	r2, [pc, #424]	; (80020b4 <HAL_I2C_Init+0x274>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d802      	bhi.n	8001f14 <HAL_I2C_Init+0xd4>
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	3301      	adds	r3, #1
 8001f12:	e009      	b.n	8001f28 <HAL_I2C_Init+0xe8>
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f1a:	fb02 f303 	mul.w	r3, r2, r3
 8001f1e:	4a69      	ldr	r2, [pc, #420]	; (80020c4 <HAL_I2C_Init+0x284>)
 8001f20:	fba2 2303 	umull	r2, r3, r2, r3
 8001f24:	099b      	lsrs	r3, r3, #6
 8001f26:	3301      	adds	r3, #1
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	6812      	ldr	r2, [r2, #0]
 8001f2c:	430b      	orrs	r3, r1
 8001f2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	495c      	ldr	r1, [pc, #368]	; (80020b4 <HAL_I2C_Init+0x274>)
 8001f44:	428b      	cmp	r3, r1
 8001f46:	d819      	bhi.n	8001f7c <HAL_I2C_Init+0x13c>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	1e59      	subs	r1, r3, #1
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f56:	1c59      	adds	r1, r3, #1
 8001f58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f5c:	400b      	ands	r3, r1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00a      	beq.n	8001f78 <HAL_I2C_Init+0x138>
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	1e59      	subs	r1, r3, #1
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f70:	3301      	adds	r3, #1
 8001f72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f76:	e051      	b.n	800201c <HAL_I2C_Init+0x1dc>
 8001f78:	2304      	movs	r3, #4
 8001f7a:	e04f      	b.n	800201c <HAL_I2C_Init+0x1dc>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d111      	bne.n	8001fa8 <HAL_I2C_Init+0x168>
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	1e58      	subs	r0, r3, #1
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6859      	ldr	r1, [r3, #4]
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	440b      	add	r3, r1
 8001f92:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f96:	3301      	adds	r3, #1
 8001f98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	bf0c      	ite	eq
 8001fa0:	2301      	moveq	r3, #1
 8001fa2:	2300      	movne	r3, #0
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	e012      	b.n	8001fce <HAL_I2C_Init+0x18e>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	1e58      	subs	r0, r3, #1
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6859      	ldr	r1, [r3, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	0099      	lsls	r1, r3, #2
 8001fb8:	440b      	add	r3, r1
 8001fba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	bf0c      	ite	eq
 8001fc8:	2301      	moveq	r3, #1
 8001fca:	2300      	movne	r3, #0
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <HAL_I2C_Init+0x196>
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e022      	b.n	800201c <HAL_I2C_Init+0x1dc>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d10e      	bne.n	8001ffc <HAL_I2C_Init+0x1bc>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	1e58      	subs	r0, r3, #1
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6859      	ldr	r1, [r3, #4]
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	440b      	add	r3, r1
 8001fec:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ff6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ffa:	e00f      	b.n	800201c <HAL_I2C_Init+0x1dc>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	1e58      	subs	r0, r3, #1
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6859      	ldr	r1, [r3, #4]
 8002004:	460b      	mov	r3, r1
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	440b      	add	r3, r1
 800200a:	0099      	lsls	r1, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002012:	3301      	adds	r3, #1
 8002014:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002018:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800201c:	6879      	ldr	r1, [r7, #4]
 800201e:	6809      	ldr	r1, [r1, #0]
 8002020:	4313      	orrs	r3, r2
 8002022:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	69da      	ldr	r2, [r3, #28]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	430a      	orrs	r2, r1
 800203e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800204a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	6911      	ldr	r1, [r2, #16]
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	68d2      	ldr	r2, [r2, #12]
 8002056:	4311      	orrs	r1, r2
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	6812      	ldr	r2, [r2, #0]
 800205c:	430b      	orrs	r3, r1
 800205e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	695a      	ldr	r2, [r3, #20]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	431a      	orrs	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	430a      	orrs	r2, r1
 800207a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f042 0201 	orr.w	r2, r2, #1
 800208a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2220      	movs	r2, #32
 8002096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	000186a0 	.word	0x000186a0
 80020b8:	001e847f 	.word	0x001e847f
 80020bc:	003d08ff 	.word	0x003d08ff
 80020c0:	431bde83 	.word	0x431bde83
 80020c4:	10624dd3 	.word	0x10624dd3

080020c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b088      	sub	sp, #32
 80020cc:	af02      	add	r7, sp, #8
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	607a      	str	r2, [r7, #4]
 80020d2:	461a      	mov	r2, r3
 80020d4:	460b      	mov	r3, r1
 80020d6:	817b      	strh	r3, [r7, #10]
 80020d8:	4613      	mov	r3, r2
 80020da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020dc:	f7ff fb86 	bl	80017ec <HAL_GetTick>
 80020e0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b20      	cmp	r3, #32
 80020ec:	f040 80e0 	bne.w	80022b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	2319      	movs	r3, #25
 80020f6:	2201      	movs	r2, #1
 80020f8:	4970      	ldr	r1, [pc, #448]	; (80022bc <HAL_I2C_Master_Transmit+0x1f4>)
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	f000 f964 	bl	80023c8 <I2C_WaitOnFlagUntilTimeout>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002106:	2302      	movs	r3, #2
 8002108:	e0d3      	b.n	80022b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002110:	2b01      	cmp	r3, #1
 8002112:	d101      	bne.n	8002118 <HAL_I2C_Master_Transmit+0x50>
 8002114:	2302      	movs	r3, #2
 8002116:	e0cc      	b.n	80022b2 <HAL_I2C_Master_Transmit+0x1ea>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	2b01      	cmp	r3, #1
 800212c:	d007      	beq.n	800213e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f042 0201 	orr.w	r2, r2, #1
 800213c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800214c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2221      	movs	r2, #33	; 0x21
 8002152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2210      	movs	r2, #16
 800215a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	893a      	ldrh	r2, [r7, #8]
 800216e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002174:	b29a      	uxth	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	4a50      	ldr	r2, [pc, #320]	; (80022c0 <HAL_I2C_Master_Transmit+0x1f8>)
 800217e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002180:	8979      	ldrh	r1, [r7, #10]
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	6a3a      	ldr	r2, [r7, #32]
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	f000 f89c 	bl	80022c4 <I2C_MasterRequestWrite>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e08d      	b.n	80022b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002196:	2300      	movs	r3, #0
 8002198:	613b      	str	r3, [r7, #16]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	613b      	str	r3, [r7, #16]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	613b      	str	r3, [r7, #16]
 80021aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80021ac:	e066      	b.n	800227c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	6a39      	ldr	r1, [r7, #32]
 80021b2:	68f8      	ldr	r0, [r7, #12]
 80021b4:	f000 fa22 	bl	80025fc <I2C_WaitOnTXEFlagUntilTimeout>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00d      	beq.n	80021da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	2b04      	cmp	r3, #4
 80021c4:	d107      	bne.n	80021d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e06b      	b.n	80022b2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021de:	781a      	ldrb	r2, [r3, #0]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ea:	1c5a      	adds	r2, r3, #1
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	3b01      	subs	r3, #1
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002202:	3b01      	subs	r3, #1
 8002204:	b29a      	uxth	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	2b04      	cmp	r3, #4
 8002216:	d11b      	bne.n	8002250 <HAL_I2C_Master_Transmit+0x188>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800221c:	2b00      	cmp	r3, #0
 800221e:	d017      	beq.n	8002250 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002224:	781a      	ldrb	r2, [r3, #0]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002230:	1c5a      	adds	r2, r3, #1
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800223a:	b29b      	uxth	r3, r3
 800223c:	3b01      	subs	r3, #1
 800223e:	b29a      	uxth	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002248:	3b01      	subs	r3, #1
 800224a:	b29a      	uxth	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	6a39      	ldr	r1, [r7, #32]
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f000 fa19 	bl	800268c <I2C_WaitOnBTFFlagUntilTimeout>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00d      	beq.n	800227c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002264:	2b04      	cmp	r3, #4
 8002266:	d107      	bne.n	8002278 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002276:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e01a      	b.n	80022b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002280:	2b00      	cmp	r3, #0
 8002282:	d194      	bne.n	80021ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002292:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2220      	movs	r2, #32
 8002298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022ac:	2300      	movs	r3, #0
 80022ae:	e000      	b.n	80022b2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80022b0:	2302      	movs	r3, #2
  }
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3718      	adds	r7, #24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	00100002 	.word	0x00100002
 80022c0:	ffff0000 	.word	0xffff0000

080022c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b088      	sub	sp, #32
 80022c8:	af02      	add	r7, sp, #8
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	607a      	str	r2, [r7, #4]
 80022ce:	603b      	str	r3, [r7, #0]
 80022d0:	460b      	mov	r3, r1
 80022d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	2b08      	cmp	r3, #8
 80022de:	d006      	beq.n	80022ee <I2C_MasterRequestWrite+0x2a>
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d003      	beq.n	80022ee <I2C_MasterRequestWrite+0x2a>
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022ec:	d108      	bne.n	8002300 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	e00b      	b.n	8002318 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002304:	2b12      	cmp	r3, #18
 8002306:	d107      	bne.n	8002318 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002316:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f000 f84f 	bl	80023c8 <I2C_WaitOnFlagUntilTimeout>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00d      	beq.n	800234c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800233e:	d103      	bne.n	8002348 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002346:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e035      	b.n	80023b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002354:	d108      	bne.n	8002368 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002356:	897b      	ldrh	r3, [r7, #10]
 8002358:	b2db      	uxtb	r3, r3
 800235a:	461a      	mov	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002364:	611a      	str	r2, [r3, #16]
 8002366:	e01b      	b.n	80023a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002368:	897b      	ldrh	r3, [r7, #10]
 800236a:	11db      	asrs	r3, r3, #7
 800236c:	b2db      	uxtb	r3, r3
 800236e:	f003 0306 	and.w	r3, r3, #6
 8002372:	b2db      	uxtb	r3, r3
 8002374:	f063 030f 	orn	r3, r3, #15
 8002378:	b2da      	uxtb	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	490e      	ldr	r1, [pc, #56]	; (80023c0 <I2C_MasterRequestWrite+0xfc>)
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f000 f898 	bl	80024bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e010      	b.n	80023b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002396:	897b      	ldrh	r3, [r7, #10]
 8002398:	b2da      	uxtb	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	4907      	ldr	r1, [pc, #28]	; (80023c4 <I2C_MasterRequestWrite+0x100>)
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f000 f888 	bl	80024bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e000      	b.n	80023b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3718      	adds	r7, #24
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	00010008 	.word	0x00010008
 80023c4:	00010002 	.word	0x00010002

080023c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	603b      	str	r3, [r7, #0]
 80023d4:	4613      	mov	r3, r2
 80023d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023d8:	e048      	b.n	800246c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e0:	d044      	beq.n	800246c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023e2:	f7ff fa03 	bl	80017ec <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d302      	bcc.n	80023f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d139      	bne.n	800246c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	0c1b      	lsrs	r3, r3, #16
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d10d      	bne.n	800241e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	43da      	mvns	r2, r3
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	4013      	ands	r3, r2
 800240e:	b29b      	uxth	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	bf0c      	ite	eq
 8002414:	2301      	moveq	r3, #1
 8002416:	2300      	movne	r3, #0
 8002418:	b2db      	uxtb	r3, r3
 800241a:	461a      	mov	r2, r3
 800241c:	e00c      	b.n	8002438 <I2C_WaitOnFlagUntilTimeout+0x70>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	43da      	mvns	r2, r3
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	4013      	ands	r3, r2
 800242a:	b29b      	uxth	r3, r3
 800242c:	2b00      	cmp	r3, #0
 800242e:	bf0c      	ite	eq
 8002430:	2301      	moveq	r3, #1
 8002432:	2300      	movne	r3, #0
 8002434:	b2db      	uxtb	r3, r3
 8002436:	461a      	mov	r2, r3
 8002438:	79fb      	ldrb	r3, [r7, #7]
 800243a:	429a      	cmp	r2, r3
 800243c:	d116      	bne.n	800246c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2220      	movs	r2, #32
 8002448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002458:	f043 0220 	orr.w	r2, r3, #32
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e023      	b.n	80024b4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	0c1b      	lsrs	r3, r3, #16
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b01      	cmp	r3, #1
 8002474:	d10d      	bne.n	8002492 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	695b      	ldr	r3, [r3, #20]
 800247c:	43da      	mvns	r2, r3
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	4013      	ands	r3, r2
 8002482:	b29b      	uxth	r3, r3
 8002484:	2b00      	cmp	r3, #0
 8002486:	bf0c      	ite	eq
 8002488:	2301      	moveq	r3, #1
 800248a:	2300      	movne	r3, #0
 800248c:	b2db      	uxtb	r3, r3
 800248e:	461a      	mov	r2, r3
 8002490:	e00c      	b.n	80024ac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	43da      	mvns	r2, r3
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	4013      	ands	r3, r2
 800249e:	b29b      	uxth	r3, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	bf0c      	ite	eq
 80024a4:	2301      	moveq	r3, #1
 80024a6:	2300      	movne	r3, #0
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	461a      	mov	r2, r3
 80024ac:	79fb      	ldrb	r3, [r7, #7]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d093      	beq.n	80023da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
 80024c8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024ca:	e071      	b.n	80025b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024da:	d123      	bne.n	8002524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2220      	movs	r2, #32
 8002500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002510:	f043 0204 	orr.w	r2, r3, #4
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e067      	b.n	80025f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800252a:	d041      	beq.n	80025b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800252c:	f7ff f95e 	bl	80017ec <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	429a      	cmp	r2, r3
 800253a:	d302      	bcc.n	8002542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d136      	bne.n	80025b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	0c1b      	lsrs	r3, r3, #16
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b01      	cmp	r3, #1
 800254a:	d10c      	bne.n	8002566 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	43da      	mvns	r2, r3
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	4013      	ands	r3, r2
 8002558:	b29b      	uxth	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	bf14      	ite	ne
 800255e:	2301      	movne	r3, #1
 8002560:	2300      	moveq	r3, #0
 8002562:	b2db      	uxtb	r3, r3
 8002564:	e00b      	b.n	800257e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	43da      	mvns	r2, r3
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	4013      	ands	r3, r2
 8002572:	b29b      	uxth	r3, r3
 8002574:	2b00      	cmp	r3, #0
 8002576:	bf14      	ite	ne
 8002578:	2301      	movne	r3, #1
 800257a:	2300      	moveq	r3, #0
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d016      	beq.n	80025b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2220      	movs	r2, #32
 800258c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259c:	f043 0220 	orr.w	r2, r3, #32
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e021      	b.n	80025f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	0c1b      	lsrs	r3, r3, #16
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d10c      	bne.n	80025d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	43da      	mvns	r2, r3
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	4013      	ands	r3, r2
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	bf14      	ite	ne
 80025cc:	2301      	movne	r3, #1
 80025ce:	2300      	moveq	r3, #0
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	e00b      	b.n	80025ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	43da      	mvns	r2, r3
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	4013      	ands	r3, r2
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	bf14      	ite	ne
 80025e6:	2301      	movne	r3, #1
 80025e8:	2300      	moveq	r3, #0
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f47f af6d 	bne.w	80024cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3710      	adds	r7, #16
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002608:	e034      	b.n	8002674 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f000 f886 	bl	800271c <I2C_IsAcknowledgeFailed>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e034      	b.n	8002684 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002620:	d028      	beq.n	8002674 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002622:	f7ff f8e3 	bl	80017ec <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	68ba      	ldr	r2, [r7, #8]
 800262e:	429a      	cmp	r2, r3
 8002630:	d302      	bcc.n	8002638 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d11d      	bne.n	8002674 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002642:	2b80      	cmp	r3, #128	; 0x80
 8002644:	d016      	beq.n	8002674 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2220      	movs	r2, #32
 8002650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002660:	f043 0220 	orr.w	r2, r3, #32
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e007      	b.n	8002684 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800267e:	2b80      	cmp	r3, #128	; 0x80
 8002680:	d1c3      	bne.n	800260a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002698:	e034      	b.n	8002704 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 f83e 	bl	800271c <I2C_IsAcknowledgeFailed>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e034      	b.n	8002714 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b0:	d028      	beq.n	8002704 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026b2:	f7ff f89b 	bl	80017ec <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	68ba      	ldr	r2, [r7, #8]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d302      	bcc.n	80026c8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d11d      	bne.n	8002704 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	f003 0304 	and.w	r3, r3, #4
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	d016      	beq.n	8002704 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2220      	movs	r2, #32
 80026e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	f043 0220 	orr.w	r2, r3, #32
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e007      	b.n	8002714 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	f003 0304 	and.w	r3, r3, #4
 800270e:	2b04      	cmp	r3, #4
 8002710:	d1c3      	bne.n	800269a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800272e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002732:	d11b      	bne.n	800276c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800273c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2220      	movs	r2, #32
 8002748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002758:	f043 0204 	orr.w	r2, r3, #4
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e000      	b.n	800276e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	bc80      	pop	{r7}
 8002776:	4770      	bx	lr

08002778 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e26c      	b.n	8002c64 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	f000 8087 	beq.w	80028a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002798:	4b92      	ldr	r3, [pc, #584]	; (80029e4 <HAL_RCC_OscConfig+0x26c>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f003 030c 	and.w	r3, r3, #12
 80027a0:	2b04      	cmp	r3, #4
 80027a2:	d00c      	beq.n	80027be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027a4:	4b8f      	ldr	r3, [pc, #572]	; (80029e4 <HAL_RCC_OscConfig+0x26c>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f003 030c 	and.w	r3, r3, #12
 80027ac:	2b08      	cmp	r3, #8
 80027ae:	d112      	bne.n	80027d6 <HAL_RCC_OscConfig+0x5e>
 80027b0:	4b8c      	ldr	r3, [pc, #560]	; (80029e4 <HAL_RCC_OscConfig+0x26c>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027bc:	d10b      	bne.n	80027d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027be:	4b89      	ldr	r3, [pc, #548]	; (80029e4 <HAL_RCC_OscConfig+0x26c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d06c      	beq.n	80028a4 <HAL_RCC_OscConfig+0x12c>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d168      	bne.n	80028a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e246      	b.n	8002c64 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027de:	d106      	bne.n	80027ee <HAL_RCC_OscConfig+0x76>
 80027e0:	4b80      	ldr	r3, [pc, #512]	; (80029e4 <HAL_RCC_OscConfig+0x26c>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a7f      	ldr	r2, [pc, #508]	; (80029e4 <HAL_RCC_OscConfig+0x26c>)
 80027e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ea:	6013      	str	r3, [r2, #0]
 80027ec:	e02e      	b.n	800284c <HAL_RCC_OscConfig+0xd4>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10c      	bne.n	8002810 <HAL_RCC_OscConfig+0x98>
 80027f6:	4b7b      	ldr	r3, [pc, #492]	; (80029e4 <HAL_RCC_OscConfig+0x26c>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a7a      	ldr	r2, [pc, #488]	; (80029e4 <HAL_RCC_OscConfig+0x26c>)
 80027fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002800:	6013      	str	r3, [r2, #0]
 8002802:	4b78      	ldr	r3, [pc, #480]	; (80029e4 <HAL_RCC_OscConfig+0x26c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a77      	ldr	r2, [pc, #476]	; (80029e4 <HAL_RCC_OscConfig+0x26c>)
 8002808:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800280c:	6013      	str	r3, [r2, #0]
 800280e:	e01d      	b.n	800284c <HAL_RCC_OscConfig+0xd4>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002818:	d10c      	bne.n	8002834 <HAL_RCC_OscConfig+0xbc>
 800281a:	4b72      	ldr	r3, [pc, #456]	; (80029e4 <HAL_RCC_OscConfig+0x26c>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a71      	ldr	r2, [pc, #452]	; (80029e4 <HAL_RCC_OscConfig+0x26c>)
 8002820:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002824:	6013      	str	r3, [r2, #0]
 8002826:	4b6f      	ldr	r3, [pc, #444]	; (80029e4 <HAL_RCC_OscConfig+0x26c>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a6e      	ldr	r2, [pc, #440]	; (80029e4 <HAL_RCC_OscConfig+0x26c>)
 800282c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002830:	6013      	str	r3, [r2, #0]
 8002832:	e00b      	b.n	800284c <HAL_RCC_OscConfig+0xd4>
 8002834:	4b6b      	ldr	r3, [pc, #428]	; (80029e4 <HAL_RCC_OscConfig+0x26c>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a6a      	ldr	r2, [pc, #424]	; (80029e4 <HAL_RCC_OscConfig+0x26c>)
 800283a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800283e:	6013      	str	r3, [r2, #0]
 8002840:	4b68      	ldr	r3, [pc, #416]	; (80029e4 <HAL_RCC_OscConfig+0x26c>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a67      	ldr	r2, [pc, #412]	; (80029e4 <HAL_RCC_OscConfig+0x26c>)
 8002846:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800284a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d013      	beq.n	800287c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002854:	f7fe ffca 	bl	80017ec <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800285c:	f7fe ffc6 	bl	80017ec <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b64      	cmp	r3, #100	; 0x64
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e1fa      	b.n	8002c64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800286e:	4b5d      	ldr	r3, [pc, #372]	; (80029e4 <HAL_RCC_OscConfig+0x26c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d0f0      	beq.n	800285c <HAL_RCC_OscConfig+0xe4>
 800287a:	e014      	b.n	80028a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287c:	f7fe ffb6 	bl	80017ec <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002884:	f7fe ffb2 	bl	80017ec <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b64      	cmp	r3, #100	; 0x64
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e1e6      	b.n	8002c64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002896:	4b53      	ldr	r3, [pc, #332]	; (80029e4 <HAL_RCC_OscConfig+0x26c>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1f0      	bne.n	8002884 <HAL_RCC_OscConfig+0x10c>
 80028a2:	e000      	b.n	80028a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d063      	beq.n	800297a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028b2:	4b4c      	ldr	r3, [pc, #304]	; (80029e4 <HAL_RCC_OscConfig+0x26c>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f003 030c 	and.w	r3, r3, #12
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00b      	beq.n	80028d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80028be:	4b49      	ldr	r3, [pc, #292]	; (80029e4 <HAL_RCC_OscConfig+0x26c>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f003 030c 	and.w	r3, r3, #12
 80028c6:	2b08      	cmp	r3, #8
 80028c8:	d11c      	bne.n	8002904 <HAL_RCC_OscConfig+0x18c>
 80028ca:	4b46      	ldr	r3, [pc, #280]	; (80029e4 <HAL_RCC_OscConfig+0x26c>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d116      	bne.n	8002904 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028d6:	4b43      	ldr	r3, [pc, #268]	; (80029e4 <HAL_RCC_OscConfig+0x26c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d005      	beq.n	80028ee <HAL_RCC_OscConfig+0x176>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d001      	beq.n	80028ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e1ba      	b.n	8002c64 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ee:	4b3d      	ldr	r3, [pc, #244]	; (80029e4 <HAL_RCC_OscConfig+0x26c>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	4939      	ldr	r1, [pc, #228]	; (80029e4 <HAL_RCC_OscConfig+0x26c>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002902:	e03a      	b.n	800297a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d020      	beq.n	800294e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800290c:	4b36      	ldr	r3, [pc, #216]	; (80029e8 <HAL_RCC_OscConfig+0x270>)
 800290e:	2201      	movs	r2, #1
 8002910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002912:	f7fe ff6b 	bl	80017ec <HAL_GetTick>
 8002916:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002918:	e008      	b.n	800292c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800291a:	f7fe ff67 	bl	80017ec <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e19b      	b.n	8002c64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800292c:	4b2d      	ldr	r3, [pc, #180]	; (80029e4 <HAL_RCC_OscConfig+0x26c>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d0f0      	beq.n	800291a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002938:	4b2a      	ldr	r3, [pc, #168]	; (80029e4 <HAL_RCC_OscConfig+0x26c>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	4927      	ldr	r1, [pc, #156]	; (80029e4 <HAL_RCC_OscConfig+0x26c>)
 8002948:	4313      	orrs	r3, r2
 800294a:	600b      	str	r3, [r1, #0]
 800294c:	e015      	b.n	800297a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800294e:	4b26      	ldr	r3, [pc, #152]	; (80029e8 <HAL_RCC_OscConfig+0x270>)
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002954:	f7fe ff4a 	bl	80017ec <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800295c:	f7fe ff46 	bl	80017ec <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e17a      	b.n	8002c64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800296e:	4b1d      	ldr	r3, [pc, #116]	; (80029e4 <HAL_RCC_OscConfig+0x26c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1f0      	bne.n	800295c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0308 	and.w	r3, r3, #8
 8002982:	2b00      	cmp	r3, #0
 8002984:	d03a      	beq.n	80029fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d019      	beq.n	80029c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800298e:	4b17      	ldr	r3, [pc, #92]	; (80029ec <HAL_RCC_OscConfig+0x274>)
 8002990:	2201      	movs	r2, #1
 8002992:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002994:	f7fe ff2a 	bl	80017ec <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800299c:	f7fe ff26 	bl	80017ec <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e15a      	b.n	8002c64 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ae:	4b0d      	ldr	r3, [pc, #52]	; (80029e4 <HAL_RCC_OscConfig+0x26c>)
 80029b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d0f0      	beq.n	800299c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80029ba:	2001      	movs	r0, #1
 80029bc:	f000 facc 	bl	8002f58 <RCC_Delay>
 80029c0:	e01c      	b.n	80029fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029c2:	4b0a      	ldr	r3, [pc, #40]	; (80029ec <HAL_RCC_OscConfig+0x274>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029c8:	f7fe ff10 	bl	80017ec <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029ce:	e00f      	b.n	80029f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029d0:	f7fe ff0c 	bl	80017ec <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d908      	bls.n	80029f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e140      	b.n	8002c64 <HAL_RCC_OscConfig+0x4ec>
 80029e2:	bf00      	nop
 80029e4:	40021000 	.word	0x40021000
 80029e8:	42420000 	.word	0x42420000
 80029ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029f0:	4b9e      	ldr	r3, [pc, #632]	; (8002c6c <HAL_RCC_OscConfig+0x4f4>)
 80029f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1e9      	bne.n	80029d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 80a6 	beq.w	8002b56 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a0e:	4b97      	ldr	r3, [pc, #604]	; (8002c6c <HAL_RCC_OscConfig+0x4f4>)
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10d      	bne.n	8002a36 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a1a:	4b94      	ldr	r3, [pc, #592]	; (8002c6c <HAL_RCC_OscConfig+0x4f4>)
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	4a93      	ldr	r2, [pc, #588]	; (8002c6c <HAL_RCC_OscConfig+0x4f4>)
 8002a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a24:	61d3      	str	r3, [r2, #28]
 8002a26:	4b91      	ldr	r3, [pc, #580]	; (8002c6c <HAL_RCC_OscConfig+0x4f4>)
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2e:	60bb      	str	r3, [r7, #8]
 8002a30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a32:	2301      	movs	r3, #1
 8002a34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a36:	4b8e      	ldr	r3, [pc, #568]	; (8002c70 <HAL_RCC_OscConfig+0x4f8>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d118      	bne.n	8002a74 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a42:	4b8b      	ldr	r3, [pc, #556]	; (8002c70 <HAL_RCC_OscConfig+0x4f8>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a8a      	ldr	r2, [pc, #552]	; (8002c70 <HAL_RCC_OscConfig+0x4f8>)
 8002a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a4e:	f7fe fecd 	bl	80017ec <HAL_GetTick>
 8002a52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a54:	e008      	b.n	8002a68 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a56:	f7fe fec9 	bl	80017ec <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b64      	cmp	r3, #100	; 0x64
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e0fd      	b.n	8002c64 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a68:	4b81      	ldr	r3, [pc, #516]	; (8002c70 <HAL_RCC_OscConfig+0x4f8>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d0f0      	beq.n	8002a56 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d106      	bne.n	8002a8a <HAL_RCC_OscConfig+0x312>
 8002a7c:	4b7b      	ldr	r3, [pc, #492]	; (8002c6c <HAL_RCC_OscConfig+0x4f4>)
 8002a7e:	6a1b      	ldr	r3, [r3, #32]
 8002a80:	4a7a      	ldr	r2, [pc, #488]	; (8002c6c <HAL_RCC_OscConfig+0x4f4>)
 8002a82:	f043 0301 	orr.w	r3, r3, #1
 8002a86:	6213      	str	r3, [r2, #32]
 8002a88:	e02d      	b.n	8002ae6 <HAL_RCC_OscConfig+0x36e>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10c      	bne.n	8002aac <HAL_RCC_OscConfig+0x334>
 8002a92:	4b76      	ldr	r3, [pc, #472]	; (8002c6c <HAL_RCC_OscConfig+0x4f4>)
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	4a75      	ldr	r2, [pc, #468]	; (8002c6c <HAL_RCC_OscConfig+0x4f4>)
 8002a98:	f023 0301 	bic.w	r3, r3, #1
 8002a9c:	6213      	str	r3, [r2, #32]
 8002a9e:	4b73      	ldr	r3, [pc, #460]	; (8002c6c <HAL_RCC_OscConfig+0x4f4>)
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	4a72      	ldr	r2, [pc, #456]	; (8002c6c <HAL_RCC_OscConfig+0x4f4>)
 8002aa4:	f023 0304 	bic.w	r3, r3, #4
 8002aa8:	6213      	str	r3, [r2, #32]
 8002aaa:	e01c      	b.n	8002ae6 <HAL_RCC_OscConfig+0x36e>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	2b05      	cmp	r3, #5
 8002ab2:	d10c      	bne.n	8002ace <HAL_RCC_OscConfig+0x356>
 8002ab4:	4b6d      	ldr	r3, [pc, #436]	; (8002c6c <HAL_RCC_OscConfig+0x4f4>)
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	4a6c      	ldr	r2, [pc, #432]	; (8002c6c <HAL_RCC_OscConfig+0x4f4>)
 8002aba:	f043 0304 	orr.w	r3, r3, #4
 8002abe:	6213      	str	r3, [r2, #32]
 8002ac0:	4b6a      	ldr	r3, [pc, #424]	; (8002c6c <HAL_RCC_OscConfig+0x4f4>)
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	4a69      	ldr	r2, [pc, #420]	; (8002c6c <HAL_RCC_OscConfig+0x4f4>)
 8002ac6:	f043 0301 	orr.w	r3, r3, #1
 8002aca:	6213      	str	r3, [r2, #32]
 8002acc:	e00b      	b.n	8002ae6 <HAL_RCC_OscConfig+0x36e>
 8002ace:	4b67      	ldr	r3, [pc, #412]	; (8002c6c <HAL_RCC_OscConfig+0x4f4>)
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	4a66      	ldr	r2, [pc, #408]	; (8002c6c <HAL_RCC_OscConfig+0x4f4>)
 8002ad4:	f023 0301 	bic.w	r3, r3, #1
 8002ad8:	6213      	str	r3, [r2, #32]
 8002ada:	4b64      	ldr	r3, [pc, #400]	; (8002c6c <HAL_RCC_OscConfig+0x4f4>)
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	4a63      	ldr	r2, [pc, #396]	; (8002c6c <HAL_RCC_OscConfig+0x4f4>)
 8002ae0:	f023 0304 	bic.w	r3, r3, #4
 8002ae4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d015      	beq.n	8002b1a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aee:	f7fe fe7d 	bl	80017ec <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002af4:	e00a      	b.n	8002b0c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af6:	f7fe fe79 	bl	80017ec <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e0ab      	b.n	8002c64 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b0c:	4b57      	ldr	r3, [pc, #348]	; (8002c6c <HAL_RCC_OscConfig+0x4f4>)
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0ee      	beq.n	8002af6 <HAL_RCC_OscConfig+0x37e>
 8002b18:	e014      	b.n	8002b44 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b1a:	f7fe fe67 	bl	80017ec <HAL_GetTick>
 8002b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b20:	e00a      	b.n	8002b38 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b22:	f7fe fe63 	bl	80017ec <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d901      	bls.n	8002b38 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e095      	b.n	8002c64 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b38:	4b4c      	ldr	r3, [pc, #304]	; (8002c6c <HAL_RCC_OscConfig+0x4f4>)
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1ee      	bne.n	8002b22 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b44:	7dfb      	ldrb	r3, [r7, #23]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d105      	bne.n	8002b56 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b4a:	4b48      	ldr	r3, [pc, #288]	; (8002c6c <HAL_RCC_OscConfig+0x4f4>)
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	4a47      	ldr	r2, [pc, #284]	; (8002c6c <HAL_RCC_OscConfig+0x4f4>)
 8002b50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b54:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 8081 	beq.w	8002c62 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b60:	4b42      	ldr	r3, [pc, #264]	; (8002c6c <HAL_RCC_OscConfig+0x4f4>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f003 030c 	and.w	r3, r3, #12
 8002b68:	2b08      	cmp	r3, #8
 8002b6a:	d061      	beq.n	8002c30 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	69db      	ldr	r3, [r3, #28]
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d146      	bne.n	8002c02 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b74:	4b3f      	ldr	r3, [pc, #252]	; (8002c74 <HAL_RCC_OscConfig+0x4fc>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7a:	f7fe fe37 	bl	80017ec <HAL_GetTick>
 8002b7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b80:	e008      	b.n	8002b94 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b82:	f7fe fe33 	bl	80017ec <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e067      	b.n	8002c64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b94:	4b35      	ldr	r3, [pc, #212]	; (8002c6c <HAL_RCC_OscConfig+0x4f4>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1f0      	bne.n	8002b82 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ba8:	d108      	bne.n	8002bbc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002baa:	4b30      	ldr	r3, [pc, #192]	; (8002c6c <HAL_RCC_OscConfig+0x4f4>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	492d      	ldr	r1, [pc, #180]	; (8002c6c <HAL_RCC_OscConfig+0x4f4>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bbc:	4b2b      	ldr	r3, [pc, #172]	; (8002c6c <HAL_RCC_OscConfig+0x4f4>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a19      	ldr	r1, [r3, #32]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bcc:	430b      	orrs	r3, r1
 8002bce:	4927      	ldr	r1, [pc, #156]	; (8002c6c <HAL_RCC_OscConfig+0x4f4>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bd4:	4b27      	ldr	r3, [pc, #156]	; (8002c74 <HAL_RCC_OscConfig+0x4fc>)
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bda:	f7fe fe07 	bl	80017ec <HAL_GetTick>
 8002bde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002be0:	e008      	b.n	8002bf4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be2:	f7fe fe03 	bl	80017ec <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d901      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e037      	b.n	8002c64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bf4:	4b1d      	ldr	r3, [pc, #116]	; (8002c6c <HAL_RCC_OscConfig+0x4f4>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d0f0      	beq.n	8002be2 <HAL_RCC_OscConfig+0x46a>
 8002c00:	e02f      	b.n	8002c62 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c02:	4b1c      	ldr	r3, [pc, #112]	; (8002c74 <HAL_RCC_OscConfig+0x4fc>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c08:	f7fe fdf0 	bl	80017ec <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c10:	f7fe fdec 	bl	80017ec <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e020      	b.n	8002c64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c22:	4b12      	ldr	r3, [pc, #72]	; (8002c6c <HAL_RCC_OscConfig+0x4f4>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1f0      	bne.n	8002c10 <HAL_RCC_OscConfig+0x498>
 8002c2e:	e018      	b.n	8002c62 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	69db      	ldr	r3, [r3, #28]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d101      	bne.n	8002c3c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e013      	b.n	8002c64 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c3c:	4b0b      	ldr	r3, [pc, #44]	; (8002c6c <HAL_RCC_OscConfig+0x4f4>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d106      	bne.n	8002c5e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d001      	beq.n	8002c62 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e000      	b.n	8002c64 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3718      	adds	r7, #24
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	40007000 	.word	0x40007000
 8002c74:	42420060 	.word	0x42420060

08002c78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d101      	bne.n	8002c8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e0d0      	b.n	8002e2e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c8c:	4b6a      	ldr	r3, [pc, #424]	; (8002e38 <HAL_RCC_ClockConfig+0x1c0>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0307 	and.w	r3, r3, #7
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d910      	bls.n	8002cbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c9a:	4b67      	ldr	r3, [pc, #412]	; (8002e38 <HAL_RCC_ClockConfig+0x1c0>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f023 0207 	bic.w	r2, r3, #7
 8002ca2:	4965      	ldr	r1, [pc, #404]	; (8002e38 <HAL_RCC_ClockConfig+0x1c0>)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002caa:	4b63      	ldr	r3, [pc, #396]	; (8002e38 <HAL_RCC_ClockConfig+0x1c0>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0307 	and.w	r3, r3, #7
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d001      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e0b8      	b.n	8002e2e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d020      	beq.n	8002d0a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0304 	and.w	r3, r3, #4
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d005      	beq.n	8002ce0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cd4:	4b59      	ldr	r3, [pc, #356]	; (8002e3c <HAL_RCC_ClockConfig+0x1c4>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	4a58      	ldr	r2, [pc, #352]	; (8002e3c <HAL_RCC_ClockConfig+0x1c4>)
 8002cda:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002cde:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0308 	and.w	r3, r3, #8
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d005      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cec:	4b53      	ldr	r3, [pc, #332]	; (8002e3c <HAL_RCC_ClockConfig+0x1c4>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	4a52      	ldr	r2, [pc, #328]	; (8002e3c <HAL_RCC_ClockConfig+0x1c4>)
 8002cf2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002cf6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cf8:	4b50      	ldr	r3, [pc, #320]	; (8002e3c <HAL_RCC_ClockConfig+0x1c4>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	494d      	ldr	r1, [pc, #308]	; (8002e3c <HAL_RCC_ClockConfig+0x1c4>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d040      	beq.n	8002d98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d107      	bne.n	8002d2e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d1e:	4b47      	ldr	r3, [pc, #284]	; (8002e3c <HAL_RCC_ClockConfig+0x1c4>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d115      	bne.n	8002d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e07f      	b.n	8002e2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d107      	bne.n	8002d46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d36:	4b41      	ldr	r3, [pc, #260]	; (8002e3c <HAL_RCC_ClockConfig+0x1c4>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d109      	bne.n	8002d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e073      	b.n	8002e2e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d46:	4b3d      	ldr	r3, [pc, #244]	; (8002e3c <HAL_RCC_ClockConfig+0x1c4>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e06b      	b.n	8002e2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d56:	4b39      	ldr	r3, [pc, #228]	; (8002e3c <HAL_RCC_ClockConfig+0x1c4>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f023 0203 	bic.w	r2, r3, #3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	4936      	ldr	r1, [pc, #216]	; (8002e3c <HAL_RCC_ClockConfig+0x1c4>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d68:	f7fe fd40 	bl	80017ec <HAL_GetTick>
 8002d6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d6e:	e00a      	b.n	8002d86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d70:	f7fe fd3c 	bl	80017ec <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e053      	b.n	8002e2e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d86:	4b2d      	ldr	r3, [pc, #180]	; (8002e3c <HAL_RCC_ClockConfig+0x1c4>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f003 020c 	and.w	r2, r3, #12
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d1eb      	bne.n	8002d70 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d98:	4b27      	ldr	r3, [pc, #156]	; (8002e38 <HAL_RCC_ClockConfig+0x1c0>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0307 	and.w	r3, r3, #7
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d210      	bcs.n	8002dc8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002da6:	4b24      	ldr	r3, [pc, #144]	; (8002e38 <HAL_RCC_ClockConfig+0x1c0>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f023 0207 	bic.w	r2, r3, #7
 8002dae:	4922      	ldr	r1, [pc, #136]	; (8002e38 <HAL_RCC_ClockConfig+0x1c0>)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002db6:	4b20      	ldr	r3, [pc, #128]	; (8002e38 <HAL_RCC_ClockConfig+0x1c0>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0307 	and.w	r3, r3, #7
 8002dbe:	683a      	ldr	r2, [r7, #0]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d001      	beq.n	8002dc8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e032      	b.n	8002e2e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0304 	and.w	r3, r3, #4
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d008      	beq.n	8002de6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dd4:	4b19      	ldr	r3, [pc, #100]	; (8002e3c <HAL_RCC_ClockConfig+0x1c4>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	4916      	ldr	r1, [pc, #88]	; (8002e3c <HAL_RCC_ClockConfig+0x1c4>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0308 	and.w	r3, r3, #8
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d009      	beq.n	8002e06 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002df2:	4b12      	ldr	r3, [pc, #72]	; (8002e3c <HAL_RCC_ClockConfig+0x1c4>)
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	490e      	ldr	r1, [pc, #56]	; (8002e3c <HAL_RCC_ClockConfig+0x1c4>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e06:	f000 f821 	bl	8002e4c <HAL_RCC_GetSysClockFreq>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	4b0b      	ldr	r3, [pc, #44]	; (8002e3c <HAL_RCC_ClockConfig+0x1c4>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	091b      	lsrs	r3, r3, #4
 8002e12:	f003 030f 	and.w	r3, r3, #15
 8002e16:	490a      	ldr	r1, [pc, #40]	; (8002e40 <HAL_RCC_ClockConfig+0x1c8>)
 8002e18:	5ccb      	ldrb	r3, [r1, r3]
 8002e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e1e:	4a09      	ldr	r2, [pc, #36]	; (8002e44 <HAL_RCC_ClockConfig+0x1cc>)
 8002e20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e22:	4b09      	ldr	r3, [pc, #36]	; (8002e48 <HAL_RCC_ClockConfig+0x1d0>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fe fc9e 	bl	8001768 <HAL_InitTick>

  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	40022000 	.word	0x40022000
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	08004248 	.word	0x08004248
 8002e44:	20000054 	.word	0x20000054
 8002e48:	20000058 	.word	0x20000058

08002e4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b087      	sub	sp, #28
 8002e50:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e52:	2300      	movs	r3, #0
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	2300      	movs	r3, #0
 8002e58:	60bb      	str	r3, [r7, #8]
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	617b      	str	r3, [r7, #20]
 8002e5e:	2300      	movs	r3, #0
 8002e60:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e62:	2300      	movs	r3, #0
 8002e64:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e66:	4b1e      	ldr	r3, [pc, #120]	; (8002ee0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f003 030c 	and.w	r3, r3, #12
 8002e72:	2b04      	cmp	r3, #4
 8002e74:	d002      	beq.n	8002e7c <HAL_RCC_GetSysClockFreq+0x30>
 8002e76:	2b08      	cmp	r3, #8
 8002e78:	d003      	beq.n	8002e82 <HAL_RCC_GetSysClockFreq+0x36>
 8002e7a:	e027      	b.n	8002ecc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e7c:	4b19      	ldr	r3, [pc, #100]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e7e:	613b      	str	r3, [r7, #16]
      break;
 8002e80:	e027      	b.n	8002ed2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	0c9b      	lsrs	r3, r3, #18
 8002e86:	f003 030f 	and.w	r3, r3, #15
 8002e8a:	4a17      	ldr	r2, [pc, #92]	; (8002ee8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e8c:	5cd3      	ldrb	r3, [r2, r3]
 8002e8e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d010      	beq.n	8002ebc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e9a:	4b11      	ldr	r3, [pc, #68]	; (8002ee0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	0c5b      	lsrs	r3, r3, #17
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	4a11      	ldr	r2, [pc, #68]	; (8002eec <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ea6:	5cd3      	ldrb	r3, [r2, r3]
 8002ea8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a0d      	ldr	r2, [pc, #52]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002eae:	fb02 f203 	mul.w	r2, r2, r3
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb8:	617b      	str	r3, [r7, #20]
 8002eba:	e004      	b.n	8002ec6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a0c      	ldr	r2, [pc, #48]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ec0:	fb02 f303 	mul.w	r3, r2, r3
 8002ec4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	613b      	str	r3, [r7, #16]
      break;
 8002eca:	e002      	b.n	8002ed2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ecc:	4b05      	ldr	r3, [pc, #20]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ece:	613b      	str	r3, [r7, #16]
      break;
 8002ed0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ed2:	693b      	ldr	r3, [r7, #16]
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	371c      	adds	r7, #28
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bc80      	pop	{r7}
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	007a1200 	.word	0x007a1200
 8002ee8:	08004260 	.word	0x08004260
 8002eec:	08004270 	.word	0x08004270
 8002ef0:	003d0900 	.word	0x003d0900

08002ef4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ef8:	4b02      	ldr	r3, [pc, #8]	; (8002f04 <HAL_RCC_GetHCLKFreq+0x10>)
 8002efa:	681b      	ldr	r3, [r3, #0]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr
 8002f04:	20000054 	.word	0x20000054

08002f08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f0c:	f7ff fff2 	bl	8002ef4 <HAL_RCC_GetHCLKFreq>
 8002f10:	4602      	mov	r2, r0
 8002f12:	4b05      	ldr	r3, [pc, #20]	; (8002f28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	0a1b      	lsrs	r3, r3, #8
 8002f18:	f003 0307 	and.w	r3, r3, #7
 8002f1c:	4903      	ldr	r1, [pc, #12]	; (8002f2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f1e:	5ccb      	ldrb	r3, [r1, r3]
 8002f20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	08004258 	.word	0x08004258

08002f30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f34:	f7ff ffde 	bl	8002ef4 <HAL_RCC_GetHCLKFreq>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	4b05      	ldr	r3, [pc, #20]	; (8002f50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	0adb      	lsrs	r3, r3, #11
 8002f40:	f003 0307 	and.w	r3, r3, #7
 8002f44:	4903      	ldr	r1, [pc, #12]	; (8002f54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f46:	5ccb      	ldrb	r3, [r1, r3]
 8002f48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40021000 	.word	0x40021000
 8002f54:	08004258 	.word	0x08004258

08002f58 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f60:	4b0a      	ldr	r3, [pc, #40]	; (8002f8c <RCC_Delay+0x34>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a0a      	ldr	r2, [pc, #40]	; (8002f90 <RCC_Delay+0x38>)
 8002f66:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6a:	0a5b      	lsrs	r3, r3, #9
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	fb02 f303 	mul.w	r3, r2, r3
 8002f72:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f74:	bf00      	nop
  }
  while (Delay --);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	1e5a      	subs	r2, r3, #1
 8002f7a:	60fa      	str	r2, [r7, #12]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1f9      	bne.n	8002f74 <RCC_Delay+0x1c>
}
 8002f80:	bf00      	nop
 8002f82:	bf00      	nop
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr
 8002f8c:	20000054 	.word	0x20000054
 8002f90:	10624dd3 	.word	0x10624dd3

08002f94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e041      	b.n	800302a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d106      	bne.n	8002fc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f7fe f934 	bl	8001228 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	3304      	adds	r3, #4
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4610      	mov	r0, r2
 8002fd4:	f000 fa5c 	bl	8003490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
	...

08003034 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b01      	cmp	r3, #1
 8003046:	d001      	beq.n	800304c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e03a      	b.n	80030c2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2202      	movs	r2, #2
 8003050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68da      	ldr	r2, [r3, #12]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f042 0201 	orr.w	r2, r2, #1
 8003062:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a18      	ldr	r2, [pc, #96]	; (80030cc <HAL_TIM_Base_Start_IT+0x98>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d00e      	beq.n	800308c <HAL_TIM_Base_Start_IT+0x58>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003076:	d009      	beq.n	800308c <HAL_TIM_Base_Start_IT+0x58>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a14      	ldr	r2, [pc, #80]	; (80030d0 <HAL_TIM_Base_Start_IT+0x9c>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d004      	beq.n	800308c <HAL_TIM_Base_Start_IT+0x58>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a13      	ldr	r2, [pc, #76]	; (80030d4 <HAL_TIM_Base_Start_IT+0xa0>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d111      	bne.n	80030b0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 0307 	and.w	r3, r3, #7
 8003096:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2b06      	cmp	r3, #6
 800309c:	d010      	beq.n	80030c0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f042 0201 	orr.w	r2, r2, #1
 80030ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ae:	e007      	b.n	80030c0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f042 0201 	orr.w	r2, r2, #1
 80030be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3714      	adds	r7, #20
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bc80      	pop	{r7}
 80030ca:	4770      	bx	lr
 80030cc:	40012c00 	.word	0x40012c00
 80030d0:	40000400 	.word	0x40000400
 80030d4:	40000800 	.word	0x40000800

080030d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d020      	beq.n	800313c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d01b      	beq.n	800313c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f06f 0202 	mvn.w	r2, #2
 800310c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	f003 0303 	and.w	r3, r3, #3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d003      	beq.n	800312a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f998 	bl	8003458 <HAL_TIM_IC_CaptureCallback>
 8003128:	e005      	b.n	8003136 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f98b 	bl	8003446 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f000 f99a 	bl	800346a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	f003 0304 	and.w	r3, r3, #4
 8003142:	2b00      	cmp	r3, #0
 8003144:	d020      	beq.n	8003188 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f003 0304 	and.w	r3, r3, #4
 800314c:	2b00      	cmp	r3, #0
 800314e:	d01b      	beq.n	8003188 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f06f 0204 	mvn.w	r2, #4
 8003158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2202      	movs	r2, #2
 800315e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 f972 	bl	8003458 <HAL_TIM_IC_CaptureCallback>
 8003174:	e005      	b.n	8003182 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f965 	bl	8003446 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 f974 	bl	800346a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	f003 0308 	and.w	r3, r3, #8
 800318e:	2b00      	cmp	r3, #0
 8003190:	d020      	beq.n	80031d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f003 0308 	and.w	r3, r3, #8
 8003198:	2b00      	cmp	r3, #0
 800319a:	d01b      	beq.n	80031d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f06f 0208 	mvn.w	r2, #8
 80031a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2204      	movs	r2, #4
 80031aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	f003 0303 	and.w	r3, r3, #3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f94c 	bl	8003458 <HAL_TIM_IC_CaptureCallback>
 80031c0:	e005      	b.n	80031ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f93f 	bl	8003446 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 f94e 	bl	800346a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	f003 0310 	and.w	r3, r3, #16
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d020      	beq.n	8003220 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f003 0310 	and.w	r3, r3, #16
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d01b      	beq.n	8003220 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f06f 0210 	mvn.w	r2, #16
 80031f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2208      	movs	r2, #8
 80031f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f926 	bl	8003458 <HAL_TIM_IC_CaptureCallback>
 800320c:	e005      	b.n	800321a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 f919 	bl	8003446 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 f928 	bl	800346a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00c      	beq.n	8003244 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	2b00      	cmp	r3, #0
 8003232:	d007      	beq.n	8003244 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f06f 0201 	mvn.w	r2, #1
 800323c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f7fd fdfa 	bl	8000e38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00c      	beq.n	8003268 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003254:	2b00      	cmp	r3, #0
 8003256:	d007      	beq.n	8003268 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 fa7f 	bl	8003766 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00c      	beq.n	800328c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003278:	2b00      	cmp	r3, #0
 800327a:	d007      	beq.n	800328c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 f8f8 	bl	800347c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	f003 0320 	and.w	r3, r3, #32
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00c      	beq.n	80032b0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f003 0320 	and.w	r3, r3, #32
 800329c:	2b00      	cmp	r3, #0
 800329e:	d007      	beq.n	80032b0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f06f 0220 	mvn.w	r2, #32
 80032a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 fa52 	bl	8003754 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032b0:	bf00      	nop
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032c2:	2300      	movs	r3, #0
 80032c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d101      	bne.n	80032d4 <HAL_TIM_ConfigClockSource+0x1c>
 80032d0:	2302      	movs	r3, #2
 80032d2:	e0b4      	b.n	800343e <HAL_TIM_ConfigClockSource+0x186>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2202      	movs	r2, #2
 80032e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68ba      	ldr	r2, [r7, #8]
 8003302:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800330c:	d03e      	beq.n	800338c <HAL_TIM_ConfigClockSource+0xd4>
 800330e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003312:	f200 8087 	bhi.w	8003424 <HAL_TIM_ConfigClockSource+0x16c>
 8003316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800331a:	f000 8086 	beq.w	800342a <HAL_TIM_ConfigClockSource+0x172>
 800331e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003322:	d87f      	bhi.n	8003424 <HAL_TIM_ConfigClockSource+0x16c>
 8003324:	2b70      	cmp	r3, #112	; 0x70
 8003326:	d01a      	beq.n	800335e <HAL_TIM_ConfigClockSource+0xa6>
 8003328:	2b70      	cmp	r3, #112	; 0x70
 800332a:	d87b      	bhi.n	8003424 <HAL_TIM_ConfigClockSource+0x16c>
 800332c:	2b60      	cmp	r3, #96	; 0x60
 800332e:	d050      	beq.n	80033d2 <HAL_TIM_ConfigClockSource+0x11a>
 8003330:	2b60      	cmp	r3, #96	; 0x60
 8003332:	d877      	bhi.n	8003424 <HAL_TIM_ConfigClockSource+0x16c>
 8003334:	2b50      	cmp	r3, #80	; 0x50
 8003336:	d03c      	beq.n	80033b2 <HAL_TIM_ConfigClockSource+0xfa>
 8003338:	2b50      	cmp	r3, #80	; 0x50
 800333a:	d873      	bhi.n	8003424 <HAL_TIM_ConfigClockSource+0x16c>
 800333c:	2b40      	cmp	r3, #64	; 0x40
 800333e:	d058      	beq.n	80033f2 <HAL_TIM_ConfigClockSource+0x13a>
 8003340:	2b40      	cmp	r3, #64	; 0x40
 8003342:	d86f      	bhi.n	8003424 <HAL_TIM_ConfigClockSource+0x16c>
 8003344:	2b30      	cmp	r3, #48	; 0x30
 8003346:	d064      	beq.n	8003412 <HAL_TIM_ConfigClockSource+0x15a>
 8003348:	2b30      	cmp	r3, #48	; 0x30
 800334a:	d86b      	bhi.n	8003424 <HAL_TIM_ConfigClockSource+0x16c>
 800334c:	2b20      	cmp	r3, #32
 800334e:	d060      	beq.n	8003412 <HAL_TIM_ConfigClockSource+0x15a>
 8003350:	2b20      	cmp	r3, #32
 8003352:	d867      	bhi.n	8003424 <HAL_TIM_ConfigClockSource+0x16c>
 8003354:	2b00      	cmp	r3, #0
 8003356:	d05c      	beq.n	8003412 <HAL_TIM_ConfigClockSource+0x15a>
 8003358:	2b10      	cmp	r3, #16
 800335a:	d05a      	beq.n	8003412 <HAL_TIM_ConfigClockSource+0x15a>
 800335c:	e062      	b.n	8003424 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6818      	ldr	r0, [r3, #0]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	6899      	ldr	r1, [r3, #8]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	f000 f974 	bl	800365a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003380:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68ba      	ldr	r2, [r7, #8]
 8003388:	609a      	str	r2, [r3, #8]
      break;
 800338a:	e04f      	b.n	800342c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6818      	ldr	r0, [r3, #0]
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	6899      	ldr	r1, [r3, #8]
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	f000 f95d 	bl	800365a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689a      	ldr	r2, [r3, #8]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033ae:	609a      	str	r2, [r3, #8]
      break;
 80033b0:	e03c      	b.n	800342c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6818      	ldr	r0, [r3, #0]
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	6859      	ldr	r1, [r3, #4]
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	461a      	mov	r2, r3
 80033c0:	f000 f8d4 	bl	800356c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2150      	movs	r1, #80	; 0x50
 80033ca:	4618      	mov	r0, r3
 80033cc:	f000 f92b 	bl	8003626 <TIM_ITRx_SetConfig>
      break;
 80033d0:	e02c      	b.n	800342c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6818      	ldr	r0, [r3, #0]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	6859      	ldr	r1, [r3, #4]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	461a      	mov	r2, r3
 80033e0:	f000 f8f2 	bl	80035c8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2160      	movs	r1, #96	; 0x60
 80033ea:	4618      	mov	r0, r3
 80033ec:	f000 f91b 	bl	8003626 <TIM_ITRx_SetConfig>
      break;
 80033f0:	e01c      	b.n	800342c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6818      	ldr	r0, [r3, #0]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	6859      	ldr	r1, [r3, #4]
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	461a      	mov	r2, r3
 8003400:	f000 f8b4 	bl	800356c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2140      	movs	r1, #64	; 0x40
 800340a:	4618      	mov	r0, r3
 800340c:	f000 f90b 	bl	8003626 <TIM_ITRx_SetConfig>
      break;
 8003410:	e00c      	b.n	800342c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4619      	mov	r1, r3
 800341c:	4610      	mov	r0, r2
 800341e:	f000 f902 	bl	8003626 <TIM_ITRx_SetConfig>
      break;
 8003422:	e003      	b.n	800342c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	73fb      	strb	r3, [r7, #15]
      break;
 8003428:	e000      	b.n	800342c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800342a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800343c:	7bfb      	ldrb	r3, [r7, #15]
}
 800343e:	4618      	mov	r0, r3
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003446:	b480      	push	{r7}
 8003448:	b083      	sub	sp, #12
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	bc80      	pop	{r7}
 8003456:	4770      	bx	lr

08003458 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	bc80      	pop	{r7}
 8003468:	4770      	bx	lr

0800346a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800346a:	b480      	push	{r7}
 800346c:	b083      	sub	sp, #12
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003472:	bf00      	nop
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	bc80      	pop	{r7}
 800347a:	4770      	bx	lr

0800347c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	bc80      	pop	{r7}
 800348c:	4770      	bx	lr
	...

08003490 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a2f      	ldr	r2, [pc, #188]	; (8003560 <TIM_Base_SetConfig+0xd0>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d00b      	beq.n	80034c0 <TIM_Base_SetConfig+0x30>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ae:	d007      	beq.n	80034c0 <TIM_Base_SetConfig+0x30>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a2c      	ldr	r2, [pc, #176]	; (8003564 <TIM_Base_SetConfig+0xd4>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d003      	beq.n	80034c0 <TIM_Base_SetConfig+0x30>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a2b      	ldr	r2, [pc, #172]	; (8003568 <TIM_Base_SetConfig+0xd8>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d108      	bne.n	80034d2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a22      	ldr	r2, [pc, #136]	; (8003560 <TIM_Base_SetConfig+0xd0>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d00b      	beq.n	80034f2 <TIM_Base_SetConfig+0x62>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e0:	d007      	beq.n	80034f2 <TIM_Base_SetConfig+0x62>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a1f      	ldr	r2, [pc, #124]	; (8003564 <TIM_Base_SetConfig+0xd4>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d003      	beq.n	80034f2 <TIM_Base_SetConfig+0x62>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a1e      	ldr	r2, [pc, #120]	; (8003568 <TIM_Base_SetConfig+0xd8>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d108      	bne.n	8003504 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	4313      	orrs	r3, r2
 8003502:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	4313      	orrs	r3, r2
 8003510:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	689a      	ldr	r2, [r3, #8]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a0d      	ldr	r2, [pc, #52]	; (8003560 <TIM_Base_SetConfig+0xd0>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d103      	bne.n	8003538 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	691a      	ldr	r2, [r3, #16]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d005      	beq.n	8003556 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	f023 0201 	bic.w	r2, r3, #1
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	611a      	str	r2, [r3, #16]
  }
}
 8003556:	bf00      	nop
 8003558:	3714      	adds	r7, #20
 800355a:	46bd      	mov	sp, r7
 800355c:	bc80      	pop	{r7}
 800355e:	4770      	bx	lr
 8003560:	40012c00 	.word	0x40012c00
 8003564:	40000400 	.word	0x40000400
 8003568:	40000800 	.word	0x40000800

0800356c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800356c:	b480      	push	{r7}
 800356e:	b087      	sub	sp, #28
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	f023 0201 	bic.w	r2, r3, #1
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003596:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	011b      	lsls	r3, r3, #4
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	4313      	orrs	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	f023 030a 	bic.w	r3, r3, #10
 80035a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	621a      	str	r2, [r3, #32]
}
 80035be:	bf00      	nop
 80035c0:	371c      	adds	r7, #28
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bc80      	pop	{r7}
 80035c6:	4770      	bx	lr

080035c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b087      	sub	sp, #28
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	f023 0210 	bic.w	r2, r3, #16
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	031b      	lsls	r3, r3, #12
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003604:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	4313      	orrs	r3, r2
 800360e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	697a      	ldr	r2, [r7, #20]
 800361a:	621a      	str	r2, [r3, #32]
}
 800361c:	bf00      	nop
 800361e:	371c      	adds	r7, #28
 8003620:	46bd      	mov	sp, r7
 8003622:	bc80      	pop	{r7}
 8003624:	4770      	bx	lr

08003626 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003626:	b480      	push	{r7}
 8003628:	b085      	sub	sp, #20
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
 800362e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800363c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	4313      	orrs	r3, r2
 8003644:	f043 0307 	orr.w	r3, r3, #7
 8003648:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	609a      	str	r2, [r3, #8]
}
 8003650:	bf00      	nop
 8003652:	3714      	adds	r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	bc80      	pop	{r7}
 8003658:	4770      	bx	lr

0800365a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800365a:	b480      	push	{r7}
 800365c:	b087      	sub	sp, #28
 800365e:	af00      	add	r7, sp, #0
 8003660:	60f8      	str	r0, [r7, #12]
 8003662:	60b9      	str	r1, [r7, #8]
 8003664:	607a      	str	r2, [r7, #4]
 8003666:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003674:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	021a      	lsls	r2, r3, #8
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	431a      	orrs	r2, r3
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	4313      	orrs	r3, r2
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	4313      	orrs	r3, r2
 8003686:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	609a      	str	r2, [r3, #8]
}
 800368e:	bf00      	nop
 8003690:	371c      	adds	r7, #28
 8003692:	46bd      	mov	sp, r7
 8003694:	bc80      	pop	{r7}
 8003696:	4770      	bx	lr

08003698 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d101      	bne.n	80036b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036ac:	2302      	movs	r3, #2
 80036ae:	e046      	b.n	800373e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2202      	movs	r2, #2
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	4313      	orrs	r3, r2
 80036e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a16      	ldr	r2, [pc, #88]	; (8003748 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d00e      	beq.n	8003712 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036fc:	d009      	beq.n	8003712 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a12      	ldr	r2, [pc, #72]	; (800374c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d004      	beq.n	8003712 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a10      	ldr	r2, [pc, #64]	; (8003750 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d10c      	bne.n	800372c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003718:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	4313      	orrs	r3, r2
 8003722:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68ba      	ldr	r2, [r7, #8]
 800372a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3714      	adds	r7, #20
 8003742:	46bd      	mov	sp, r7
 8003744:	bc80      	pop	{r7}
 8003746:	4770      	bx	lr
 8003748:	40012c00 	.word	0x40012c00
 800374c:	40000400 	.word	0x40000400
 8003750:	40000800 	.word	0x40000800

08003754 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	bc80      	pop	{r7}
 8003764:	4770      	bx	lr

08003766 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003766:	b480      	push	{r7}
 8003768:	b083      	sub	sp, #12
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800376e:	bf00      	nop
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	bc80      	pop	{r7}
 8003776:	4770      	bx	lr

08003778 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e042      	b.n	8003810 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d106      	bne.n	80037a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7fd fd66 	bl	8001270 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2224      	movs	r2, #36	; 0x24
 80037a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68da      	ldr	r2, [r3, #12]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 f82b 	bl	8003818 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	691a      	ldr	r2, [r3, #16]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695a      	ldr	r2, [r3, #20]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68da      	ldr	r2, [r3, #12]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2220      	movs	r2, #32
 80037fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2220      	movs	r2, #32
 8003804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	430a      	orrs	r2, r1
 8003834:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689a      	ldr	r2, [r3, #8]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	431a      	orrs	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	4313      	orrs	r3, r2
 8003846:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003852:	f023 030c 	bic.w	r3, r3, #12
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6812      	ldr	r2, [r2, #0]
 800385a:	68b9      	ldr	r1, [r7, #8]
 800385c:	430b      	orrs	r3, r1
 800385e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	699a      	ldr	r2, [r3, #24]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	430a      	orrs	r2, r1
 8003874:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a2c      	ldr	r2, [pc, #176]	; (800392c <UART_SetConfig+0x114>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d103      	bne.n	8003888 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003880:	f7ff fb56 	bl	8002f30 <HAL_RCC_GetPCLK2Freq>
 8003884:	60f8      	str	r0, [r7, #12]
 8003886:	e002      	b.n	800388e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003888:	f7ff fb3e 	bl	8002f08 <HAL_RCC_GetPCLK1Freq>
 800388c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	4613      	mov	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4413      	add	r3, r2
 8003896:	009a      	lsls	r2, r3, #2
 8003898:	441a      	add	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a4:	4a22      	ldr	r2, [pc, #136]	; (8003930 <UART_SetConfig+0x118>)
 80038a6:	fba2 2303 	umull	r2, r3, r2, r3
 80038aa:	095b      	lsrs	r3, r3, #5
 80038ac:	0119      	lsls	r1, r3, #4
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	4613      	mov	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4413      	add	r3, r2
 80038b6:	009a      	lsls	r2, r3, #2
 80038b8:	441a      	add	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80038c4:	4b1a      	ldr	r3, [pc, #104]	; (8003930 <UART_SetConfig+0x118>)
 80038c6:	fba3 0302 	umull	r0, r3, r3, r2
 80038ca:	095b      	lsrs	r3, r3, #5
 80038cc:	2064      	movs	r0, #100	; 0x64
 80038ce:	fb00 f303 	mul.w	r3, r0, r3
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	011b      	lsls	r3, r3, #4
 80038d6:	3332      	adds	r3, #50	; 0x32
 80038d8:	4a15      	ldr	r2, [pc, #84]	; (8003930 <UART_SetConfig+0x118>)
 80038da:	fba2 2303 	umull	r2, r3, r2, r3
 80038de:	095b      	lsrs	r3, r3, #5
 80038e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038e4:	4419      	add	r1, r3
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	4613      	mov	r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	4413      	add	r3, r2
 80038ee:	009a      	lsls	r2, r3, #2
 80038f0:	441a      	add	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80038fc:	4b0c      	ldr	r3, [pc, #48]	; (8003930 <UART_SetConfig+0x118>)
 80038fe:	fba3 0302 	umull	r0, r3, r3, r2
 8003902:	095b      	lsrs	r3, r3, #5
 8003904:	2064      	movs	r0, #100	; 0x64
 8003906:	fb00 f303 	mul.w	r3, r0, r3
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	011b      	lsls	r3, r3, #4
 800390e:	3332      	adds	r3, #50	; 0x32
 8003910:	4a07      	ldr	r2, [pc, #28]	; (8003930 <UART_SetConfig+0x118>)
 8003912:	fba2 2303 	umull	r2, r3, r2, r3
 8003916:	095b      	lsrs	r3, r3, #5
 8003918:	f003 020f 	and.w	r2, r3, #15
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	440a      	add	r2, r1
 8003922:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003924:	bf00      	nop
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	40013800 	.word	0x40013800
 8003930:	51eb851f 	.word	0x51eb851f

08003934 <__errno>:
 8003934:	4b01      	ldr	r3, [pc, #4]	; (800393c <__errno+0x8>)
 8003936:	6818      	ldr	r0, [r3, #0]
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	20000060 	.word	0x20000060

08003940 <__libc_init_array>:
 8003940:	b570      	push	{r4, r5, r6, lr}
 8003942:	2600      	movs	r6, #0
 8003944:	4d0c      	ldr	r5, [pc, #48]	; (8003978 <__libc_init_array+0x38>)
 8003946:	4c0d      	ldr	r4, [pc, #52]	; (800397c <__libc_init_array+0x3c>)
 8003948:	1b64      	subs	r4, r4, r5
 800394a:	10a4      	asrs	r4, r4, #2
 800394c:	42a6      	cmp	r6, r4
 800394e:	d109      	bne.n	8003964 <__libc_init_array+0x24>
 8003950:	f000 fc6c 	bl	800422c <_init>
 8003954:	2600      	movs	r6, #0
 8003956:	4d0a      	ldr	r5, [pc, #40]	; (8003980 <__libc_init_array+0x40>)
 8003958:	4c0a      	ldr	r4, [pc, #40]	; (8003984 <__libc_init_array+0x44>)
 800395a:	1b64      	subs	r4, r4, r5
 800395c:	10a4      	asrs	r4, r4, #2
 800395e:	42a6      	cmp	r6, r4
 8003960:	d105      	bne.n	800396e <__libc_init_array+0x2e>
 8003962:	bd70      	pop	{r4, r5, r6, pc}
 8003964:	f855 3b04 	ldr.w	r3, [r5], #4
 8003968:	4798      	blx	r3
 800396a:	3601      	adds	r6, #1
 800396c:	e7ee      	b.n	800394c <__libc_init_array+0xc>
 800396e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003972:	4798      	blx	r3
 8003974:	3601      	adds	r6, #1
 8003976:	e7f2      	b.n	800395e <__libc_init_array+0x1e>
 8003978:	080042a8 	.word	0x080042a8
 800397c:	080042a8 	.word	0x080042a8
 8003980:	080042a8 	.word	0x080042a8
 8003984:	080042ac 	.word	0x080042ac

08003988 <malloc>:
 8003988:	4b02      	ldr	r3, [pc, #8]	; (8003994 <malloc+0xc>)
 800398a:	4601      	mov	r1, r0
 800398c:	6818      	ldr	r0, [r3, #0]
 800398e:	f000 b85f 	b.w	8003a50 <_malloc_r>
 8003992:	bf00      	nop
 8003994:	20000060 	.word	0x20000060

08003998 <free>:
 8003998:	4b02      	ldr	r3, [pc, #8]	; (80039a4 <free+0xc>)
 800399a:	4601      	mov	r1, r0
 800399c:	6818      	ldr	r0, [r3, #0]
 800399e:	f000 b80b 	b.w	80039b8 <_free_r>
 80039a2:	bf00      	nop
 80039a4:	20000060 	.word	0x20000060

080039a8 <memset>:
 80039a8:	4603      	mov	r3, r0
 80039aa:	4402      	add	r2, r0
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d100      	bne.n	80039b2 <memset+0xa>
 80039b0:	4770      	bx	lr
 80039b2:	f803 1b01 	strb.w	r1, [r3], #1
 80039b6:	e7f9      	b.n	80039ac <memset+0x4>

080039b8 <_free_r>:
 80039b8:	b538      	push	{r3, r4, r5, lr}
 80039ba:	4605      	mov	r5, r0
 80039bc:	2900      	cmp	r1, #0
 80039be:	d043      	beq.n	8003a48 <_free_r+0x90>
 80039c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039c4:	1f0c      	subs	r4, r1, #4
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	bfb8      	it	lt
 80039ca:	18e4      	addlt	r4, r4, r3
 80039cc:	f000 f8ca 	bl	8003b64 <__malloc_lock>
 80039d0:	4a1e      	ldr	r2, [pc, #120]	; (8003a4c <_free_r+0x94>)
 80039d2:	6813      	ldr	r3, [r2, #0]
 80039d4:	4610      	mov	r0, r2
 80039d6:	b933      	cbnz	r3, 80039e6 <_free_r+0x2e>
 80039d8:	6063      	str	r3, [r4, #4]
 80039da:	6014      	str	r4, [r2, #0]
 80039dc:	4628      	mov	r0, r5
 80039de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039e2:	f000 b8c5 	b.w	8003b70 <__malloc_unlock>
 80039e6:	42a3      	cmp	r3, r4
 80039e8:	d90a      	bls.n	8003a00 <_free_r+0x48>
 80039ea:	6821      	ldr	r1, [r4, #0]
 80039ec:	1862      	adds	r2, r4, r1
 80039ee:	4293      	cmp	r3, r2
 80039f0:	bf01      	itttt	eq
 80039f2:	681a      	ldreq	r2, [r3, #0]
 80039f4:	685b      	ldreq	r3, [r3, #4]
 80039f6:	1852      	addeq	r2, r2, r1
 80039f8:	6022      	streq	r2, [r4, #0]
 80039fa:	6063      	str	r3, [r4, #4]
 80039fc:	6004      	str	r4, [r0, #0]
 80039fe:	e7ed      	b.n	80039dc <_free_r+0x24>
 8003a00:	461a      	mov	r2, r3
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	b10b      	cbz	r3, 8003a0a <_free_r+0x52>
 8003a06:	42a3      	cmp	r3, r4
 8003a08:	d9fa      	bls.n	8003a00 <_free_r+0x48>
 8003a0a:	6811      	ldr	r1, [r2, #0]
 8003a0c:	1850      	adds	r0, r2, r1
 8003a0e:	42a0      	cmp	r0, r4
 8003a10:	d10b      	bne.n	8003a2a <_free_r+0x72>
 8003a12:	6820      	ldr	r0, [r4, #0]
 8003a14:	4401      	add	r1, r0
 8003a16:	1850      	adds	r0, r2, r1
 8003a18:	4283      	cmp	r3, r0
 8003a1a:	6011      	str	r1, [r2, #0]
 8003a1c:	d1de      	bne.n	80039dc <_free_r+0x24>
 8003a1e:	6818      	ldr	r0, [r3, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	4401      	add	r1, r0
 8003a24:	6011      	str	r1, [r2, #0]
 8003a26:	6053      	str	r3, [r2, #4]
 8003a28:	e7d8      	b.n	80039dc <_free_r+0x24>
 8003a2a:	d902      	bls.n	8003a32 <_free_r+0x7a>
 8003a2c:	230c      	movs	r3, #12
 8003a2e:	602b      	str	r3, [r5, #0]
 8003a30:	e7d4      	b.n	80039dc <_free_r+0x24>
 8003a32:	6820      	ldr	r0, [r4, #0]
 8003a34:	1821      	adds	r1, r4, r0
 8003a36:	428b      	cmp	r3, r1
 8003a38:	bf01      	itttt	eq
 8003a3a:	6819      	ldreq	r1, [r3, #0]
 8003a3c:	685b      	ldreq	r3, [r3, #4]
 8003a3e:	1809      	addeq	r1, r1, r0
 8003a40:	6021      	streq	r1, [r4, #0]
 8003a42:	6063      	str	r3, [r4, #4]
 8003a44:	6054      	str	r4, [r2, #4]
 8003a46:	e7c9      	b.n	80039dc <_free_r+0x24>
 8003a48:	bd38      	pop	{r3, r4, r5, pc}
 8003a4a:	bf00      	nop
 8003a4c:	20000100 	.word	0x20000100

08003a50 <_malloc_r>:
 8003a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a52:	1ccd      	adds	r5, r1, #3
 8003a54:	f025 0503 	bic.w	r5, r5, #3
 8003a58:	3508      	adds	r5, #8
 8003a5a:	2d0c      	cmp	r5, #12
 8003a5c:	bf38      	it	cc
 8003a5e:	250c      	movcc	r5, #12
 8003a60:	2d00      	cmp	r5, #0
 8003a62:	4606      	mov	r6, r0
 8003a64:	db01      	blt.n	8003a6a <_malloc_r+0x1a>
 8003a66:	42a9      	cmp	r1, r5
 8003a68:	d903      	bls.n	8003a72 <_malloc_r+0x22>
 8003a6a:	230c      	movs	r3, #12
 8003a6c:	6033      	str	r3, [r6, #0]
 8003a6e:	2000      	movs	r0, #0
 8003a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a72:	f000 f877 	bl	8003b64 <__malloc_lock>
 8003a76:	4921      	ldr	r1, [pc, #132]	; (8003afc <_malloc_r+0xac>)
 8003a78:	680a      	ldr	r2, [r1, #0]
 8003a7a:	4614      	mov	r4, r2
 8003a7c:	b99c      	cbnz	r4, 8003aa6 <_malloc_r+0x56>
 8003a7e:	4f20      	ldr	r7, [pc, #128]	; (8003b00 <_malloc_r+0xb0>)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	b923      	cbnz	r3, 8003a8e <_malloc_r+0x3e>
 8003a84:	4621      	mov	r1, r4
 8003a86:	4630      	mov	r0, r6
 8003a88:	f000 f83c 	bl	8003b04 <_sbrk_r>
 8003a8c:	6038      	str	r0, [r7, #0]
 8003a8e:	4629      	mov	r1, r5
 8003a90:	4630      	mov	r0, r6
 8003a92:	f000 f837 	bl	8003b04 <_sbrk_r>
 8003a96:	1c43      	adds	r3, r0, #1
 8003a98:	d123      	bne.n	8003ae2 <_malloc_r+0x92>
 8003a9a:	230c      	movs	r3, #12
 8003a9c:	4630      	mov	r0, r6
 8003a9e:	6033      	str	r3, [r6, #0]
 8003aa0:	f000 f866 	bl	8003b70 <__malloc_unlock>
 8003aa4:	e7e3      	b.n	8003a6e <_malloc_r+0x1e>
 8003aa6:	6823      	ldr	r3, [r4, #0]
 8003aa8:	1b5b      	subs	r3, r3, r5
 8003aaa:	d417      	bmi.n	8003adc <_malloc_r+0x8c>
 8003aac:	2b0b      	cmp	r3, #11
 8003aae:	d903      	bls.n	8003ab8 <_malloc_r+0x68>
 8003ab0:	6023      	str	r3, [r4, #0]
 8003ab2:	441c      	add	r4, r3
 8003ab4:	6025      	str	r5, [r4, #0]
 8003ab6:	e004      	b.n	8003ac2 <_malloc_r+0x72>
 8003ab8:	6863      	ldr	r3, [r4, #4]
 8003aba:	42a2      	cmp	r2, r4
 8003abc:	bf0c      	ite	eq
 8003abe:	600b      	streq	r3, [r1, #0]
 8003ac0:	6053      	strne	r3, [r2, #4]
 8003ac2:	4630      	mov	r0, r6
 8003ac4:	f000 f854 	bl	8003b70 <__malloc_unlock>
 8003ac8:	f104 000b 	add.w	r0, r4, #11
 8003acc:	1d23      	adds	r3, r4, #4
 8003ace:	f020 0007 	bic.w	r0, r0, #7
 8003ad2:	1ac2      	subs	r2, r0, r3
 8003ad4:	d0cc      	beq.n	8003a70 <_malloc_r+0x20>
 8003ad6:	1a1b      	subs	r3, r3, r0
 8003ad8:	50a3      	str	r3, [r4, r2]
 8003ada:	e7c9      	b.n	8003a70 <_malloc_r+0x20>
 8003adc:	4622      	mov	r2, r4
 8003ade:	6864      	ldr	r4, [r4, #4]
 8003ae0:	e7cc      	b.n	8003a7c <_malloc_r+0x2c>
 8003ae2:	1cc4      	adds	r4, r0, #3
 8003ae4:	f024 0403 	bic.w	r4, r4, #3
 8003ae8:	42a0      	cmp	r0, r4
 8003aea:	d0e3      	beq.n	8003ab4 <_malloc_r+0x64>
 8003aec:	1a21      	subs	r1, r4, r0
 8003aee:	4630      	mov	r0, r6
 8003af0:	f000 f808 	bl	8003b04 <_sbrk_r>
 8003af4:	3001      	adds	r0, #1
 8003af6:	d1dd      	bne.n	8003ab4 <_malloc_r+0x64>
 8003af8:	e7cf      	b.n	8003a9a <_malloc_r+0x4a>
 8003afa:	bf00      	nop
 8003afc:	20000100 	.word	0x20000100
 8003b00:	20000104 	.word	0x20000104

08003b04 <_sbrk_r>:
 8003b04:	b538      	push	{r3, r4, r5, lr}
 8003b06:	2300      	movs	r3, #0
 8003b08:	4d05      	ldr	r5, [pc, #20]	; (8003b20 <_sbrk_r+0x1c>)
 8003b0a:	4604      	mov	r4, r0
 8003b0c:	4608      	mov	r0, r1
 8003b0e:	602b      	str	r3, [r5, #0]
 8003b10:	f7fd fc26 	bl	8001360 <_sbrk>
 8003b14:	1c43      	adds	r3, r0, #1
 8003b16:	d102      	bne.n	8003b1e <_sbrk_r+0x1a>
 8003b18:	682b      	ldr	r3, [r5, #0]
 8003b1a:	b103      	cbz	r3, 8003b1e <_sbrk_r+0x1a>
 8003b1c:	6023      	str	r3, [r4, #0]
 8003b1e:	bd38      	pop	{r3, r4, r5, pc}
 8003b20:	2000020c 	.word	0x2000020c

08003b24 <siprintf>:
 8003b24:	b40e      	push	{r1, r2, r3}
 8003b26:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003b2a:	b500      	push	{lr}
 8003b2c:	b09c      	sub	sp, #112	; 0x70
 8003b2e:	ab1d      	add	r3, sp, #116	; 0x74
 8003b30:	9002      	str	r0, [sp, #8]
 8003b32:	9006      	str	r0, [sp, #24]
 8003b34:	9107      	str	r1, [sp, #28]
 8003b36:	9104      	str	r1, [sp, #16]
 8003b38:	4808      	ldr	r0, [pc, #32]	; (8003b5c <siprintf+0x38>)
 8003b3a:	4909      	ldr	r1, [pc, #36]	; (8003b60 <siprintf+0x3c>)
 8003b3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b40:	9105      	str	r1, [sp, #20]
 8003b42:	6800      	ldr	r0, [r0, #0]
 8003b44:	a902      	add	r1, sp, #8
 8003b46:	9301      	str	r3, [sp, #4]
 8003b48:	f000 f874 	bl	8003c34 <_svfiprintf_r>
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	9b02      	ldr	r3, [sp, #8]
 8003b50:	701a      	strb	r2, [r3, #0]
 8003b52:	b01c      	add	sp, #112	; 0x70
 8003b54:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b58:	b003      	add	sp, #12
 8003b5a:	4770      	bx	lr
 8003b5c:	20000060 	.word	0x20000060
 8003b60:	ffff0208 	.word	0xffff0208

08003b64 <__malloc_lock>:
 8003b64:	4801      	ldr	r0, [pc, #4]	; (8003b6c <__malloc_lock+0x8>)
 8003b66:	f000 bafb 	b.w	8004160 <__retarget_lock_acquire_recursive>
 8003b6a:	bf00      	nop
 8003b6c:	20000214 	.word	0x20000214

08003b70 <__malloc_unlock>:
 8003b70:	4801      	ldr	r0, [pc, #4]	; (8003b78 <__malloc_unlock+0x8>)
 8003b72:	f000 baf6 	b.w	8004162 <__retarget_lock_release_recursive>
 8003b76:	bf00      	nop
 8003b78:	20000214 	.word	0x20000214

08003b7c <__ssputs_r>:
 8003b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b80:	688e      	ldr	r6, [r1, #8]
 8003b82:	4682      	mov	sl, r0
 8003b84:	429e      	cmp	r6, r3
 8003b86:	460c      	mov	r4, r1
 8003b88:	4690      	mov	r8, r2
 8003b8a:	461f      	mov	r7, r3
 8003b8c:	d838      	bhi.n	8003c00 <__ssputs_r+0x84>
 8003b8e:	898a      	ldrh	r2, [r1, #12]
 8003b90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003b94:	d032      	beq.n	8003bfc <__ssputs_r+0x80>
 8003b96:	6825      	ldr	r5, [r4, #0]
 8003b98:	6909      	ldr	r1, [r1, #16]
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	eba5 0901 	sub.w	r9, r5, r1
 8003ba0:	6965      	ldr	r5, [r4, #20]
 8003ba2:	444b      	add	r3, r9
 8003ba4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ba8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003bac:	106d      	asrs	r5, r5, #1
 8003bae:	429d      	cmp	r5, r3
 8003bb0:	bf38      	it	cc
 8003bb2:	461d      	movcc	r5, r3
 8003bb4:	0553      	lsls	r3, r2, #21
 8003bb6:	d531      	bpl.n	8003c1c <__ssputs_r+0xa0>
 8003bb8:	4629      	mov	r1, r5
 8003bba:	f7ff ff49 	bl	8003a50 <_malloc_r>
 8003bbe:	4606      	mov	r6, r0
 8003bc0:	b950      	cbnz	r0, 8003bd8 <__ssputs_r+0x5c>
 8003bc2:	230c      	movs	r3, #12
 8003bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc8:	f8ca 3000 	str.w	r3, [sl]
 8003bcc:	89a3      	ldrh	r3, [r4, #12]
 8003bce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bd2:	81a3      	strh	r3, [r4, #12]
 8003bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bd8:	464a      	mov	r2, r9
 8003bda:	6921      	ldr	r1, [r4, #16]
 8003bdc:	f000 fad0 	bl	8004180 <memcpy>
 8003be0:	89a3      	ldrh	r3, [r4, #12]
 8003be2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003be6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bea:	81a3      	strh	r3, [r4, #12]
 8003bec:	6126      	str	r6, [r4, #16]
 8003bee:	444e      	add	r6, r9
 8003bf0:	6026      	str	r6, [r4, #0]
 8003bf2:	463e      	mov	r6, r7
 8003bf4:	6165      	str	r5, [r4, #20]
 8003bf6:	eba5 0509 	sub.w	r5, r5, r9
 8003bfa:	60a5      	str	r5, [r4, #8]
 8003bfc:	42be      	cmp	r6, r7
 8003bfe:	d900      	bls.n	8003c02 <__ssputs_r+0x86>
 8003c00:	463e      	mov	r6, r7
 8003c02:	4632      	mov	r2, r6
 8003c04:	4641      	mov	r1, r8
 8003c06:	6820      	ldr	r0, [r4, #0]
 8003c08:	f000 fac8 	bl	800419c <memmove>
 8003c0c:	68a3      	ldr	r3, [r4, #8]
 8003c0e:	6822      	ldr	r2, [r4, #0]
 8003c10:	1b9b      	subs	r3, r3, r6
 8003c12:	4432      	add	r2, r6
 8003c14:	2000      	movs	r0, #0
 8003c16:	60a3      	str	r3, [r4, #8]
 8003c18:	6022      	str	r2, [r4, #0]
 8003c1a:	e7db      	b.n	8003bd4 <__ssputs_r+0x58>
 8003c1c:	462a      	mov	r2, r5
 8003c1e:	f000 fad7 	bl	80041d0 <_realloc_r>
 8003c22:	4606      	mov	r6, r0
 8003c24:	2800      	cmp	r0, #0
 8003c26:	d1e1      	bne.n	8003bec <__ssputs_r+0x70>
 8003c28:	4650      	mov	r0, sl
 8003c2a:	6921      	ldr	r1, [r4, #16]
 8003c2c:	f7ff fec4 	bl	80039b8 <_free_r>
 8003c30:	e7c7      	b.n	8003bc2 <__ssputs_r+0x46>
	...

08003c34 <_svfiprintf_r>:
 8003c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c38:	4698      	mov	r8, r3
 8003c3a:	898b      	ldrh	r3, [r1, #12]
 8003c3c:	4607      	mov	r7, r0
 8003c3e:	061b      	lsls	r3, r3, #24
 8003c40:	460d      	mov	r5, r1
 8003c42:	4614      	mov	r4, r2
 8003c44:	b09d      	sub	sp, #116	; 0x74
 8003c46:	d50e      	bpl.n	8003c66 <_svfiprintf_r+0x32>
 8003c48:	690b      	ldr	r3, [r1, #16]
 8003c4a:	b963      	cbnz	r3, 8003c66 <_svfiprintf_r+0x32>
 8003c4c:	2140      	movs	r1, #64	; 0x40
 8003c4e:	f7ff feff 	bl	8003a50 <_malloc_r>
 8003c52:	6028      	str	r0, [r5, #0]
 8003c54:	6128      	str	r0, [r5, #16]
 8003c56:	b920      	cbnz	r0, 8003c62 <_svfiprintf_r+0x2e>
 8003c58:	230c      	movs	r3, #12
 8003c5a:	603b      	str	r3, [r7, #0]
 8003c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c60:	e0d1      	b.n	8003e06 <_svfiprintf_r+0x1d2>
 8003c62:	2340      	movs	r3, #64	; 0x40
 8003c64:	616b      	str	r3, [r5, #20]
 8003c66:	2300      	movs	r3, #0
 8003c68:	9309      	str	r3, [sp, #36]	; 0x24
 8003c6a:	2320      	movs	r3, #32
 8003c6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c70:	2330      	movs	r3, #48	; 0x30
 8003c72:	f04f 0901 	mov.w	r9, #1
 8003c76:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c7a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003e20 <_svfiprintf_r+0x1ec>
 8003c7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c82:	4623      	mov	r3, r4
 8003c84:	469a      	mov	sl, r3
 8003c86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c8a:	b10a      	cbz	r2, 8003c90 <_svfiprintf_r+0x5c>
 8003c8c:	2a25      	cmp	r2, #37	; 0x25
 8003c8e:	d1f9      	bne.n	8003c84 <_svfiprintf_r+0x50>
 8003c90:	ebba 0b04 	subs.w	fp, sl, r4
 8003c94:	d00b      	beq.n	8003cae <_svfiprintf_r+0x7a>
 8003c96:	465b      	mov	r3, fp
 8003c98:	4622      	mov	r2, r4
 8003c9a:	4629      	mov	r1, r5
 8003c9c:	4638      	mov	r0, r7
 8003c9e:	f7ff ff6d 	bl	8003b7c <__ssputs_r>
 8003ca2:	3001      	adds	r0, #1
 8003ca4:	f000 80aa 	beq.w	8003dfc <_svfiprintf_r+0x1c8>
 8003ca8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003caa:	445a      	add	r2, fp
 8003cac:	9209      	str	r2, [sp, #36]	; 0x24
 8003cae:	f89a 3000 	ldrb.w	r3, [sl]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f000 80a2 	beq.w	8003dfc <_svfiprintf_r+0x1c8>
 8003cb8:	2300      	movs	r3, #0
 8003cba:	f04f 32ff 	mov.w	r2, #4294967295
 8003cbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003cc2:	f10a 0a01 	add.w	sl, sl, #1
 8003cc6:	9304      	str	r3, [sp, #16]
 8003cc8:	9307      	str	r3, [sp, #28]
 8003cca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003cce:	931a      	str	r3, [sp, #104]	; 0x68
 8003cd0:	4654      	mov	r4, sl
 8003cd2:	2205      	movs	r2, #5
 8003cd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cd8:	4851      	ldr	r0, [pc, #324]	; (8003e20 <_svfiprintf_r+0x1ec>)
 8003cda:	f000 fa43 	bl	8004164 <memchr>
 8003cde:	9a04      	ldr	r2, [sp, #16]
 8003ce0:	b9d8      	cbnz	r0, 8003d1a <_svfiprintf_r+0xe6>
 8003ce2:	06d0      	lsls	r0, r2, #27
 8003ce4:	bf44      	itt	mi
 8003ce6:	2320      	movmi	r3, #32
 8003ce8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003cec:	0711      	lsls	r1, r2, #28
 8003cee:	bf44      	itt	mi
 8003cf0:	232b      	movmi	r3, #43	; 0x2b
 8003cf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003cf6:	f89a 3000 	ldrb.w	r3, [sl]
 8003cfa:	2b2a      	cmp	r3, #42	; 0x2a
 8003cfc:	d015      	beq.n	8003d2a <_svfiprintf_r+0xf6>
 8003cfe:	4654      	mov	r4, sl
 8003d00:	2000      	movs	r0, #0
 8003d02:	f04f 0c0a 	mov.w	ip, #10
 8003d06:	9a07      	ldr	r2, [sp, #28]
 8003d08:	4621      	mov	r1, r4
 8003d0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d0e:	3b30      	subs	r3, #48	; 0x30
 8003d10:	2b09      	cmp	r3, #9
 8003d12:	d94e      	bls.n	8003db2 <_svfiprintf_r+0x17e>
 8003d14:	b1b0      	cbz	r0, 8003d44 <_svfiprintf_r+0x110>
 8003d16:	9207      	str	r2, [sp, #28]
 8003d18:	e014      	b.n	8003d44 <_svfiprintf_r+0x110>
 8003d1a:	eba0 0308 	sub.w	r3, r0, r8
 8003d1e:	fa09 f303 	lsl.w	r3, r9, r3
 8003d22:	4313      	orrs	r3, r2
 8003d24:	46a2      	mov	sl, r4
 8003d26:	9304      	str	r3, [sp, #16]
 8003d28:	e7d2      	b.n	8003cd0 <_svfiprintf_r+0x9c>
 8003d2a:	9b03      	ldr	r3, [sp, #12]
 8003d2c:	1d19      	adds	r1, r3, #4
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	9103      	str	r1, [sp, #12]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	bfbb      	ittet	lt
 8003d36:	425b      	neglt	r3, r3
 8003d38:	f042 0202 	orrlt.w	r2, r2, #2
 8003d3c:	9307      	strge	r3, [sp, #28]
 8003d3e:	9307      	strlt	r3, [sp, #28]
 8003d40:	bfb8      	it	lt
 8003d42:	9204      	strlt	r2, [sp, #16]
 8003d44:	7823      	ldrb	r3, [r4, #0]
 8003d46:	2b2e      	cmp	r3, #46	; 0x2e
 8003d48:	d10c      	bne.n	8003d64 <_svfiprintf_r+0x130>
 8003d4a:	7863      	ldrb	r3, [r4, #1]
 8003d4c:	2b2a      	cmp	r3, #42	; 0x2a
 8003d4e:	d135      	bne.n	8003dbc <_svfiprintf_r+0x188>
 8003d50:	9b03      	ldr	r3, [sp, #12]
 8003d52:	3402      	adds	r4, #2
 8003d54:	1d1a      	adds	r2, r3, #4
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	9203      	str	r2, [sp, #12]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	bfb8      	it	lt
 8003d5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d62:	9305      	str	r3, [sp, #20]
 8003d64:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003e30 <_svfiprintf_r+0x1fc>
 8003d68:	2203      	movs	r2, #3
 8003d6a:	4650      	mov	r0, sl
 8003d6c:	7821      	ldrb	r1, [r4, #0]
 8003d6e:	f000 f9f9 	bl	8004164 <memchr>
 8003d72:	b140      	cbz	r0, 8003d86 <_svfiprintf_r+0x152>
 8003d74:	2340      	movs	r3, #64	; 0x40
 8003d76:	eba0 000a 	sub.w	r0, r0, sl
 8003d7a:	fa03 f000 	lsl.w	r0, r3, r0
 8003d7e:	9b04      	ldr	r3, [sp, #16]
 8003d80:	3401      	adds	r4, #1
 8003d82:	4303      	orrs	r3, r0
 8003d84:	9304      	str	r3, [sp, #16]
 8003d86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d8a:	2206      	movs	r2, #6
 8003d8c:	4825      	ldr	r0, [pc, #148]	; (8003e24 <_svfiprintf_r+0x1f0>)
 8003d8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d92:	f000 f9e7 	bl	8004164 <memchr>
 8003d96:	2800      	cmp	r0, #0
 8003d98:	d038      	beq.n	8003e0c <_svfiprintf_r+0x1d8>
 8003d9a:	4b23      	ldr	r3, [pc, #140]	; (8003e28 <_svfiprintf_r+0x1f4>)
 8003d9c:	bb1b      	cbnz	r3, 8003de6 <_svfiprintf_r+0x1b2>
 8003d9e:	9b03      	ldr	r3, [sp, #12]
 8003da0:	3307      	adds	r3, #7
 8003da2:	f023 0307 	bic.w	r3, r3, #7
 8003da6:	3308      	adds	r3, #8
 8003da8:	9303      	str	r3, [sp, #12]
 8003daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dac:	4433      	add	r3, r6
 8003dae:	9309      	str	r3, [sp, #36]	; 0x24
 8003db0:	e767      	b.n	8003c82 <_svfiprintf_r+0x4e>
 8003db2:	460c      	mov	r4, r1
 8003db4:	2001      	movs	r0, #1
 8003db6:	fb0c 3202 	mla	r2, ip, r2, r3
 8003dba:	e7a5      	b.n	8003d08 <_svfiprintf_r+0xd4>
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	f04f 0c0a 	mov.w	ip, #10
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	3401      	adds	r4, #1
 8003dc6:	9305      	str	r3, [sp, #20]
 8003dc8:	4620      	mov	r0, r4
 8003dca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003dce:	3a30      	subs	r2, #48	; 0x30
 8003dd0:	2a09      	cmp	r2, #9
 8003dd2:	d903      	bls.n	8003ddc <_svfiprintf_r+0x1a8>
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d0c5      	beq.n	8003d64 <_svfiprintf_r+0x130>
 8003dd8:	9105      	str	r1, [sp, #20]
 8003dda:	e7c3      	b.n	8003d64 <_svfiprintf_r+0x130>
 8003ddc:	4604      	mov	r4, r0
 8003dde:	2301      	movs	r3, #1
 8003de0:	fb0c 2101 	mla	r1, ip, r1, r2
 8003de4:	e7f0      	b.n	8003dc8 <_svfiprintf_r+0x194>
 8003de6:	ab03      	add	r3, sp, #12
 8003de8:	9300      	str	r3, [sp, #0]
 8003dea:	462a      	mov	r2, r5
 8003dec:	4638      	mov	r0, r7
 8003dee:	4b0f      	ldr	r3, [pc, #60]	; (8003e2c <_svfiprintf_r+0x1f8>)
 8003df0:	a904      	add	r1, sp, #16
 8003df2:	f3af 8000 	nop.w
 8003df6:	1c42      	adds	r2, r0, #1
 8003df8:	4606      	mov	r6, r0
 8003dfa:	d1d6      	bne.n	8003daa <_svfiprintf_r+0x176>
 8003dfc:	89ab      	ldrh	r3, [r5, #12]
 8003dfe:	065b      	lsls	r3, r3, #25
 8003e00:	f53f af2c 	bmi.w	8003c5c <_svfiprintf_r+0x28>
 8003e04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e06:	b01d      	add	sp, #116	; 0x74
 8003e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e0c:	ab03      	add	r3, sp, #12
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	462a      	mov	r2, r5
 8003e12:	4638      	mov	r0, r7
 8003e14:	4b05      	ldr	r3, [pc, #20]	; (8003e2c <_svfiprintf_r+0x1f8>)
 8003e16:	a904      	add	r1, sp, #16
 8003e18:	f000 f87c 	bl	8003f14 <_printf_i>
 8003e1c:	e7eb      	b.n	8003df6 <_svfiprintf_r+0x1c2>
 8003e1e:	bf00      	nop
 8003e20:	08004272 	.word	0x08004272
 8003e24:	0800427c 	.word	0x0800427c
 8003e28:	00000000 	.word	0x00000000
 8003e2c:	08003b7d 	.word	0x08003b7d
 8003e30:	08004278 	.word	0x08004278

08003e34 <_printf_common>:
 8003e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e38:	4616      	mov	r6, r2
 8003e3a:	4699      	mov	r9, r3
 8003e3c:	688a      	ldr	r2, [r1, #8]
 8003e3e:	690b      	ldr	r3, [r1, #16]
 8003e40:	4607      	mov	r7, r0
 8003e42:	4293      	cmp	r3, r2
 8003e44:	bfb8      	it	lt
 8003e46:	4613      	movlt	r3, r2
 8003e48:	6033      	str	r3, [r6, #0]
 8003e4a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e4e:	460c      	mov	r4, r1
 8003e50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e54:	b10a      	cbz	r2, 8003e5a <_printf_common+0x26>
 8003e56:	3301      	adds	r3, #1
 8003e58:	6033      	str	r3, [r6, #0]
 8003e5a:	6823      	ldr	r3, [r4, #0]
 8003e5c:	0699      	lsls	r1, r3, #26
 8003e5e:	bf42      	ittt	mi
 8003e60:	6833      	ldrmi	r3, [r6, #0]
 8003e62:	3302      	addmi	r3, #2
 8003e64:	6033      	strmi	r3, [r6, #0]
 8003e66:	6825      	ldr	r5, [r4, #0]
 8003e68:	f015 0506 	ands.w	r5, r5, #6
 8003e6c:	d106      	bne.n	8003e7c <_printf_common+0x48>
 8003e6e:	f104 0a19 	add.w	sl, r4, #25
 8003e72:	68e3      	ldr	r3, [r4, #12]
 8003e74:	6832      	ldr	r2, [r6, #0]
 8003e76:	1a9b      	subs	r3, r3, r2
 8003e78:	42ab      	cmp	r3, r5
 8003e7a:	dc28      	bgt.n	8003ece <_printf_common+0x9a>
 8003e7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e80:	1e13      	subs	r3, r2, #0
 8003e82:	6822      	ldr	r2, [r4, #0]
 8003e84:	bf18      	it	ne
 8003e86:	2301      	movne	r3, #1
 8003e88:	0692      	lsls	r2, r2, #26
 8003e8a:	d42d      	bmi.n	8003ee8 <_printf_common+0xb4>
 8003e8c:	4649      	mov	r1, r9
 8003e8e:	4638      	mov	r0, r7
 8003e90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e94:	47c0      	blx	r8
 8003e96:	3001      	adds	r0, #1
 8003e98:	d020      	beq.n	8003edc <_printf_common+0xa8>
 8003e9a:	6823      	ldr	r3, [r4, #0]
 8003e9c:	68e5      	ldr	r5, [r4, #12]
 8003e9e:	f003 0306 	and.w	r3, r3, #6
 8003ea2:	2b04      	cmp	r3, #4
 8003ea4:	bf18      	it	ne
 8003ea6:	2500      	movne	r5, #0
 8003ea8:	6832      	ldr	r2, [r6, #0]
 8003eaa:	f04f 0600 	mov.w	r6, #0
 8003eae:	68a3      	ldr	r3, [r4, #8]
 8003eb0:	bf08      	it	eq
 8003eb2:	1aad      	subeq	r5, r5, r2
 8003eb4:	6922      	ldr	r2, [r4, #16]
 8003eb6:	bf08      	it	eq
 8003eb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	bfc4      	itt	gt
 8003ec0:	1a9b      	subgt	r3, r3, r2
 8003ec2:	18ed      	addgt	r5, r5, r3
 8003ec4:	341a      	adds	r4, #26
 8003ec6:	42b5      	cmp	r5, r6
 8003ec8:	d11a      	bne.n	8003f00 <_printf_common+0xcc>
 8003eca:	2000      	movs	r0, #0
 8003ecc:	e008      	b.n	8003ee0 <_printf_common+0xac>
 8003ece:	2301      	movs	r3, #1
 8003ed0:	4652      	mov	r2, sl
 8003ed2:	4649      	mov	r1, r9
 8003ed4:	4638      	mov	r0, r7
 8003ed6:	47c0      	blx	r8
 8003ed8:	3001      	adds	r0, #1
 8003eda:	d103      	bne.n	8003ee4 <_printf_common+0xb0>
 8003edc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ee4:	3501      	adds	r5, #1
 8003ee6:	e7c4      	b.n	8003e72 <_printf_common+0x3e>
 8003ee8:	2030      	movs	r0, #48	; 0x30
 8003eea:	18e1      	adds	r1, r4, r3
 8003eec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ef0:	1c5a      	adds	r2, r3, #1
 8003ef2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ef6:	4422      	add	r2, r4
 8003ef8:	3302      	adds	r3, #2
 8003efa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003efe:	e7c5      	b.n	8003e8c <_printf_common+0x58>
 8003f00:	2301      	movs	r3, #1
 8003f02:	4622      	mov	r2, r4
 8003f04:	4649      	mov	r1, r9
 8003f06:	4638      	mov	r0, r7
 8003f08:	47c0      	blx	r8
 8003f0a:	3001      	adds	r0, #1
 8003f0c:	d0e6      	beq.n	8003edc <_printf_common+0xa8>
 8003f0e:	3601      	adds	r6, #1
 8003f10:	e7d9      	b.n	8003ec6 <_printf_common+0x92>
	...

08003f14 <_printf_i>:
 8003f14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f18:	460c      	mov	r4, r1
 8003f1a:	7e27      	ldrb	r7, [r4, #24]
 8003f1c:	4691      	mov	r9, r2
 8003f1e:	2f78      	cmp	r7, #120	; 0x78
 8003f20:	4680      	mov	r8, r0
 8003f22:	469a      	mov	sl, r3
 8003f24:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003f26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f2a:	d807      	bhi.n	8003f3c <_printf_i+0x28>
 8003f2c:	2f62      	cmp	r7, #98	; 0x62
 8003f2e:	d80a      	bhi.n	8003f46 <_printf_i+0x32>
 8003f30:	2f00      	cmp	r7, #0
 8003f32:	f000 80d9 	beq.w	80040e8 <_printf_i+0x1d4>
 8003f36:	2f58      	cmp	r7, #88	; 0x58
 8003f38:	f000 80a4 	beq.w	8004084 <_printf_i+0x170>
 8003f3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003f40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f44:	e03a      	b.n	8003fbc <_printf_i+0xa8>
 8003f46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f4a:	2b15      	cmp	r3, #21
 8003f4c:	d8f6      	bhi.n	8003f3c <_printf_i+0x28>
 8003f4e:	a001      	add	r0, pc, #4	; (adr r0, 8003f54 <_printf_i+0x40>)
 8003f50:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003f54:	08003fad 	.word	0x08003fad
 8003f58:	08003fc1 	.word	0x08003fc1
 8003f5c:	08003f3d 	.word	0x08003f3d
 8003f60:	08003f3d 	.word	0x08003f3d
 8003f64:	08003f3d 	.word	0x08003f3d
 8003f68:	08003f3d 	.word	0x08003f3d
 8003f6c:	08003fc1 	.word	0x08003fc1
 8003f70:	08003f3d 	.word	0x08003f3d
 8003f74:	08003f3d 	.word	0x08003f3d
 8003f78:	08003f3d 	.word	0x08003f3d
 8003f7c:	08003f3d 	.word	0x08003f3d
 8003f80:	080040cf 	.word	0x080040cf
 8003f84:	08003ff1 	.word	0x08003ff1
 8003f88:	080040b1 	.word	0x080040b1
 8003f8c:	08003f3d 	.word	0x08003f3d
 8003f90:	08003f3d 	.word	0x08003f3d
 8003f94:	080040f1 	.word	0x080040f1
 8003f98:	08003f3d 	.word	0x08003f3d
 8003f9c:	08003ff1 	.word	0x08003ff1
 8003fa0:	08003f3d 	.word	0x08003f3d
 8003fa4:	08003f3d 	.word	0x08003f3d
 8003fa8:	080040b9 	.word	0x080040b9
 8003fac:	680b      	ldr	r3, [r1, #0]
 8003fae:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003fb2:	1d1a      	adds	r2, r3, #4
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	600a      	str	r2, [r1, #0]
 8003fb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e0a4      	b.n	800410a <_printf_i+0x1f6>
 8003fc0:	6825      	ldr	r5, [r4, #0]
 8003fc2:	6808      	ldr	r0, [r1, #0]
 8003fc4:	062e      	lsls	r6, r5, #24
 8003fc6:	f100 0304 	add.w	r3, r0, #4
 8003fca:	d50a      	bpl.n	8003fe2 <_printf_i+0xce>
 8003fcc:	6805      	ldr	r5, [r0, #0]
 8003fce:	600b      	str	r3, [r1, #0]
 8003fd0:	2d00      	cmp	r5, #0
 8003fd2:	da03      	bge.n	8003fdc <_printf_i+0xc8>
 8003fd4:	232d      	movs	r3, #45	; 0x2d
 8003fd6:	426d      	negs	r5, r5
 8003fd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fdc:	230a      	movs	r3, #10
 8003fde:	485e      	ldr	r0, [pc, #376]	; (8004158 <_printf_i+0x244>)
 8003fe0:	e019      	b.n	8004016 <_printf_i+0x102>
 8003fe2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003fe6:	6805      	ldr	r5, [r0, #0]
 8003fe8:	600b      	str	r3, [r1, #0]
 8003fea:	bf18      	it	ne
 8003fec:	b22d      	sxthne	r5, r5
 8003fee:	e7ef      	b.n	8003fd0 <_printf_i+0xbc>
 8003ff0:	680b      	ldr	r3, [r1, #0]
 8003ff2:	6825      	ldr	r5, [r4, #0]
 8003ff4:	1d18      	adds	r0, r3, #4
 8003ff6:	6008      	str	r0, [r1, #0]
 8003ff8:	0628      	lsls	r0, r5, #24
 8003ffa:	d501      	bpl.n	8004000 <_printf_i+0xec>
 8003ffc:	681d      	ldr	r5, [r3, #0]
 8003ffe:	e002      	b.n	8004006 <_printf_i+0xf2>
 8004000:	0669      	lsls	r1, r5, #25
 8004002:	d5fb      	bpl.n	8003ffc <_printf_i+0xe8>
 8004004:	881d      	ldrh	r5, [r3, #0]
 8004006:	2f6f      	cmp	r7, #111	; 0x6f
 8004008:	bf0c      	ite	eq
 800400a:	2308      	moveq	r3, #8
 800400c:	230a      	movne	r3, #10
 800400e:	4852      	ldr	r0, [pc, #328]	; (8004158 <_printf_i+0x244>)
 8004010:	2100      	movs	r1, #0
 8004012:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004016:	6866      	ldr	r6, [r4, #4]
 8004018:	2e00      	cmp	r6, #0
 800401a:	bfa8      	it	ge
 800401c:	6821      	ldrge	r1, [r4, #0]
 800401e:	60a6      	str	r6, [r4, #8]
 8004020:	bfa4      	itt	ge
 8004022:	f021 0104 	bicge.w	r1, r1, #4
 8004026:	6021      	strge	r1, [r4, #0]
 8004028:	b90d      	cbnz	r5, 800402e <_printf_i+0x11a>
 800402a:	2e00      	cmp	r6, #0
 800402c:	d04d      	beq.n	80040ca <_printf_i+0x1b6>
 800402e:	4616      	mov	r6, r2
 8004030:	fbb5 f1f3 	udiv	r1, r5, r3
 8004034:	fb03 5711 	mls	r7, r3, r1, r5
 8004038:	5dc7      	ldrb	r7, [r0, r7]
 800403a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800403e:	462f      	mov	r7, r5
 8004040:	42bb      	cmp	r3, r7
 8004042:	460d      	mov	r5, r1
 8004044:	d9f4      	bls.n	8004030 <_printf_i+0x11c>
 8004046:	2b08      	cmp	r3, #8
 8004048:	d10b      	bne.n	8004062 <_printf_i+0x14e>
 800404a:	6823      	ldr	r3, [r4, #0]
 800404c:	07df      	lsls	r7, r3, #31
 800404e:	d508      	bpl.n	8004062 <_printf_i+0x14e>
 8004050:	6923      	ldr	r3, [r4, #16]
 8004052:	6861      	ldr	r1, [r4, #4]
 8004054:	4299      	cmp	r1, r3
 8004056:	bfde      	ittt	le
 8004058:	2330      	movle	r3, #48	; 0x30
 800405a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800405e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004062:	1b92      	subs	r2, r2, r6
 8004064:	6122      	str	r2, [r4, #16]
 8004066:	464b      	mov	r3, r9
 8004068:	4621      	mov	r1, r4
 800406a:	4640      	mov	r0, r8
 800406c:	f8cd a000 	str.w	sl, [sp]
 8004070:	aa03      	add	r2, sp, #12
 8004072:	f7ff fedf 	bl	8003e34 <_printf_common>
 8004076:	3001      	adds	r0, #1
 8004078:	d14c      	bne.n	8004114 <_printf_i+0x200>
 800407a:	f04f 30ff 	mov.w	r0, #4294967295
 800407e:	b004      	add	sp, #16
 8004080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004084:	4834      	ldr	r0, [pc, #208]	; (8004158 <_printf_i+0x244>)
 8004086:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800408a:	680e      	ldr	r6, [r1, #0]
 800408c:	6823      	ldr	r3, [r4, #0]
 800408e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004092:	061f      	lsls	r7, r3, #24
 8004094:	600e      	str	r6, [r1, #0]
 8004096:	d514      	bpl.n	80040c2 <_printf_i+0x1ae>
 8004098:	07d9      	lsls	r1, r3, #31
 800409a:	bf44      	itt	mi
 800409c:	f043 0320 	orrmi.w	r3, r3, #32
 80040a0:	6023      	strmi	r3, [r4, #0]
 80040a2:	b91d      	cbnz	r5, 80040ac <_printf_i+0x198>
 80040a4:	6823      	ldr	r3, [r4, #0]
 80040a6:	f023 0320 	bic.w	r3, r3, #32
 80040aa:	6023      	str	r3, [r4, #0]
 80040ac:	2310      	movs	r3, #16
 80040ae:	e7af      	b.n	8004010 <_printf_i+0xfc>
 80040b0:	6823      	ldr	r3, [r4, #0]
 80040b2:	f043 0320 	orr.w	r3, r3, #32
 80040b6:	6023      	str	r3, [r4, #0]
 80040b8:	2378      	movs	r3, #120	; 0x78
 80040ba:	4828      	ldr	r0, [pc, #160]	; (800415c <_printf_i+0x248>)
 80040bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80040c0:	e7e3      	b.n	800408a <_printf_i+0x176>
 80040c2:	065e      	lsls	r6, r3, #25
 80040c4:	bf48      	it	mi
 80040c6:	b2ad      	uxthmi	r5, r5
 80040c8:	e7e6      	b.n	8004098 <_printf_i+0x184>
 80040ca:	4616      	mov	r6, r2
 80040cc:	e7bb      	b.n	8004046 <_printf_i+0x132>
 80040ce:	680b      	ldr	r3, [r1, #0]
 80040d0:	6826      	ldr	r6, [r4, #0]
 80040d2:	1d1d      	adds	r5, r3, #4
 80040d4:	6960      	ldr	r0, [r4, #20]
 80040d6:	600d      	str	r5, [r1, #0]
 80040d8:	0635      	lsls	r5, r6, #24
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	d501      	bpl.n	80040e2 <_printf_i+0x1ce>
 80040de:	6018      	str	r0, [r3, #0]
 80040e0:	e002      	b.n	80040e8 <_printf_i+0x1d4>
 80040e2:	0671      	lsls	r1, r6, #25
 80040e4:	d5fb      	bpl.n	80040de <_printf_i+0x1ca>
 80040e6:	8018      	strh	r0, [r3, #0]
 80040e8:	2300      	movs	r3, #0
 80040ea:	4616      	mov	r6, r2
 80040ec:	6123      	str	r3, [r4, #16]
 80040ee:	e7ba      	b.n	8004066 <_printf_i+0x152>
 80040f0:	680b      	ldr	r3, [r1, #0]
 80040f2:	1d1a      	adds	r2, r3, #4
 80040f4:	600a      	str	r2, [r1, #0]
 80040f6:	681e      	ldr	r6, [r3, #0]
 80040f8:	2100      	movs	r1, #0
 80040fa:	4630      	mov	r0, r6
 80040fc:	6862      	ldr	r2, [r4, #4]
 80040fe:	f000 f831 	bl	8004164 <memchr>
 8004102:	b108      	cbz	r0, 8004108 <_printf_i+0x1f4>
 8004104:	1b80      	subs	r0, r0, r6
 8004106:	6060      	str	r0, [r4, #4]
 8004108:	6863      	ldr	r3, [r4, #4]
 800410a:	6123      	str	r3, [r4, #16]
 800410c:	2300      	movs	r3, #0
 800410e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004112:	e7a8      	b.n	8004066 <_printf_i+0x152>
 8004114:	4632      	mov	r2, r6
 8004116:	4649      	mov	r1, r9
 8004118:	4640      	mov	r0, r8
 800411a:	6923      	ldr	r3, [r4, #16]
 800411c:	47d0      	blx	sl
 800411e:	3001      	adds	r0, #1
 8004120:	d0ab      	beq.n	800407a <_printf_i+0x166>
 8004122:	6823      	ldr	r3, [r4, #0]
 8004124:	079b      	lsls	r3, r3, #30
 8004126:	d413      	bmi.n	8004150 <_printf_i+0x23c>
 8004128:	68e0      	ldr	r0, [r4, #12]
 800412a:	9b03      	ldr	r3, [sp, #12]
 800412c:	4298      	cmp	r0, r3
 800412e:	bfb8      	it	lt
 8004130:	4618      	movlt	r0, r3
 8004132:	e7a4      	b.n	800407e <_printf_i+0x16a>
 8004134:	2301      	movs	r3, #1
 8004136:	4632      	mov	r2, r6
 8004138:	4649      	mov	r1, r9
 800413a:	4640      	mov	r0, r8
 800413c:	47d0      	blx	sl
 800413e:	3001      	adds	r0, #1
 8004140:	d09b      	beq.n	800407a <_printf_i+0x166>
 8004142:	3501      	adds	r5, #1
 8004144:	68e3      	ldr	r3, [r4, #12]
 8004146:	9903      	ldr	r1, [sp, #12]
 8004148:	1a5b      	subs	r3, r3, r1
 800414a:	42ab      	cmp	r3, r5
 800414c:	dcf2      	bgt.n	8004134 <_printf_i+0x220>
 800414e:	e7eb      	b.n	8004128 <_printf_i+0x214>
 8004150:	2500      	movs	r5, #0
 8004152:	f104 0619 	add.w	r6, r4, #25
 8004156:	e7f5      	b.n	8004144 <_printf_i+0x230>
 8004158:	08004283 	.word	0x08004283
 800415c:	08004294 	.word	0x08004294

08004160 <__retarget_lock_acquire_recursive>:
 8004160:	4770      	bx	lr

08004162 <__retarget_lock_release_recursive>:
 8004162:	4770      	bx	lr

08004164 <memchr>:
 8004164:	4603      	mov	r3, r0
 8004166:	b510      	push	{r4, lr}
 8004168:	b2c9      	uxtb	r1, r1
 800416a:	4402      	add	r2, r0
 800416c:	4293      	cmp	r3, r2
 800416e:	4618      	mov	r0, r3
 8004170:	d101      	bne.n	8004176 <memchr+0x12>
 8004172:	2000      	movs	r0, #0
 8004174:	e003      	b.n	800417e <memchr+0x1a>
 8004176:	7804      	ldrb	r4, [r0, #0]
 8004178:	3301      	adds	r3, #1
 800417a:	428c      	cmp	r4, r1
 800417c:	d1f6      	bne.n	800416c <memchr+0x8>
 800417e:	bd10      	pop	{r4, pc}

08004180 <memcpy>:
 8004180:	440a      	add	r2, r1
 8004182:	4291      	cmp	r1, r2
 8004184:	f100 33ff 	add.w	r3, r0, #4294967295
 8004188:	d100      	bne.n	800418c <memcpy+0xc>
 800418a:	4770      	bx	lr
 800418c:	b510      	push	{r4, lr}
 800418e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004192:	4291      	cmp	r1, r2
 8004194:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004198:	d1f9      	bne.n	800418e <memcpy+0xe>
 800419a:	bd10      	pop	{r4, pc}

0800419c <memmove>:
 800419c:	4288      	cmp	r0, r1
 800419e:	b510      	push	{r4, lr}
 80041a0:	eb01 0402 	add.w	r4, r1, r2
 80041a4:	d902      	bls.n	80041ac <memmove+0x10>
 80041a6:	4284      	cmp	r4, r0
 80041a8:	4623      	mov	r3, r4
 80041aa:	d807      	bhi.n	80041bc <memmove+0x20>
 80041ac:	1e43      	subs	r3, r0, #1
 80041ae:	42a1      	cmp	r1, r4
 80041b0:	d008      	beq.n	80041c4 <memmove+0x28>
 80041b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80041ba:	e7f8      	b.n	80041ae <memmove+0x12>
 80041bc:	4601      	mov	r1, r0
 80041be:	4402      	add	r2, r0
 80041c0:	428a      	cmp	r2, r1
 80041c2:	d100      	bne.n	80041c6 <memmove+0x2a>
 80041c4:	bd10      	pop	{r4, pc}
 80041c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80041ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80041ce:	e7f7      	b.n	80041c0 <memmove+0x24>

080041d0 <_realloc_r>:
 80041d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041d2:	4607      	mov	r7, r0
 80041d4:	4614      	mov	r4, r2
 80041d6:	460e      	mov	r6, r1
 80041d8:	b921      	cbnz	r1, 80041e4 <_realloc_r+0x14>
 80041da:	4611      	mov	r1, r2
 80041dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80041e0:	f7ff bc36 	b.w	8003a50 <_malloc_r>
 80041e4:	b922      	cbnz	r2, 80041f0 <_realloc_r+0x20>
 80041e6:	f7ff fbe7 	bl	80039b8 <_free_r>
 80041ea:	4625      	mov	r5, r4
 80041ec:	4628      	mov	r0, r5
 80041ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041f0:	f000 f814 	bl	800421c <_malloc_usable_size_r>
 80041f4:	42a0      	cmp	r0, r4
 80041f6:	d20f      	bcs.n	8004218 <_realloc_r+0x48>
 80041f8:	4621      	mov	r1, r4
 80041fa:	4638      	mov	r0, r7
 80041fc:	f7ff fc28 	bl	8003a50 <_malloc_r>
 8004200:	4605      	mov	r5, r0
 8004202:	2800      	cmp	r0, #0
 8004204:	d0f2      	beq.n	80041ec <_realloc_r+0x1c>
 8004206:	4631      	mov	r1, r6
 8004208:	4622      	mov	r2, r4
 800420a:	f7ff ffb9 	bl	8004180 <memcpy>
 800420e:	4631      	mov	r1, r6
 8004210:	4638      	mov	r0, r7
 8004212:	f7ff fbd1 	bl	80039b8 <_free_r>
 8004216:	e7e9      	b.n	80041ec <_realloc_r+0x1c>
 8004218:	4635      	mov	r5, r6
 800421a:	e7e7      	b.n	80041ec <_realloc_r+0x1c>

0800421c <_malloc_usable_size_r>:
 800421c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004220:	1f18      	subs	r0, r3, #4
 8004222:	2b00      	cmp	r3, #0
 8004224:	bfbc      	itt	lt
 8004226:	580b      	ldrlt	r3, [r1, r0]
 8004228:	18c0      	addlt	r0, r0, r3
 800422a:	4770      	bx	lr

0800422c <_init>:
 800422c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800422e:	bf00      	nop
 8004230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004232:	bc08      	pop	{r3}
 8004234:	469e      	mov	lr, r3
 8004236:	4770      	bx	lr

08004238 <_fini>:
 8004238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800423a:	bf00      	nop
 800423c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800423e:	bc08      	pop	{r3}
 8004240:	469e      	mov	lr, r3
 8004242:	4770      	bx	lr
