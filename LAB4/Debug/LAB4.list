
LAB4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d68  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002e74  08002e74  00012e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e98  08002e98  000200c4  2**0
                  CONTENTS
  4 .ARM          00000000  08002e98  08002e98  000200c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e98  08002e98  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e98  08002e98  00012e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e9c  08002e9c  00012e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  08002ea0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  200000c4  08002f64  000200c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08002f64  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d0b4  00000000  00000000  000200ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002300  00000000  00000000  0002d1a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae8  00000000  00000000  0002f4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a8  00000000  00000000  0002ff90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e93  00000000  00000000  00030938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d4e7  00000000  00000000  000487cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085b50  00000000  00000000  00055cb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000db802  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bf8  00000000  00000000  000db858  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000c4 	.word	0x200000c4
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e5c 	.word	0x08002e5c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000c8 	.word	0x200000c8
 8000148:	08002e5c 	.word	0x08002e5c

0800014c <updateBuffer7SEG>:
#include "main.h"

int buffer7SEG_led[4] = {0,0,0,0};
int led_index = 0;

void updateBuffer7SEG(){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	int tmp1 = buffer7SEG_led[0]*10 + buffer7SEG_led[1] - 1;
 8000152:	4b25      	ldr	r3, [pc, #148]	; (80001e8 <updateBuffer7SEG+0x9c>)
 8000154:	681a      	ldr	r2, [r3, #0]
 8000156:	4613      	mov	r3, r2
 8000158:	009b      	lsls	r3, r3, #2
 800015a:	4413      	add	r3, r2
 800015c:	005b      	lsls	r3, r3, #1
 800015e:	461a      	mov	r2, r3
 8000160:	4b21      	ldr	r3, [pc, #132]	; (80001e8 <updateBuffer7SEG+0x9c>)
 8000162:	685b      	ldr	r3, [r3, #4]
 8000164:	4413      	add	r3, r2
 8000166:	3b01      	subs	r3, #1
 8000168:	607b      	str	r3, [r7, #4]
	buffer7SEG_led[0] = tmp1 / 10;
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	4a1f      	ldr	r2, [pc, #124]	; (80001ec <updateBuffer7SEG+0xa0>)
 800016e:	fb82 1203 	smull	r1, r2, r2, r3
 8000172:	1092      	asrs	r2, r2, #2
 8000174:	17db      	asrs	r3, r3, #31
 8000176:	1ad3      	subs	r3, r2, r3
 8000178:	4a1b      	ldr	r2, [pc, #108]	; (80001e8 <updateBuffer7SEG+0x9c>)
 800017a:	6013      	str	r3, [r2, #0]
	buffer7SEG_led[1] = tmp1 % 10;
 800017c:	6879      	ldr	r1, [r7, #4]
 800017e:	4b1b      	ldr	r3, [pc, #108]	; (80001ec <updateBuffer7SEG+0xa0>)
 8000180:	fb83 2301 	smull	r2, r3, r3, r1
 8000184:	109a      	asrs	r2, r3, #2
 8000186:	17cb      	asrs	r3, r1, #31
 8000188:	1ad2      	subs	r2, r2, r3
 800018a:	4613      	mov	r3, r2
 800018c:	009b      	lsls	r3, r3, #2
 800018e:	4413      	add	r3, r2
 8000190:	005b      	lsls	r3, r3, #1
 8000192:	1aca      	subs	r2, r1, r3
 8000194:	4b14      	ldr	r3, [pc, #80]	; (80001e8 <updateBuffer7SEG+0x9c>)
 8000196:	605a      	str	r2, [r3, #4]
	int tmp2 = buffer7SEG_led[2]*10 + buffer7SEG_led[3] - 1;
 8000198:	4b13      	ldr	r3, [pc, #76]	; (80001e8 <updateBuffer7SEG+0x9c>)
 800019a:	689a      	ldr	r2, [r3, #8]
 800019c:	4613      	mov	r3, r2
 800019e:	009b      	lsls	r3, r3, #2
 80001a0:	4413      	add	r3, r2
 80001a2:	005b      	lsls	r3, r3, #1
 80001a4:	461a      	mov	r2, r3
 80001a6:	4b10      	ldr	r3, [pc, #64]	; (80001e8 <updateBuffer7SEG+0x9c>)
 80001a8:	68db      	ldr	r3, [r3, #12]
 80001aa:	4413      	add	r3, r2
 80001ac:	3b01      	subs	r3, #1
 80001ae:	603b      	str	r3, [r7, #0]
	buffer7SEG_led[2] = tmp2 / 10;
 80001b0:	683b      	ldr	r3, [r7, #0]
 80001b2:	4a0e      	ldr	r2, [pc, #56]	; (80001ec <updateBuffer7SEG+0xa0>)
 80001b4:	fb82 1203 	smull	r1, r2, r2, r3
 80001b8:	1092      	asrs	r2, r2, #2
 80001ba:	17db      	asrs	r3, r3, #31
 80001bc:	1ad3      	subs	r3, r2, r3
 80001be:	4a0a      	ldr	r2, [pc, #40]	; (80001e8 <updateBuffer7SEG+0x9c>)
 80001c0:	6093      	str	r3, [r2, #8]
	buffer7SEG_led[3] = tmp2 % 10;
 80001c2:	6839      	ldr	r1, [r7, #0]
 80001c4:	4b09      	ldr	r3, [pc, #36]	; (80001ec <updateBuffer7SEG+0xa0>)
 80001c6:	fb83 2301 	smull	r2, r3, r3, r1
 80001ca:	109a      	asrs	r2, r3, #2
 80001cc:	17cb      	asrs	r3, r1, #31
 80001ce:	1ad2      	subs	r2, r2, r3
 80001d0:	4613      	mov	r3, r2
 80001d2:	009b      	lsls	r3, r3, #2
 80001d4:	4413      	add	r3, r2
 80001d6:	005b      	lsls	r3, r3, #1
 80001d8:	1aca      	subs	r2, r1, r3
 80001da:	4b03      	ldr	r3, [pc, #12]	; (80001e8 <updateBuffer7SEG+0x9c>)
 80001dc:	60da      	str	r2, [r3, #12]
}
 80001de:	bf00      	nop
 80001e0:	370c      	adds	r7, #12
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bc80      	pop	{r7}
 80001e6:	4770      	bx	lr
 80001e8:	200000e0 	.word	0x200000e0
 80001ec:	66666667 	.word	0x66666667

080001f0 <setBuffer7SEG>:

void setBuffer7SEG(int i, int time){
 80001f0:	b480      	push	{r7}
 80001f2:	b083      	sub	sp, #12
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
 80001f8:	6039      	str	r1, [r7, #0]
	buffer7SEG_led[i*2] = time / 10;
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	005a      	lsls	r2, r3, #1
 80001fe:	683b      	ldr	r3, [r7, #0]
 8000200:	490f      	ldr	r1, [pc, #60]	; (8000240 <setBuffer7SEG+0x50>)
 8000202:	fb81 0103 	smull	r0, r1, r1, r3
 8000206:	1089      	asrs	r1, r1, #2
 8000208:	17db      	asrs	r3, r3, #31
 800020a:	1acb      	subs	r3, r1, r3
 800020c:	490d      	ldr	r1, [pc, #52]	; (8000244 <setBuffer7SEG+0x54>)
 800020e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	buffer7SEG_led[i*2+1] = time % 10;
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	005b      	lsls	r3, r3, #1
 8000216:	1c58      	adds	r0, r3, #1
 8000218:	6839      	ldr	r1, [r7, #0]
 800021a:	4b09      	ldr	r3, [pc, #36]	; (8000240 <setBuffer7SEG+0x50>)
 800021c:	fb83 2301 	smull	r2, r3, r3, r1
 8000220:	109a      	asrs	r2, r3, #2
 8000222:	17cb      	asrs	r3, r1, #31
 8000224:	1ad2      	subs	r2, r2, r3
 8000226:	4613      	mov	r3, r2
 8000228:	009b      	lsls	r3, r3, #2
 800022a:	4413      	add	r3, r2
 800022c:	005b      	lsls	r3, r3, #1
 800022e:	1aca      	subs	r2, r1, r3
 8000230:	4b04      	ldr	r3, [pc, #16]	; (8000244 <setBuffer7SEG+0x54>)
 8000232:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
 8000236:	bf00      	nop
 8000238:	370c      	adds	r7, #12
 800023a:	46bd      	mov	sp, r7
 800023c:	bc80      	pop	{r7}
 800023e:	4770      	bx	lr
 8000240:	66666667 	.word	0x66666667
 8000244:	200000e0 	.word	0x200000e0

08000248 <update7SEG>:

void update7SEG(){
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	switch (led_index){
 800024c:	4b43      	ldr	r3, [pc, #268]	; (800035c <update7SEG+0x114>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	2b03      	cmp	r3, #3
 8000252:	d86b      	bhi.n	800032c <update7SEG+0xe4>
 8000254:	a201      	add	r2, pc, #4	; (adr r2, 800025c <update7SEG+0x14>)
 8000256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800025a:	bf00      	nop
 800025c:	0800026d 	.word	0x0800026d
 8000260:	0800029d 	.word	0x0800029d
 8000264:	080002cd 	.word	0x080002cd
 8000268:	080002fd 	.word	0x080002fd
	case 0:
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 800026c:	2200      	movs	r2, #0
 800026e:	2180      	movs	r1, #128	; 0x80
 8000270:	483b      	ldr	r0, [pc, #236]	; (8000360 <update7SEG+0x118>)
 8000272:	f001 fd04 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000276:	2201      	movs	r2, #1
 8000278:	f44f 7180 	mov.w	r1, #256	; 0x100
 800027c:	4838      	ldr	r0, [pc, #224]	; (8000360 <update7SEG+0x118>)
 800027e:	f001 fcfe 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000282:	2201      	movs	r2, #1
 8000284:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000288:	4835      	ldr	r0, [pc, #212]	; (8000360 <update7SEG+0x118>)
 800028a:	f001 fcf8 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, SET);
 800028e:	2201      	movs	r2, #1
 8000290:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000294:	4832      	ldr	r0, [pc, #200]	; (8000360 <update7SEG+0x118>)
 8000296:	f001 fcf2 	bl	8001c7e <HAL_GPIO_WritePin>
		break;
 800029a:	e048      	b.n	800032e <update7SEG+0xe6>
	case 1:
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 800029c:	2201      	movs	r2, #1
 800029e:	2180      	movs	r1, #128	; 0x80
 80002a0:	482f      	ldr	r0, [pc, #188]	; (8000360 <update7SEG+0x118>)
 80002a2:	f001 fcec 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 80002a6:	2200      	movs	r2, #0
 80002a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002ac:	482c      	ldr	r0, [pc, #176]	; (8000360 <update7SEG+0x118>)
 80002ae:	f001 fce6 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 80002b2:	2201      	movs	r2, #1
 80002b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002b8:	4829      	ldr	r0, [pc, #164]	; (8000360 <update7SEG+0x118>)
 80002ba:	f001 fce0 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, SET);
 80002be:	2201      	movs	r2, #1
 80002c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002c4:	4826      	ldr	r0, [pc, #152]	; (8000360 <update7SEG+0x118>)
 80002c6:	f001 fcda 	bl	8001c7e <HAL_GPIO_WritePin>
		break;
 80002ca:	e030      	b.n	800032e <update7SEG+0xe6>
	case 2:
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80002cc:	2201      	movs	r2, #1
 80002ce:	2180      	movs	r1, #128	; 0x80
 80002d0:	4823      	ldr	r0, [pc, #140]	; (8000360 <update7SEG+0x118>)
 80002d2:	f001 fcd4 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80002d6:	2201      	movs	r2, #1
 80002d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002dc:	4820      	ldr	r0, [pc, #128]	; (8000360 <update7SEG+0x118>)
 80002de:	f001 fcce 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 80002e2:	2200      	movs	r2, #0
 80002e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002e8:	481d      	ldr	r0, [pc, #116]	; (8000360 <update7SEG+0x118>)
 80002ea:	f001 fcc8 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, SET);
 80002ee:	2201      	movs	r2, #1
 80002f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002f4:	481a      	ldr	r0, [pc, #104]	; (8000360 <update7SEG+0x118>)
 80002f6:	f001 fcc2 	bl	8001c7e <HAL_GPIO_WritePin>
		break;
 80002fa:	e018      	b.n	800032e <update7SEG+0xe6>
	case 3:
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80002fc:	2201      	movs	r2, #1
 80002fe:	2180      	movs	r1, #128	; 0x80
 8000300:	4817      	ldr	r0, [pc, #92]	; (8000360 <update7SEG+0x118>)
 8000302:	f001 fcbc 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000306:	2201      	movs	r2, #1
 8000308:	f44f 7180 	mov.w	r1, #256	; 0x100
 800030c:	4814      	ldr	r0, [pc, #80]	; (8000360 <update7SEG+0x118>)
 800030e:	f001 fcb6 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000312:	2201      	movs	r2, #1
 8000314:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000318:	4811      	ldr	r0, [pc, #68]	; (8000360 <update7SEG+0x118>)
 800031a:	f001 fcb0 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, RESET);
 800031e:	2200      	movs	r2, #0
 8000320:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000324:	480e      	ldr	r0, [pc, #56]	; (8000360 <update7SEG+0x118>)
 8000326:	f001 fcaa 	bl	8001c7e <HAL_GPIO_WritePin>
		break;
 800032a:	e000      	b.n	800032e <update7SEG+0xe6>
	default:
		break;
 800032c:	bf00      	nop
	}
	display7SEG(buffer7SEG_led[led_index]);
 800032e:	4b0b      	ldr	r3, [pc, #44]	; (800035c <update7SEG+0x114>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	4a0c      	ldr	r2, [pc, #48]	; (8000364 <update7SEG+0x11c>)
 8000334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000338:	4618      	mov	r0, r3
 800033a:	f000 f815 	bl	8000368 <display7SEG>
	led_index++;
 800033e:	4b07      	ldr	r3, [pc, #28]	; (800035c <update7SEG+0x114>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	3301      	adds	r3, #1
 8000344:	4a05      	ldr	r2, [pc, #20]	; (800035c <update7SEG+0x114>)
 8000346:	6013      	str	r3, [r2, #0]
	if(led_index >= 4) led_index = 0;
 8000348:	4b04      	ldr	r3, [pc, #16]	; (800035c <update7SEG+0x114>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	2b03      	cmp	r3, #3
 800034e:	dd02      	ble.n	8000356 <update7SEG+0x10e>
 8000350:	4b02      	ldr	r3, [pc, #8]	; (800035c <update7SEG+0x114>)
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
}
 8000356:	bf00      	nop
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	200000f0 	.word	0x200000f0
 8000360:	40010c00 	.word	0x40010c00
 8000364:	200000e0 	.word	0x200000e0

08000368 <display7SEG>:

void display7SEG(int num)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	2b09      	cmp	r3, #9
 8000374:	f200 8180 	bhi.w	8000678 <display7SEG+0x310>
 8000378:	a201      	add	r2, pc, #4	; (adr r2, 8000380 <display7SEG+0x18>)
 800037a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800037e:	bf00      	nop
 8000380:	080003a9 	.word	0x080003a9
 8000384:	080003f1 	.word	0x080003f1
 8000388:	08000439 	.word	0x08000439
 800038c:	08000481 	.word	0x08000481
 8000390:	080004c9 	.word	0x080004c9
 8000394:	08000511 	.word	0x08000511
 8000398:	08000559 	.word	0x08000559
 800039c:	080005a1 	.word	0x080005a1
 80003a0:	080005e9 	.word	0x080005e9
 80003a4:	08000631 	.word	0x08000631
	switch (num){
	case 0:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 80003a8:	2200      	movs	r2, #0
 80003aa:	2101      	movs	r1, #1
 80003ac:	48b5      	ldr	r0, [pc, #724]	; (8000684 <display7SEG+0x31c>)
 80003ae:	f001 fc66 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80003b2:	2200      	movs	r2, #0
 80003b4:	2102      	movs	r1, #2
 80003b6:	48b3      	ldr	r0, [pc, #716]	; (8000684 <display7SEG+0x31c>)
 80003b8:	f001 fc61 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80003bc:	2200      	movs	r2, #0
 80003be:	2104      	movs	r1, #4
 80003c0:	48b0      	ldr	r0, [pc, #704]	; (8000684 <display7SEG+0x31c>)
 80003c2:	f001 fc5c 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 80003c6:	2200      	movs	r2, #0
 80003c8:	2108      	movs	r1, #8
 80003ca:	48ae      	ldr	r0, [pc, #696]	; (8000684 <display7SEG+0x31c>)
 80003cc:	f001 fc57 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 80003d0:	2200      	movs	r2, #0
 80003d2:	2110      	movs	r1, #16
 80003d4:	48ab      	ldr	r0, [pc, #684]	; (8000684 <display7SEG+0x31c>)
 80003d6:	f001 fc52 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 80003da:	2200      	movs	r2, #0
 80003dc:	2120      	movs	r1, #32
 80003de:	48a9      	ldr	r0, [pc, #676]	; (8000684 <display7SEG+0x31c>)
 80003e0:	f001 fc4d 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 80003e4:	2201      	movs	r2, #1
 80003e6:	2140      	movs	r1, #64	; 0x40
 80003e8:	48a6      	ldr	r0, [pc, #664]	; (8000684 <display7SEG+0x31c>)
 80003ea:	f001 fc48 	bl	8001c7e <HAL_GPIO_WritePin>
		break;
 80003ee:	e144      	b.n	800067a <display7SEG+0x312>
	case 1:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 80003f0:	2201      	movs	r2, #1
 80003f2:	2101      	movs	r1, #1
 80003f4:	48a3      	ldr	r0, [pc, #652]	; (8000684 <display7SEG+0x31c>)
 80003f6:	f001 fc42 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80003fa:	2200      	movs	r2, #0
 80003fc:	2102      	movs	r1, #2
 80003fe:	48a1      	ldr	r0, [pc, #644]	; (8000684 <display7SEG+0x31c>)
 8000400:	f001 fc3d 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000404:	2200      	movs	r2, #0
 8000406:	2104      	movs	r1, #4
 8000408:	489e      	ldr	r0, [pc, #632]	; (8000684 <display7SEG+0x31c>)
 800040a:	f001 fc38 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 800040e:	2201      	movs	r2, #1
 8000410:	2108      	movs	r1, #8
 8000412:	489c      	ldr	r0, [pc, #624]	; (8000684 <display7SEG+0x31c>)
 8000414:	f001 fc33 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000418:	2201      	movs	r2, #1
 800041a:	2110      	movs	r1, #16
 800041c:	4899      	ldr	r0, [pc, #612]	; (8000684 <display7SEG+0x31c>)
 800041e:	f001 fc2e 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000422:	2201      	movs	r2, #1
 8000424:	2120      	movs	r1, #32
 8000426:	4897      	ldr	r0, [pc, #604]	; (8000684 <display7SEG+0x31c>)
 8000428:	f001 fc29 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 800042c:	2201      	movs	r2, #1
 800042e:	2140      	movs	r1, #64	; 0x40
 8000430:	4894      	ldr	r0, [pc, #592]	; (8000684 <display7SEG+0x31c>)
 8000432:	f001 fc24 	bl	8001c7e <HAL_GPIO_WritePin>
		break;
 8000436:	e120      	b.n	800067a <display7SEG+0x312>
	case 2:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000438:	2200      	movs	r2, #0
 800043a:	2101      	movs	r1, #1
 800043c:	4891      	ldr	r0, [pc, #580]	; (8000684 <display7SEG+0x31c>)
 800043e:	f001 fc1e 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000442:	2200      	movs	r2, #0
 8000444:	2102      	movs	r1, #2
 8000446:	488f      	ldr	r0, [pc, #572]	; (8000684 <display7SEG+0x31c>)
 8000448:	f001 fc19 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, SET);
 800044c:	2201      	movs	r2, #1
 800044e:	2104      	movs	r1, #4
 8000450:	488c      	ldr	r0, [pc, #560]	; (8000684 <display7SEG+0x31c>)
 8000452:	f001 fc14 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000456:	2200      	movs	r2, #0
 8000458:	2108      	movs	r1, #8
 800045a:	488a      	ldr	r0, [pc, #552]	; (8000684 <display7SEG+0x31c>)
 800045c:	f001 fc0f 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000460:	2200      	movs	r2, #0
 8000462:	2110      	movs	r1, #16
 8000464:	4887      	ldr	r0, [pc, #540]	; (8000684 <display7SEG+0x31c>)
 8000466:	f001 fc0a 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 800046a:	2201      	movs	r2, #1
 800046c:	2120      	movs	r1, #32
 800046e:	4885      	ldr	r0, [pc, #532]	; (8000684 <display7SEG+0x31c>)
 8000470:	f001 fc05 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000474:	2200      	movs	r2, #0
 8000476:	2140      	movs	r1, #64	; 0x40
 8000478:	4882      	ldr	r0, [pc, #520]	; (8000684 <display7SEG+0x31c>)
 800047a:	f001 fc00 	bl	8001c7e <HAL_GPIO_WritePin>
		break;
 800047e:	e0fc      	b.n	800067a <display7SEG+0x312>
	case 3:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000480:	2200      	movs	r2, #0
 8000482:	2101      	movs	r1, #1
 8000484:	487f      	ldr	r0, [pc, #508]	; (8000684 <display7SEG+0x31c>)
 8000486:	f001 fbfa 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 800048a:	2200      	movs	r2, #0
 800048c:	2102      	movs	r1, #2
 800048e:	487d      	ldr	r0, [pc, #500]	; (8000684 <display7SEG+0x31c>)
 8000490:	f001 fbf5 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000494:	2200      	movs	r2, #0
 8000496:	2104      	movs	r1, #4
 8000498:	487a      	ldr	r0, [pc, #488]	; (8000684 <display7SEG+0x31c>)
 800049a:	f001 fbf0 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 800049e:	2200      	movs	r2, #0
 80004a0:	2108      	movs	r1, #8
 80004a2:	4878      	ldr	r0, [pc, #480]	; (8000684 <display7SEG+0x31c>)
 80004a4:	f001 fbeb 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 80004a8:	2201      	movs	r2, #1
 80004aa:	2110      	movs	r1, #16
 80004ac:	4875      	ldr	r0, [pc, #468]	; (8000684 <display7SEG+0x31c>)
 80004ae:	f001 fbe6 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 80004b2:	2201      	movs	r2, #1
 80004b4:	2120      	movs	r1, #32
 80004b6:	4873      	ldr	r0, [pc, #460]	; (8000684 <display7SEG+0x31c>)
 80004b8:	f001 fbe1 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 80004bc:	2200      	movs	r2, #0
 80004be:	2140      	movs	r1, #64	; 0x40
 80004c0:	4870      	ldr	r0, [pc, #448]	; (8000684 <display7SEG+0x31c>)
 80004c2:	f001 fbdc 	bl	8001c7e <HAL_GPIO_WritePin>
		break;
 80004c6:	e0d8      	b.n	800067a <display7SEG+0x312>
	case 4:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 80004c8:	2201      	movs	r2, #1
 80004ca:	2101      	movs	r1, #1
 80004cc:	486d      	ldr	r0, [pc, #436]	; (8000684 <display7SEG+0x31c>)
 80004ce:	f001 fbd6 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80004d2:	2200      	movs	r2, #0
 80004d4:	2102      	movs	r1, #2
 80004d6:	486b      	ldr	r0, [pc, #428]	; (8000684 <display7SEG+0x31c>)
 80004d8:	f001 fbd1 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80004dc:	2200      	movs	r2, #0
 80004de:	2104      	movs	r1, #4
 80004e0:	4868      	ldr	r0, [pc, #416]	; (8000684 <display7SEG+0x31c>)
 80004e2:	f001 fbcc 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 80004e6:	2201      	movs	r2, #1
 80004e8:	2108      	movs	r1, #8
 80004ea:	4866      	ldr	r0, [pc, #408]	; (8000684 <display7SEG+0x31c>)
 80004ec:	f001 fbc7 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 80004f0:	2201      	movs	r2, #1
 80004f2:	2110      	movs	r1, #16
 80004f4:	4863      	ldr	r0, [pc, #396]	; (8000684 <display7SEG+0x31c>)
 80004f6:	f001 fbc2 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 80004fa:	2200      	movs	r2, #0
 80004fc:	2120      	movs	r1, #32
 80004fe:	4861      	ldr	r0, [pc, #388]	; (8000684 <display7SEG+0x31c>)
 8000500:	f001 fbbd 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000504:	2200      	movs	r2, #0
 8000506:	2140      	movs	r1, #64	; 0x40
 8000508:	485e      	ldr	r0, [pc, #376]	; (8000684 <display7SEG+0x31c>)
 800050a:	f001 fbb8 	bl	8001c7e <HAL_GPIO_WritePin>
		break;
 800050e:	e0b4      	b.n	800067a <display7SEG+0x312>
	case 5:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000510:	2200      	movs	r2, #0
 8000512:	2101      	movs	r1, #1
 8000514:	485b      	ldr	r0, [pc, #364]	; (8000684 <display7SEG+0x31c>)
 8000516:	f001 fbb2 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 800051a:	2201      	movs	r2, #1
 800051c:	2102      	movs	r1, #2
 800051e:	4859      	ldr	r0, [pc, #356]	; (8000684 <display7SEG+0x31c>)
 8000520:	f001 fbad 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000524:	2200      	movs	r2, #0
 8000526:	2104      	movs	r1, #4
 8000528:	4856      	ldr	r0, [pc, #344]	; (8000684 <display7SEG+0x31c>)
 800052a:	f001 fba8 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 800052e:	2200      	movs	r2, #0
 8000530:	2108      	movs	r1, #8
 8000532:	4854      	ldr	r0, [pc, #336]	; (8000684 <display7SEG+0x31c>)
 8000534:	f001 fba3 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000538:	2201      	movs	r2, #1
 800053a:	2110      	movs	r1, #16
 800053c:	4851      	ldr	r0, [pc, #324]	; (8000684 <display7SEG+0x31c>)
 800053e:	f001 fb9e 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000542:	2200      	movs	r2, #0
 8000544:	2120      	movs	r1, #32
 8000546:	484f      	ldr	r0, [pc, #316]	; (8000684 <display7SEG+0x31c>)
 8000548:	f001 fb99 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 800054c:	2200      	movs	r2, #0
 800054e:	2140      	movs	r1, #64	; 0x40
 8000550:	484c      	ldr	r0, [pc, #304]	; (8000684 <display7SEG+0x31c>)
 8000552:	f001 fb94 	bl	8001c7e <HAL_GPIO_WritePin>
		break;
 8000556:	e090      	b.n	800067a <display7SEG+0x312>
	case 6:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	2101      	movs	r1, #1
 800055c:	4849      	ldr	r0, [pc, #292]	; (8000684 <display7SEG+0x31c>)
 800055e:	f001 fb8e 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 8000562:	2201      	movs	r2, #1
 8000564:	2102      	movs	r1, #2
 8000566:	4847      	ldr	r0, [pc, #284]	; (8000684 <display7SEG+0x31c>)
 8000568:	f001 fb89 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 800056c:	2200      	movs	r2, #0
 800056e:	2104      	movs	r1, #4
 8000570:	4844      	ldr	r0, [pc, #272]	; (8000684 <display7SEG+0x31c>)
 8000572:	f001 fb84 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000576:	2200      	movs	r2, #0
 8000578:	2108      	movs	r1, #8
 800057a:	4842      	ldr	r0, [pc, #264]	; (8000684 <display7SEG+0x31c>)
 800057c:	f001 fb7f 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000580:	2200      	movs	r2, #0
 8000582:	2110      	movs	r1, #16
 8000584:	483f      	ldr	r0, [pc, #252]	; (8000684 <display7SEG+0x31c>)
 8000586:	f001 fb7a 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	2120      	movs	r1, #32
 800058e:	483d      	ldr	r0, [pc, #244]	; (8000684 <display7SEG+0x31c>)
 8000590:	f001 fb75 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000594:	2200      	movs	r2, #0
 8000596:	2140      	movs	r1, #64	; 0x40
 8000598:	483a      	ldr	r0, [pc, #232]	; (8000684 <display7SEG+0x31c>)
 800059a:	f001 fb70 	bl	8001c7e <HAL_GPIO_WritePin>
		break;
 800059e:	e06c      	b.n	800067a <display7SEG+0x312>
	case 7:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	2101      	movs	r1, #1
 80005a4:	4837      	ldr	r0, [pc, #220]	; (8000684 <display7SEG+0x31c>)
 80005a6:	f001 fb6a 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80005aa:	2200      	movs	r2, #0
 80005ac:	2102      	movs	r1, #2
 80005ae:	4835      	ldr	r0, [pc, #212]	; (8000684 <display7SEG+0x31c>)
 80005b0:	f001 fb65 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2104      	movs	r1, #4
 80005b8:	4832      	ldr	r0, [pc, #200]	; (8000684 <display7SEG+0x31c>)
 80005ba:	f001 fb60 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 80005be:	2201      	movs	r2, #1
 80005c0:	2108      	movs	r1, #8
 80005c2:	4830      	ldr	r0, [pc, #192]	; (8000684 <display7SEG+0x31c>)
 80005c4:	f001 fb5b 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 80005c8:	2201      	movs	r2, #1
 80005ca:	2110      	movs	r1, #16
 80005cc:	482d      	ldr	r0, [pc, #180]	; (8000684 <display7SEG+0x31c>)
 80005ce:	f001 fb56 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 80005d2:	2201      	movs	r2, #1
 80005d4:	2120      	movs	r1, #32
 80005d6:	482b      	ldr	r0, [pc, #172]	; (8000684 <display7SEG+0x31c>)
 80005d8:	f001 fb51 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	2140      	movs	r1, #64	; 0x40
 80005e0:	4828      	ldr	r0, [pc, #160]	; (8000684 <display7SEG+0x31c>)
 80005e2:	f001 fb4c 	bl	8001c7e <HAL_GPIO_WritePin>
		break;
 80005e6:	e048      	b.n	800067a <display7SEG+0x312>
	case 8:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2101      	movs	r1, #1
 80005ec:	4825      	ldr	r0, [pc, #148]	; (8000684 <display7SEG+0x31c>)
 80005ee:	f001 fb46 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2102      	movs	r1, #2
 80005f6:	4823      	ldr	r0, [pc, #140]	; (8000684 <display7SEG+0x31c>)
 80005f8:	f001 fb41 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80005fc:	2200      	movs	r2, #0
 80005fe:	2104      	movs	r1, #4
 8000600:	4820      	ldr	r0, [pc, #128]	; (8000684 <display7SEG+0x31c>)
 8000602:	f001 fb3c 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	2108      	movs	r1, #8
 800060a:	481e      	ldr	r0, [pc, #120]	; (8000684 <display7SEG+0x31c>)
 800060c:	f001 fb37 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	2110      	movs	r1, #16
 8000614:	481b      	ldr	r0, [pc, #108]	; (8000684 <display7SEG+0x31c>)
 8000616:	f001 fb32 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 800061a:	2200      	movs	r2, #0
 800061c:	2120      	movs	r1, #32
 800061e:	4819      	ldr	r0, [pc, #100]	; (8000684 <display7SEG+0x31c>)
 8000620:	f001 fb2d 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	2140      	movs	r1, #64	; 0x40
 8000628:	4816      	ldr	r0, [pc, #88]	; (8000684 <display7SEG+0x31c>)
 800062a:	f001 fb28 	bl	8001c7e <HAL_GPIO_WritePin>
		break;
 800062e:	e024      	b.n	800067a <display7SEG+0x312>
	case 9:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000630:	2200      	movs	r2, #0
 8000632:	2101      	movs	r1, #1
 8000634:	4813      	ldr	r0, [pc, #76]	; (8000684 <display7SEG+0x31c>)
 8000636:	f001 fb22 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 800063a:	2200      	movs	r2, #0
 800063c:	2102      	movs	r1, #2
 800063e:	4811      	ldr	r0, [pc, #68]	; (8000684 <display7SEG+0x31c>)
 8000640:	f001 fb1d 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	2104      	movs	r1, #4
 8000648:	480e      	ldr	r0, [pc, #56]	; (8000684 <display7SEG+0x31c>)
 800064a:	f001 fb18 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	2108      	movs	r1, #8
 8000652:	480c      	ldr	r0, [pc, #48]	; (8000684 <display7SEG+0x31c>)
 8000654:	f001 fb13 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000658:	2201      	movs	r2, #1
 800065a:	2110      	movs	r1, #16
 800065c:	4809      	ldr	r0, [pc, #36]	; (8000684 <display7SEG+0x31c>)
 800065e:	f001 fb0e 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	2120      	movs	r1, #32
 8000666:	4807      	ldr	r0, [pc, #28]	; (8000684 <display7SEG+0x31c>)
 8000668:	f001 fb09 	bl	8001c7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 800066c:	2200      	movs	r2, #0
 800066e:	2140      	movs	r1, #64	; 0x40
 8000670:	4804      	ldr	r0, [pc, #16]	; (8000684 <display7SEG+0x31c>)
 8000672:	f001 fb04 	bl	8001c7e <HAL_GPIO_WritePin>
		break;
 8000676:	e000      	b.n	800067a <display7SEG+0x312>
	default:
		break;
 8000678:	bf00      	nop
	}
}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40010c00 	.word	0x40010c00

08000688 <isButton1Pressed>:
int TimerForKeyPress3 = 200;
int button1_flag = 0;
int button2_flag = 0;
int button3_flag = 0;

int isButton1Pressed(){
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
	if(button1_flag ==1){
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <isButton1Pressed+0x20>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2b01      	cmp	r3, #1
 8000692:	d104      	bne.n	800069e <isButton1Pressed+0x16>
		button1_flag = 0;
 8000694:	4b04      	ldr	r3, [pc, #16]	; (80006a8 <isButton1Pressed+0x20>)
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
		return 1;
 800069a:	2301      	movs	r3, #1
 800069c:	e000      	b.n	80006a0 <isButton1Pressed+0x18>
	}
	return 0;
 800069e:	2300      	movs	r3, #0
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr
 80006a8:	200000f4 	.word	0x200000f4

080006ac <isButton2Pressed>:

int isButton2Pressed(){
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
	if(button2_flag == 1){
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <isButton2Pressed+0x20>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d104      	bne.n	80006c2 <isButton2Pressed+0x16>
		button2_flag = 0;
 80006b8:	4b04      	ldr	r3, [pc, #16]	; (80006cc <isButton2Pressed+0x20>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
		return 1;
 80006be:	2301      	movs	r3, #1
 80006c0:	e000      	b.n	80006c4 <isButton2Pressed+0x18>
	}
	return 0;
 80006c2:	2300      	movs	r3, #0
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr
 80006cc:	200000f8 	.word	0x200000f8

080006d0 <isButton3Pressed>:

int isButton3Pressed(){
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
	if(button3_flag == 1){
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <isButton3Pressed+0x20>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d104      	bne.n	80006e6 <isButton3Pressed+0x16>
		button3_flag = 0;
 80006dc:	4b04      	ldr	r3, [pc, #16]	; (80006f0 <isButton3Pressed+0x20>)
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
		return 1;
 80006e2:	2301      	movs	r3, #1
 80006e4:	e000      	b.n	80006e8 <isButton3Pressed+0x18>
	}
	return 0;
 80006e6:	2300      	movs	r3, #0
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr
 80006f0:	200000fc 	.word	0x200000fc

080006f4 <getKeyInput>:

void getKeyInput(){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	Key1Reg[0] = Key1Reg[1];
 80006f8:	4b5d      	ldr	r3, [pc, #372]	; (8000870 <getKeyInput+0x17c>)
 80006fa:	685b      	ldr	r3, [r3, #4]
 80006fc:	4a5c      	ldr	r2, [pc, #368]	; (8000870 <getKeyInput+0x17c>)
 80006fe:	6013      	str	r3, [r2, #0]
	Key1Reg[1] = Key1Reg[2];
 8000700:	4b5b      	ldr	r3, [pc, #364]	; (8000870 <getKeyInput+0x17c>)
 8000702:	689b      	ldr	r3, [r3, #8]
 8000704:	4a5a      	ldr	r2, [pc, #360]	; (8000870 <getKeyInput+0x17c>)
 8000706:	6053      	str	r3, [r2, #4]
	Key1Reg[2] = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8000708:	f44f 7180 	mov.w	r1, #256	; 0x100
 800070c:	4859      	ldr	r0, [pc, #356]	; (8000874 <getKeyInput+0x180>)
 800070e:	f001 fa9f 	bl	8001c50 <HAL_GPIO_ReadPin>
 8000712:	4603      	mov	r3, r0
 8000714:	461a      	mov	r2, r3
 8000716:	4b56      	ldr	r3, [pc, #344]	; (8000870 <getKeyInput+0x17c>)
 8000718:	609a      	str	r2, [r3, #8]
	if ((Key1Reg[0] == Key1Reg[1]) && (Key1Reg[1] == Key1Reg[2])){
 800071a:	4b55      	ldr	r3, [pc, #340]	; (8000870 <getKeyInput+0x17c>)
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	4b54      	ldr	r3, [pc, #336]	; (8000870 <getKeyInput+0x17c>)
 8000720:	685b      	ldr	r3, [r3, #4]
 8000722:	429a      	cmp	r2, r3
 8000724:	d126      	bne.n	8000774 <getKeyInput+0x80>
 8000726:	4b52      	ldr	r3, [pc, #328]	; (8000870 <getKeyInput+0x17c>)
 8000728:	685a      	ldr	r2, [r3, #4]
 800072a:	4b51      	ldr	r3, [pc, #324]	; (8000870 <getKeyInput+0x17c>)
 800072c:	689b      	ldr	r3, [r3, #8]
 800072e:	429a      	cmp	r2, r3
 8000730:	d120      	bne.n	8000774 <getKeyInput+0x80>
		if (Key1Reg[3] != Key1Reg[2]){
 8000732:	4b4f      	ldr	r3, [pc, #316]	; (8000870 <getKeyInput+0x17c>)
 8000734:	68da      	ldr	r2, [r3, #12]
 8000736:	4b4e      	ldr	r3, [pc, #312]	; (8000870 <getKeyInput+0x17c>)
 8000738:	689b      	ldr	r3, [r3, #8]
 800073a:	429a      	cmp	r2, r3
 800073c:	d00e      	beq.n	800075c <getKeyInput+0x68>
			Key1Reg[3] = Key1Reg[2];
 800073e:	4b4c      	ldr	r3, [pc, #304]	; (8000870 <getKeyInput+0x17c>)
 8000740:	689b      	ldr	r3, [r3, #8]
 8000742:	4a4b      	ldr	r2, [pc, #300]	; (8000870 <getKeyInput+0x17c>)
 8000744:	60d3      	str	r3, [r2, #12]
			if (Key1Reg[2] == PRESSED_STATE){
 8000746:	4b4a      	ldr	r3, [pc, #296]	; (8000870 <getKeyInput+0x17c>)
 8000748:	689b      	ldr	r3, [r3, #8]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d112      	bne.n	8000774 <getKeyInput+0x80>
				button1_flag = 1;
 800074e:	4b4a      	ldr	r3, [pc, #296]	; (8000878 <getKeyInput+0x184>)
 8000750:	2201      	movs	r2, #1
 8000752:	601a      	str	r2, [r3, #0]
				TimerForKeyPress1 = 200;
 8000754:	4b49      	ldr	r3, [pc, #292]	; (800087c <getKeyInput+0x188>)
 8000756:	22c8      	movs	r2, #200	; 0xc8
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	e00b      	b.n	8000774 <getKeyInput+0x80>
			}
		}
		else{
			TimerForKeyPress1--;
 800075c:	4b47      	ldr	r3, [pc, #284]	; (800087c <getKeyInput+0x188>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	3b01      	subs	r3, #1
 8000762:	4a46      	ldr	r2, [pc, #280]	; (800087c <getKeyInput+0x188>)
 8000764:	6013      	str	r3, [r2, #0]
			if (TimerForKeyPress1 <= 0){
 8000766:	4b45      	ldr	r3, [pc, #276]	; (800087c <getKeyInput+0x188>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2b00      	cmp	r3, #0
 800076c:	dc02      	bgt.n	8000774 <getKeyInput+0x80>
				Key1Reg[3] = NORMAL_STATE;
 800076e:	4b40      	ldr	r3, [pc, #256]	; (8000870 <getKeyInput+0x17c>)
 8000770:	2201      	movs	r2, #1
 8000772:	60da      	str	r2, [r3, #12]
			}
		}
	}

	Key2Reg[0] = Key2Reg[1];
 8000774:	4b42      	ldr	r3, [pc, #264]	; (8000880 <getKeyInput+0x18c>)
 8000776:	685b      	ldr	r3, [r3, #4]
 8000778:	4a41      	ldr	r2, [pc, #260]	; (8000880 <getKeyInput+0x18c>)
 800077a:	6013      	str	r3, [r2, #0]
	Key2Reg[1] = Key2Reg[2];
 800077c:	4b40      	ldr	r3, [pc, #256]	; (8000880 <getKeyInput+0x18c>)
 800077e:	689b      	ldr	r3, [r3, #8]
 8000780:	4a3f      	ldr	r2, [pc, #252]	; (8000880 <getKeyInput+0x18c>)
 8000782:	6053      	str	r3, [r2, #4]
	Key2Reg[2] = HAL_GPIO_ReadPin(B2_GPIO_Port, B2_Pin);
 8000784:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000788:	483a      	ldr	r0, [pc, #232]	; (8000874 <getKeyInput+0x180>)
 800078a:	f001 fa61 	bl	8001c50 <HAL_GPIO_ReadPin>
 800078e:	4603      	mov	r3, r0
 8000790:	461a      	mov	r2, r3
 8000792:	4b3b      	ldr	r3, [pc, #236]	; (8000880 <getKeyInput+0x18c>)
 8000794:	609a      	str	r2, [r3, #8]
	if ((Key2Reg[0] == Key2Reg[1]) && (Key2Reg[1] == Key2Reg[2])){
 8000796:	4b3a      	ldr	r3, [pc, #232]	; (8000880 <getKeyInput+0x18c>)
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	4b39      	ldr	r3, [pc, #228]	; (8000880 <getKeyInput+0x18c>)
 800079c:	685b      	ldr	r3, [r3, #4]
 800079e:	429a      	cmp	r2, r3
 80007a0:	d126      	bne.n	80007f0 <getKeyInput+0xfc>
 80007a2:	4b37      	ldr	r3, [pc, #220]	; (8000880 <getKeyInput+0x18c>)
 80007a4:	685a      	ldr	r2, [r3, #4]
 80007a6:	4b36      	ldr	r3, [pc, #216]	; (8000880 <getKeyInput+0x18c>)
 80007a8:	689b      	ldr	r3, [r3, #8]
 80007aa:	429a      	cmp	r2, r3
 80007ac:	d120      	bne.n	80007f0 <getKeyInput+0xfc>
		if (Key2Reg[3] != Key2Reg[2]){
 80007ae:	4b34      	ldr	r3, [pc, #208]	; (8000880 <getKeyInput+0x18c>)
 80007b0:	68da      	ldr	r2, [r3, #12]
 80007b2:	4b33      	ldr	r3, [pc, #204]	; (8000880 <getKeyInput+0x18c>)
 80007b4:	689b      	ldr	r3, [r3, #8]
 80007b6:	429a      	cmp	r2, r3
 80007b8:	d00e      	beq.n	80007d8 <getKeyInput+0xe4>
			Key2Reg[3] = Key2Reg[2];
 80007ba:	4b31      	ldr	r3, [pc, #196]	; (8000880 <getKeyInput+0x18c>)
 80007bc:	689b      	ldr	r3, [r3, #8]
 80007be:	4a30      	ldr	r2, [pc, #192]	; (8000880 <getKeyInput+0x18c>)
 80007c0:	60d3      	str	r3, [r2, #12]
			if (Key2Reg[2] == PRESSED_STATE){
 80007c2:	4b2f      	ldr	r3, [pc, #188]	; (8000880 <getKeyInput+0x18c>)
 80007c4:	689b      	ldr	r3, [r3, #8]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d112      	bne.n	80007f0 <getKeyInput+0xfc>
				button2_flag = 1;
 80007ca:	4b2e      	ldr	r3, [pc, #184]	; (8000884 <getKeyInput+0x190>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	601a      	str	r2, [r3, #0]
				TimerForKeyPress2 = 200;
 80007d0:	4b2d      	ldr	r3, [pc, #180]	; (8000888 <getKeyInput+0x194>)
 80007d2:	22c8      	movs	r2, #200	; 0xc8
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	e00b      	b.n	80007f0 <getKeyInput+0xfc>
			}
		}
		else{
			TimerForKeyPress2--;
 80007d8:	4b2b      	ldr	r3, [pc, #172]	; (8000888 <getKeyInput+0x194>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	3b01      	subs	r3, #1
 80007de:	4a2a      	ldr	r2, [pc, #168]	; (8000888 <getKeyInput+0x194>)
 80007e0:	6013      	str	r3, [r2, #0]
			if (TimerForKeyPress2 <= 0){
 80007e2:	4b29      	ldr	r3, [pc, #164]	; (8000888 <getKeyInput+0x194>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	dc02      	bgt.n	80007f0 <getKeyInput+0xfc>
				Key2Reg[3] = NORMAL_STATE;
 80007ea:	4b25      	ldr	r3, [pc, #148]	; (8000880 <getKeyInput+0x18c>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	60da      	str	r2, [r3, #12]
			}
		}
	}

	Key3Reg[0] = Key3Reg[1];
 80007f0:	4b26      	ldr	r3, [pc, #152]	; (800088c <getKeyInput+0x198>)
 80007f2:	685b      	ldr	r3, [r3, #4]
 80007f4:	4a25      	ldr	r2, [pc, #148]	; (800088c <getKeyInput+0x198>)
 80007f6:	6013      	str	r3, [r2, #0]
	Key3Reg[1] = Key3Reg[2];
 80007f8:	4b24      	ldr	r3, [pc, #144]	; (800088c <getKeyInput+0x198>)
 80007fa:	689b      	ldr	r3, [r3, #8]
 80007fc:	4a23      	ldr	r2, [pc, #140]	; (800088c <getKeyInput+0x198>)
 80007fe:	6053      	str	r3, [r2, #4]
	Key3Reg[2] = HAL_GPIO_ReadPin(B3_GPIO_Port, B3_Pin);
 8000800:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000804:	481b      	ldr	r0, [pc, #108]	; (8000874 <getKeyInput+0x180>)
 8000806:	f001 fa23 	bl	8001c50 <HAL_GPIO_ReadPin>
 800080a:	4603      	mov	r3, r0
 800080c:	461a      	mov	r2, r3
 800080e:	4b1f      	ldr	r3, [pc, #124]	; (800088c <getKeyInput+0x198>)
 8000810:	609a      	str	r2, [r3, #8]
	if ((Key3Reg[0] == Key3Reg[1]) && (Key3Reg[1] == Key3Reg[2])){
 8000812:	4b1e      	ldr	r3, [pc, #120]	; (800088c <getKeyInput+0x198>)
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	4b1d      	ldr	r3, [pc, #116]	; (800088c <getKeyInput+0x198>)
 8000818:	685b      	ldr	r3, [r3, #4]
 800081a:	429a      	cmp	r2, r3
 800081c:	d126      	bne.n	800086c <getKeyInput+0x178>
 800081e:	4b1b      	ldr	r3, [pc, #108]	; (800088c <getKeyInput+0x198>)
 8000820:	685a      	ldr	r2, [r3, #4]
 8000822:	4b1a      	ldr	r3, [pc, #104]	; (800088c <getKeyInput+0x198>)
 8000824:	689b      	ldr	r3, [r3, #8]
 8000826:	429a      	cmp	r2, r3
 8000828:	d120      	bne.n	800086c <getKeyInput+0x178>
		if (Key3Reg[3] != Key3Reg[2]){
 800082a:	4b18      	ldr	r3, [pc, #96]	; (800088c <getKeyInput+0x198>)
 800082c:	68da      	ldr	r2, [r3, #12]
 800082e:	4b17      	ldr	r3, [pc, #92]	; (800088c <getKeyInput+0x198>)
 8000830:	689b      	ldr	r3, [r3, #8]
 8000832:	429a      	cmp	r2, r3
 8000834:	d00e      	beq.n	8000854 <getKeyInput+0x160>
			Key3Reg[3] = Key3Reg[2];
 8000836:	4b15      	ldr	r3, [pc, #84]	; (800088c <getKeyInput+0x198>)
 8000838:	689b      	ldr	r3, [r3, #8]
 800083a:	4a14      	ldr	r2, [pc, #80]	; (800088c <getKeyInput+0x198>)
 800083c:	60d3      	str	r3, [r2, #12]
			if (Key3Reg[2] == PRESSED_STATE){
 800083e:	4b13      	ldr	r3, [pc, #76]	; (800088c <getKeyInput+0x198>)
 8000840:	689b      	ldr	r3, [r3, #8]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d112      	bne.n	800086c <getKeyInput+0x178>
				button3_flag = 1;
 8000846:	4b12      	ldr	r3, [pc, #72]	; (8000890 <getKeyInput+0x19c>)
 8000848:	2201      	movs	r2, #1
 800084a:	601a      	str	r2, [r3, #0]
				TimerForKeyPress3 = 200;
 800084c:	4b11      	ldr	r3, [pc, #68]	; (8000894 <getKeyInput+0x1a0>)
 800084e:	22c8      	movs	r2, #200	; 0xc8
 8000850:	601a      	str	r2, [r3, #0]
				Key3Reg[3] = NORMAL_STATE;
			}
		}
	}

}
 8000852:	e00b      	b.n	800086c <getKeyInput+0x178>
			TimerForKeyPress3--;
 8000854:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <getKeyInput+0x1a0>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	3b01      	subs	r3, #1
 800085a:	4a0e      	ldr	r2, [pc, #56]	; (8000894 <getKeyInput+0x1a0>)
 800085c:	6013      	str	r3, [r2, #0]
			if (TimerForKeyPress3 <= 0){
 800085e:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <getKeyInput+0x1a0>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	2b00      	cmp	r3, #0
 8000864:	dc02      	bgt.n	800086c <getKeyInput+0x178>
				Key3Reg[3] = NORMAL_STATE;
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <getKeyInput+0x198>)
 8000868:	2201      	movs	r2, #1
 800086a:	60da      	str	r2, [r3, #12]
}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000000 	.word	0x20000000
 8000874:	40010800 	.word	0x40010800
 8000878:	200000f4 	.word	0x200000f4
 800087c:	20000010 	.word	0x20000010
 8000880:	20000014 	.word	0x20000014
 8000884:	200000f8 	.word	0x200000f8
 8000888:	20000024 	.word	0x20000024
 800088c:	20000028 	.word	0x20000028
 8000890:	200000fc 	.word	0x200000fc
 8000894:	20000038 	.word	0x20000038

08000898 <fsm_automatic_run0>:
#include "global.h"
#include "traffic_light.h"
#include "7SEG_led.h"
#include "scheduler.h"

void fsm_automatic_run0(){
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
	switch(status[0]){
 800089c:	4b3d      	ldr	r3, [pc, #244]	; (8000994 <fsm_automatic_run0+0xfc>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2b03      	cmp	r3, #3
 80008a2:	d873      	bhi.n	800098c <fsm_automatic_run0+0xf4>
 80008a4:	a201      	add	r2, pc, #4	; (adr r2, 80008ac <fsm_automatic_run0+0x14>)
 80008a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008aa:	bf00      	nop
 80008ac:	080008bd 	.word	0x080008bd
 80008b0:	080008f1 	.word	0x080008f1
 80008b4:	08000925 	.word	0x08000925
 80008b8:	08000959 	.word	0x08000959
	case INIT:
		status[0] = AUTO_RED;
 80008bc:	4b35      	ldr	r3, [pc, #212]	; (8000994 <fsm_automatic_run0+0xfc>)
 80008be:	2201      	movs	r2, #1
 80008c0:	601a      	str	r2, [r3, #0]
		setRed(0);
 80008c2:	2000      	movs	r0, #0
 80008c4:	f000 fdae 	bl	8001424 <setRed>
		setBuffer7SEG(0, timerLed[0] / 1000);
 80008c8:	4b33      	ldr	r3, [pc, #204]	; (8000998 <fsm_automatic_run0+0x100>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a33      	ldr	r2, [pc, #204]	; (800099c <fsm_automatic_run0+0x104>)
 80008ce:	fb82 1203 	smull	r1, r2, r2, r3
 80008d2:	1192      	asrs	r2, r2, #6
 80008d4:	17db      	asrs	r3, r3, #31
 80008d6:	1ad3      	subs	r3, r2, r3
 80008d8:	4619      	mov	r1, r3
 80008da:	2000      	movs	r0, #0
 80008dc:	f7ff fc88 	bl	80001f0 <setBuffer7SEG>
		SCH_Add_Task(fsm_automatic_run0, timerLed[0], 0);
 80008e0:	4b2d      	ldr	r3, [pc, #180]	; (8000998 <fsm_automatic_run0+0x100>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2200      	movs	r2, #0
 80008e6:	4619      	mov	r1, r3
 80008e8:	482d      	ldr	r0, [pc, #180]	; (80009a0 <fsm_automatic_run0+0x108>)
 80008ea:	f000 fb71 	bl	8000fd0 <SCH_Add_Task>
		break;
 80008ee:	e04e      	b.n	800098e <fsm_automatic_run0+0xf6>
	case AUTO_RED:
		status[0] = AUTO_GREEN;
 80008f0:	4b28      	ldr	r3, [pc, #160]	; (8000994 <fsm_automatic_run0+0xfc>)
 80008f2:	2202      	movs	r2, #2
 80008f4:	601a      	str	r2, [r3, #0]
		setGreen(0);
 80008f6:	2000      	movs	r0, #0
 80008f8:	f000 fdc8 	bl	800148c <setGreen>
		setBuffer7SEG(0, timerLed[1] / 1000);
 80008fc:	4b26      	ldr	r3, [pc, #152]	; (8000998 <fsm_automatic_run0+0x100>)
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	4a26      	ldr	r2, [pc, #152]	; (800099c <fsm_automatic_run0+0x104>)
 8000902:	fb82 1203 	smull	r1, r2, r2, r3
 8000906:	1192      	asrs	r2, r2, #6
 8000908:	17db      	asrs	r3, r3, #31
 800090a:	1ad3      	subs	r3, r2, r3
 800090c:	4619      	mov	r1, r3
 800090e:	2000      	movs	r0, #0
 8000910:	f7ff fc6e 	bl	80001f0 <setBuffer7SEG>
		SCH_Add_Task(fsm_automatic_run0, timerLed[1], 0);
 8000914:	4b20      	ldr	r3, [pc, #128]	; (8000998 <fsm_automatic_run0+0x100>)
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	2200      	movs	r2, #0
 800091a:	4619      	mov	r1, r3
 800091c:	4820      	ldr	r0, [pc, #128]	; (80009a0 <fsm_automatic_run0+0x108>)
 800091e:	f000 fb57 	bl	8000fd0 <SCH_Add_Task>
		break;
 8000922:	e034      	b.n	800098e <fsm_automatic_run0+0xf6>
	case AUTO_GREEN:
		status[0] = AUTO_YELLOW;
 8000924:	4b1b      	ldr	r3, [pc, #108]	; (8000994 <fsm_automatic_run0+0xfc>)
 8000926:	2203      	movs	r2, #3
 8000928:	601a      	str	r2, [r3, #0]
		setYellow(0);
 800092a:	2000      	movs	r0, #0
 800092c:	f000 fde2 	bl	80014f4 <setYellow>
		setBuffer7SEG(0, timerLed[2] / 1000);
 8000930:	4b19      	ldr	r3, [pc, #100]	; (8000998 <fsm_automatic_run0+0x100>)
 8000932:	689b      	ldr	r3, [r3, #8]
 8000934:	4a19      	ldr	r2, [pc, #100]	; (800099c <fsm_automatic_run0+0x104>)
 8000936:	fb82 1203 	smull	r1, r2, r2, r3
 800093a:	1192      	asrs	r2, r2, #6
 800093c:	17db      	asrs	r3, r3, #31
 800093e:	1ad3      	subs	r3, r2, r3
 8000940:	4619      	mov	r1, r3
 8000942:	2000      	movs	r0, #0
 8000944:	f7ff fc54 	bl	80001f0 <setBuffer7SEG>
		SCH_Add_Task(fsm_automatic_run0, timerLed[2], 0);
 8000948:	4b13      	ldr	r3, [pc, #76]	; (8000998 <fsm_automatic_run0+0x100>)
 800094a:	689b      	ldr	r3, [r3, #8]
 800094c:	2200      	movs	r2, #0
 800094e:	4619      	mov	r1, r3
 8000950:	4813      	ldr	r0, [pc, #76]	; (80009a0 <fsm_automatic_run0+0x108>)
 8000952:	f000 fb3d 	bl	8000fd0 <SCH_Add_Task>
		break;
 8000956:	e01a      	b.n	800098e <fsm_automatic_run0+0xf6>
	case AUTO_YELLOW:
		status[0] = AUTO_RED;
 8000958:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <fsm_automatic_run0+0xfc>)
 800095a:	2201      	movs	r2, #1
 800095c:	601a      	str	r2, [r3, #0]
		setRed(0);
 800095e:	2000      	movs	r0, #0
 8000960:	f000 fd60 	bl	8001424 <setRed>
		setBuffer7SEG(0, timerLed[0] / 1000);
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <fsm_automatic_run0+0x100>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a0c      	ldr	r2, [pc, #48]	; (800099c <fsm_automatic_run0+0x104>)
 800096a:	fb82 1203 	smull	r1, r2, r2, r3
 800096e:	1192      	asrs	r2, r2, #6
 8000970:	17db      	asrs	r3, r3, #31
 8000972:	1ad3      	subs	r3, r2, r3
 8000974:	4619      	mov	r1, r3
 8000976:	2000      	movs	r0, #0
 8000978:	f7ff fc3a 	bl	80001f0 <setBuffer7SEG>
		SCH_Add_Task(fsm_automatic_run0, timerLed[0], 0);
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <fsm_automatic_run0+0x100>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2200      	movs	r2, #0
 8000982:	4619      	mov	r1, r3
 8000984:	4806      	ldr	r0, [pc, #24]	; (80009a0 <fsm_automatic_run0+0x108>)
 8000986:	f000 fb23 	bl	8000fd0 <SCH_Add_Task>
		break;
 800098a:	e000      	b.n	800098e <fsm_automatic_run0+0xf6>
	default:
		break;
 800098c:	bf00      	nop
	}
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000100 	.word	0x20000100
 8000998:	20000048 	.word	0x20000048
 800099c:	10624dd3 	.word	0x10624dd3
 80009a0:	08000899 	.word	0x08000899

080009a4 <fsm_automatic_run1>:

void fsm_automatic_run1(){
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
	switch(status[1]){
 80009a8:	4b3d      	ldr	r3, [pc, #244]	; (8000aa0 <fsm_automatic_run1+0xfc>)
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	2b03      	cmp	r3, #3
 80009ae:	d873      	bhi.n	8000a98 <fsm_automatic_run1+0xf4>
 80009b0:	a201      	add	r2, pc, #4	; (adr r2, 80009b8 <fsm_automatic_run1+0x14>)
 80009b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009b6:	bf00      	nop
 80009b8:	080009c9 	.word	0x080009c9
 80009bc:	080009fd 	.word	0x080009fd
 80009c0:	08000a31 	.word	0x08000a31
 80009c4:	08000a65 	.word	0x08000a65
	case INIT:
		status[1] = AUTO_GREEN;
 80009c8:	4b35      	ldr	r3, [pc, #212]	; (8000aa0 <fsm_automatic_run1+0xfc>)
 80009ca:	2202      	movs	r2, #2
 80009cc:	605a      	str	r2, [r3, #4]
		setGreen(1);
 80009ce:	2001      	movs	r0, #1
 80009d0:	f000 fd5c 	bl	800148c <setGreen>
		setBuffer7SEG(1, timerLed[1] / 1000);
 80009d4:	4b33      	ldr	r3, [pc, #204]	; (8000aa4 <fsm_automatic_run1+0x100>)
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	4a33      	ldr	r2, [pc, #204]	; (8000aa8 <fsm_automatic_run1+0x104>)
 80009da:	fb82 1203 	smull	r1, r2, r2, r3
 80009de:	1192      	asrs	r2, r2, #6
 80009e0:	17db      	asrs	r3, r3, #31
 80009e2:	1ad3      	subs	r3, r2, r3
 80009e4:	4619      	mov	r1, r3
 80009e6:	2001      	movs	r0, #1
 80009e8:	f7ff fc02 	bl	80001f0 <setBuffer7SEG>
		SCH_Add_Task(fsm_automatic_run1, timerLed[1], 0);
 80009ec:	4b2d      	ldr	r3, [pc, #180]	; (8000aa4 <fsm_automatic_run1+0x100>)
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	2200      	movs	r2, #0
 80009f2:	4619      	mov	r1, r3
 80009f4:	482d      	ldr	r0, [pc, #180]	; (8000aac <fsm_automatic_run1+0x108>)
 80009f6:	f000 faeb 	bl	8000fd0 <SCH_Add_Task>
		break;
 80009fa:	e04e      	b.n	8000a9a <fsm_automatic_run1+0xf6>
	case AUTO_RED:
		status[1] = AUTO_GREEN;
 80009fc:	4b28      	ldr	r3, [pc, #160]	; (8000aa0 <fsm_automatic_run1+0xfc>)
 80009fe:	2202      	movs	r2, #2
 8000a00:	605a      	str	r2, [r3, #4]
		setRed(1);
 8000a02:	2001      	movs	r0, #1
 8000a04:	f000 fd0e 	bl	8001424 <setRed>
		setBuffer7SEG(1, timerLed[1] / 1000);
 8000a08:	4b26      	ldr	r3, [pc, #152]	; (8000aa4 <fsm_automatic_run1+0x100>)
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	4a26      	ldr	r2, [pc, #152]	; (8000aa8 <fsm_automatic_run1+0x104>)
 8000a0e:	fb82 1203 	smull	r1, r2, r2, r3
 8000a12:	1192      	asrs	r2, r2, #6
 8000a14:	17db      	asrs	r3, r3, #31
 8000a16:	1ad3      	subs	r3, r2, r3
 8000a18:	4619      	mov	r1, r3
 8000a1a:	2001      	movs	r0, #1
 8000a1c:	f7ff fbe8 	bl	80001f0 <setBuffer7SEG>
		SCH_Add_Task(fsm_automatic_run1, timerLed[1], 0);
 8000a20:	4b20      	ldr	r3, [pc, #128]	; (8000aa4 <fsm_automatic_run1+0x100>)
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	2200      	movs	r2, #0
 8000a26:	4619      	mov	r1, r3
 8000a28:	4820      	ldr	r0, [pc, #128]	; (8000aac <fsm_automatic_run1+0x108>)
 8000a2a:	f000 fad1 	bl	8000fd0 <SCH_Add_Task>
		break;
 8000a2e:	e034      	b.n	8000a9a <fsm_automatic_run1+0xf6>
	case AUTO_GREEN:
		status[1] = AUTO_YELLOW;
 8000a30:	4b1b      	ldr	r3, [pc, #108]	; (8000aa0 <fsm_automatic_run1+0xfc>)
 8000a32:	2203      	movs	r2, #3
 8000a34:	605a      	str	r2, [r3, #4]
		setYellow(1);
 8000a36:	2001      	movs	r0, #1
 8000a38:	f000 fd5c 	bl	80014f4 <setYellow>
		setBuffer7SEG(1, timerLed[2] / 1000);
 8000a3c:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <fsm_automatic_run1+0x100>)
 8000a3e:	689b      	ldr	r3, [r3, #8]
 8000a40:	4a19      	ldr	r2, [pc, #100]	; (8000aa8 <fsm_automatic_run1+0x104>)
 8000a42:	fb82 1203 	smull	r1, r2, r2, r3
 8000a46:	1192      	asrs	r2, r2, #6
 8000a48:	17db      	asrs	r3, r3, #31
 8000a4a:	1ad3      	subs	r3, r2, r3
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	2001      	movs	r0, #1
 8000a50:	f7ff fbce 	bl	80001f0 <setBuffer7SEG>
		SCH_Add_Task(fsm_automatic_run1, timerLed[2], 0);
 8000a54:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <fsm_automatic_run1+0x100>)
 8000a56:	689b      	ldr	r3, [r3, #8]
 8000a58:	2200      	movs	r2, #0
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4813      	ldr	r0, [pc, #76]	; (8000aac <fsm_automatic_run1+0x108>)
 8000a5e:	f000 fab7 	bl	8000fd0 <SCH_Add_Task>
		break;
 8000a62:	e01a      	b.n	8000a9a <fsm_automatic_run1+0xf6>
	case AUTO_YELLOW:
		status[1] = AUTO_RED;
 8000a64:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <fsm_automatic_run1+0xfc>)
 8000a66:	2201      	movs	r2, #1
 8000a68:	605a      	str	r2, [r3, #4]
		setRed(1);
 8000a6a:	2001      	movs	r0, #1
 8000a6c:	f000 fcda 	bl	8001424 <setRed>
		setBuffer7SEG(1, timerLed[0] / 1000);
 8000a70:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <fsm_automatic_run1+0x100>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a0c      	ldr	r2, [pc, #48]	; (8000aa8 <fsm_automatic_run1+0x104>)
 8000a76:	fb82 1203 	smull	r1, r2, r2, r3
 8000a7a:	1192      	asrs	r2, r2, #6
 8000a7c:	17db      	asrs	r3, r3, #31
 8000a7e:	1ad3      	subs	r3, r2, r3
 8000a80:	4619      	mov	r1, r3
 8000a82:	2001      	movs	r0, #1
 8000a84:	f7ff fbb4 	bl	80001f0 <setBuffer7SEG>
		SCH_Add_Task(fsm_automatic_run1, timerLed[0], 0);
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <fsm_automatic_run1+0x100>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4806      	ldr	r0, [pc, #24]	; (8000aac <fsm_automatic_run1+0x108>)
 8000a92:	f000 fa9d 	bl	8000fd0 <SCH_Add_Task>
		break;
 8000a96:	e000      	b.n	8000a9a <fsm_automatic_run1+0xf6>
	default:
		break;
 8000a98:	bf00      	nop
	}
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000100 	.word	0x20000100
 8000aa4:	20000048 	.word	0x20000048
 8000aa8:	10624dd3 	.word	0x10624dd3
 8000aac:	080009a5 	.word	0x080009a5

08000ab0 <fsm_manual_run>:
#include "fsm_manual.h"
#include "traffic_light.h"
#include "global.h"
#include "scheduler.h"

void fsm_manual_run(){
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	switch (status[0]){
 8000ab4:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <fsm_manual_run+0x34>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b0d      	cmp	r3, #13
 8000aba:	d00c      	beq.n	8000ad6 <fsm_manual_run+0x26>
 8000abc:	2b0d      	cmp	r3, #13
 8000abe:	dc0d      	bgt.n	8000adc <fsm_manual_run+0x2c>
 8000ac0:	2b0b      	cmp	r3, #11
 8000ac2:	d002      	beq.n	8000aca <fsm_manual_run+0x1a>
 8000ac4:	2b0c      	cmp	r3, #12
 8000ac6:	d003      	beq.n	8000ad0 <fsm_manual_run+0x20>
		break;
	case MANUAL_YELLOW:
		blinkYellow();
		break;
	default:
		break;
 8000ac8:	e008      	b.n	8000adc <fsm_manual_run+0x2c>
		blinkRed();
 8000aca:	f000 fd47 	bl	800155c <blinkRed>
		break;
 8000ace:	e006      	b.n	8000ade <fsm_manual_run+0x2e>
		blinkGreen();
 8000ad0:	f000 fd88 	bl	80015e4 <blinkGreen>
		break;
 8000ad4:	e003      	b.n	8000ade <fsm_manual_run+0x2e>
		blinkYellow();
 8000ad6:	f000 fd63 	bl	80015a0 <blinkYellow>
		break;
 8000ada:	e000      	b.n	8000ade <fsm_manual_run+0x2e>
		break;
 8000adc:	bf00      	nop
	}
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000100 	.word	0x20000100

08000ae8 <fsm_setting_run>:
#include "fsm_automatic.h"
#include "fsm_manual.h"

int tmp[3] = {5000, 3000, 2000};

void fsm_setting_run(){
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
	if(status[0] > 10){
 8000aee:	4b86      	ldr	r3, [pc, #536]	; (8000d08 <fsm_setting_run+0x220>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	2b0a      	cmp	r3, #10
 8000af4:	dd70      	ble.n	8000bd8 <fsm_setting_run+0xf0>
		if(isButton2Pressed()){
 8000af6:	f7ff fdd9 	bl	80006ac <isButton2Pressed>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d052      	beq.n	8000ba6 <fsm_setting_run+0xbe>
			switch(status[0]){
 8000b00:	4b81      	ldr	r3, [pc, #516]	; (8000d08 <fsm_setting_run+0x220>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2b0d      	cmp	r3, #13
 8000b06:	d036      	beq.n	8000b76 <fsm_setting_run+0x8e>
 8000b08:	2b0d      	cmp	r3, #13
 8000b0a:	dc4e      	bgt.n	8000baa <fsm_setting_run+0xc2>
 8000b0c:	2b0b      	cmp	r3, #11
 8000b0e:	d002      	beq.n	8000b16 <fsm_setting_run+0x2e>
 8000b10:	2b0c      	cmp	r3, #12
 8000b12:	d018      	beq.n	8000b46 <fsm_setting_run+0x5e>
			case MANUAL_YELLOW:
				if(tmp[2] < 99*1000) tmp[2] = tmp[2] + 1000;
				setBuffer7SEG(0, tmp[2] / 1000);
				break;
			default:
				break;
 8000b14:	e049      	b.n	8000baa <fsm_setting_run+0xc2>
				if(tmp[0] < 99*1000) tmp[0] = tmp[0] + 1000;
 8000b16:	4b7d      	ldr	r3, [pc, #500]	; (8000d0c <fsm_setting_run+0x224>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a7d      	ldr	r2, [pc, #500]	; (8000d10 <fsm_setting_run+0x228>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	dc05      	bgt.n	8000b2c <fsm_setting_run+0x44>
 8000b20:	4b7a      	ldr	r3, [pc, #488]	; (8000d0c <fsm_setting_run+0x224>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000b28:	4a78      	ldr	r2, [pc, #480]	; (8000d0c <fsm_setting_run+0x224>)
 8000b2a:	6013      	str	r3, [r2, #0]
				setBuffer7SEG(0, tmp[0] / 1000);
 8000b2c:	4b77      	ldr	r3, [pc, #476]	; (8000d0c <fsm_setting_run+0x224>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a78      	ldr	r2, [pc, #480]	; (8000d14 <fsm_setting_run+0x22c>)
 8000b32:	fb82 1203 	smull	r1, r2, r2, r3
 8000b36:	1192      	asrs	r2, r2, #6
 8000b38:	17db      	asrs	r3, r3, #31
 8000b3a:	1ad3      	subs	r3, r2, r3
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f7ff fb56 	bl	80001f0 <setBuffer7SEG>
				break;
 8000b44:	e032      	b.n	8000bac <fsm_setting_run+0xc4>
				if(tmp[1] < 99*1000) tmp[1] = tmp[1] + 1000;
 8000b46:	4b71      	ldr	r3, [pc, #452]	; (8000d0c <fsm_setting_run+0x224>)
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	4a71      	ldr	r2, [pc, #452]	; (8000d10 <fsm_setting_run+0x228>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	dc05      	bgt.n	8000b5c <fsm_setting_run+0x74>
 8000b50:	4b6e      	ldr	r3, [pc, #440]	; (8000d0c <fsm_setting_run+0x224>)
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000b58:	4a6c      	ldr	r2, [pc, #432]	; (8000d0c <fsm_setting_run+0x224>)
 8000b5a:	6053      	str	r3, [r2, #4]
				setBuffer7SEG(0, tmp[1] / 1000);
 8000b5c:	4b6b      	ldr	r3, [pc, #428]	; (8000d0c <fsm_setting_run+0x224>)
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	4a6c      	ldr	r2, [pc, #432]	; (8000d14 <fsm_setting_run+0x22c>)
 8000b62:	fb82 1203 	smull	r1, r2, r2, r3
 8000b66:	1192      	asrs	r2, r2, #6
 8000b68:	17db      	asrs	r3, r3, #31
 8000b6a:	1ad3      	subs	r3, r2, r3
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	2000      	movs	r0, #0
 8000b70:	f7ff fb3e 	bl	80001f0 <setBuffer7SEG>
				break;
 8000b74:	e01a      	b.n	8000bac <fsm_setting_run+0xc4>
				if(tmp[2] < 99*1000) tmp[2] = tmp[2] + 1000;
 8000b76:	4b65      	ldr	r3, [pc, #404]	; (8000d0c <fsm_setting_run+0x224>)
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	4a65      	ldr	r2, [pc, #404]	; (8000d10 <fsm_setting_run+0x228>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	dc05      	bgt.n	8000b8c <fsm_setting_run+0xa4>
 8000b80:	4b62      	ldr	r3, [pc, #392]	; (8000d0c <fsm_setting_run+0x224>)
 8000b82:	689b      	ldr	r3, [r3, #8]
 8000b84:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000b88:	4a60      	ldr	r2, [pc, #384]	; (8000d0c <fsm_setting_run+0x224>)
 8000b8a:	6093      	str	r3, [r2, #8]
				setBuffer7SEG(0, tmp[2] / 1000);
 8000b8c:	4b5f      	ldr	r3, [pc, #380]	; (8000d0c <fsm_setting_run+0x224>)
 8000b8e:	689b      	ldr	r3, [r3, #8]
 8000b90:	4a60      	ldr	r2, [pc, #384]	; (8000d14 <fsm_setting_run+0x22c>)
 8000b92:	fb82 1203 	smull	r1, r2, r2, r3
 8000b96:	1192      	asrs	r2, r2, #6
 8000b98:	17db      	asrs	r3, r3, #31
 8000b9a:	1ad3      	subs	r3, r2, r3
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	f7ff fb26 	bl	80001f0 <setBuffer7SEG>
				break;
 8000ba4:	e002      	b.n	8000bac <fsm_setting_run+0xc4>
			}
		}
 8000ba6:	bf00      	nop
 8000ba8:	e000      	b.n	8000bac <fsm_setting_run+0xc4>
				break;
 8000baa:	bf00      	nop
		if(isButton3Pressed()){
 8000bac:	f7ff fd90 	bl	80006d0 <isButton3Pressed>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d010      	beq.n	8000bd8 <fsm_setting_run+0xf0>
			for(int i = 0; i < 3; i++){
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	e00a      	b.n	8000bd2 <fsm_setting_run+0xea>
				timerLed[i] = tmp[i];
 8000bbc:	4a53      	ldr	r2, [pc, #332]	; (8000d0c <fsm_setting_run+0x224>)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000bc4:	4954      	ldr	r1, [pc, #336]	; (8000d18 <fsm_setting_run+0x230>)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(int i = 0; i < 3; i++){
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	607b      	str	r3, [r7, #4]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2b02      	cmp	r3, #2
 8000bd6:	ddf1      	ble.n	8000bbc <fsm_setting_run+0xd4>
			}
		}
	}
	if (isButton1Pressed()){
 8000bd8:	f7ff fd56 	bl	8000688 <isButton1Pressed>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	f000 808e 	beq.w	8000d00 <fsm_setting_run+0x218>
		if (status[0] > 10){
 8000be4:	4b48      	ldr	r3, [pc, #288]	; (8000d08 <fsm_setting_run+0x220>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b0a      	cmp	r3, #10
 8000bea:	dd4e      	ble.n	8000c8a <fsm_setting_run+0x1a2>
			switch (status[0]){
 8000bec:	4b46      	ldr	r3, [pc, #280]	; (8000d08 <fsm_setting_run+0x220>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b0d      	cmp	r3, #13
 8000bf2:	d035      	beq.n	8000c60 <fsm_setting_run+0x178>
 8000bf4:	2b0d      	cmp	r3, #13
 8000bf6:	f300 8082 	bgt.w	8000cfe <fsm_setting_run+0x216>
 8000bfa:	2b0b      	cmp	r3, #11
 8000bfc:	d002      	beq.n	8000c04 <fsm_setting_run+0x11c>
 8000bfe:	2b0c      	cmp	r3, #12
 8000c00:	d017      	beq.n	8000c32 <fsm_setting_run+0x14a>
				fsm_automatic_run0();
				fsm_automatic_run1();
				SCH_Add_Task(updateBuffer7SEG, 1000, 1000);
				break;
			default:
				break;
 8000c02:	e07c      	b.n	8000cfe <fsm_setting_run+0x216>
				status[0] = MANUAL_GREEN;
 8000c04:	4b40      	ldr	r3, [pc, #256]	; (8000d08 <fsm_setting_run+0x220>)
 8000c06:	220c      	movs	r2, #12
 8000c08:	601a      	str	r2, [r3, #0]
				status[1] = MANUAL_GREEN;
 8000c0a:	4b3f      	ldr	r3, [pc, #252]	; (8000d08 <fsm_setting_run+0x220>)
 8000c0c:	220c      	movs	r2, #12
 8000c0e:	605a      	str	r2, [r3, #4]
				setBuffer7SEG(0, tmp[1] / 1000);
 8000c10:	4b3e      	ldr	r3, [pc, #248]	; (8000d0c <fsm_setting_run+0x224>)
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	4a3f      	ldr	r2, [pc, #252]	; (8000d14 <fsm_setting_run+0x22c>)
 8000c16:	fb82 1203 	smull	r1, r2, r2, r3
 8000c1a:	1192      	asrs	r2, r2, #6
 8000c1c:	17db      	asrs	r3, r3, #31
 8000c1e:	1ad3      	subs	r3, r2, r3
 8000c20:	4619      	mov	r1, r3
 8000c22:	2000      	movs	r0, #0
 8000c24:	f7ff fae4 	bl	80001f0 <setBuffer7SEG>
				setBuffer7SEG(0, 3);
 8000c28:	2103      	movs	r1, #3
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f7ff fae0 	bl	80001f0 <setBuffer7SEG>
				break;
 8000c30:	e066      	b.n	8000d00 <fsm_setting_run+0x218>
				status[0] = MANUAL_YELLOW;
 8000c32:	4b35      	ldr	r3, [pc, #212]	; (8000d08 <fsm_setting_run+0x220>)
 8000c34:	220d      	movs	r2, #13
 8000c36:	601a      	str	r2, [r3, #0]
				status[1] = MANUAL_YELLOW;
 8000c38:	4b33      	ldr	r3, [pc, #204]	; (8000d08 <fsm_setting_run+0x220>)
 8000c3a:	220d      	movs	r2, #13
 8000c3c:	605a      	str	r2, [r3, #4]
				setBuffer7SEG(0, tmp[2] / 1000);
 8000c3e:	4b33      	ldr	r3, [pc, #204]	; (8000d0c <fsm_setting_run+0x224>)
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	4a34      	ldr	r2, [pc, #208]	; (8000d14 <fsm_setting_run+0x22c>)
 8000c44:	fb82 1203 	smull	r1, r2, r2, r3
 8000c48:	1192      	asrs	r2, r2, #6
 8000c4a:	17db      	asrs	r3, r3, #31
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	4619      	mov	r1, r3
 8000c50:	2000      	movs	r0, #0
 8000c52:	f7ff facd 	bl	80001f0 <setBuffer7SEG>
				setBuffer7SEG(1, 4);
 8000c56:	2104      	movs	r1, #4
 8000c58:	2001      	movs	r0, #1
 8000c5a:	f7ff fac9 	bl	80001f0 <setBuffer7SEG>
				break;
 8000c5e:	e04f      	b.n	8000d00 <fsm_setting_run+0x218>
				status[0] = INIT;
 8000c60:	4b29      	ldr	r3, [pc, #164]	; (8000d08 <fsm_setting_run+0x220>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
				status[1] = INIT;
 8000c66:	4b28      	ldr	r3, [pc, #160]	; (8000d08 <fsm_setting_run+0x220>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	605a      	str	r2, [r3, #4]
				SCH_Delete(fsm_manual_run);
 8000c6c:	482b      	ldr	r0, [pc, #172]	; (8000d1c <fsm_setting_run+0x234>)
 8000c6e:	f000 faa5 	bl	80011bc <SCH_Delete>
				fsm_automatic_run0();
 8000c72:	f7ff fe11 	bl	8000898 <fsm_automatic_run0>
				fsm_automatic_run1();
 8000c76:	f7ff fe95 	bl	80009a4 <fsm_automatic_run1>
				SCH_Add_Task(updateBuffer7SEG, 1000, 1000);
 8000c7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c7e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c82:	4827      	ldr	r0, [pc, #156]	; (8000d20 <fsm_setting_run+0x238>)
 8000c84:	f000 f9a4 	bl	8000fd0 <SCH_Add_Task>
				break;
 8000c88:	e03a      	b.n	8000d00 <fsm_setting_run+0x218>
			}
		}
		else if (status[0] < 10 ){
 8000c8a:	4b1f      	ldr	r3, [pc, #124]	; (8000d08 <fsm_setting_run+0x220>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2b09      	cmp	r3, #9
 8000c90:	dc36      	bgt.n	8000d00 <fsm_setting_run+0x218>
			for (int i = 0; i < 3; i++){
 8000c92:	2300      	movs	r3, #0
 8000c94:	603b      	str	r3, [r7, #0]
 8000c96:	e00a      	b.n	8000cae <fsm_setting_run+0x1c6>
				tmp[i] = timerLed[i];
 8000c98:	4a1f      	ldr	r2, [pc, #124]	; (8000d18 <fsm_setting_run+0x230>)
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ca0:	491a      	ldr	r1, [pc, #104]	; (8000d0c <fsm_setting_run+0x224>)
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for (int i = 0; i < 3; i++){
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	3301      	adds	r3, #1
 8000cac:	603b      	str	r3, [r7, #0]
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	ddf1      	ble.n	8000c98 <fsm_setting_run+0x1b0>
			}

			SCH_Delete(fsm_automatic_run0);
 8000cb4:	481b      	ldr	r0, [pc, #108]	; (8000d24 <fsm_setting_run+0x23c>)
 8000cb6:	f000 fa81 	bl	80011bc <SCH_Delete>
			SCH_Delete(fsm_automatic_run1);
 8000cba:	481b      	ldr	r0, [pc, #108]	; (8000d28 <fsm_setting_run+0x240>)
 8000cbc:	f000 fa7e 	bl	80011bc <SCH_Delete>
			SCH_Delete(updateBuffer7SEG);
 8000cc0:	4817      	ldr	r0, [pc, #92]	; (8000d20 <fsm_setting_run+0x238>)
 8000cc2:	f000 fa7b 	bl	80011bc <SCH_Delete>
			status[0] = MANUAL_RED;
 8000cc6:	4b10      	ldr	r3, [pc, #64]	; (8000d08 <fsm_setting_run+0x220>)
 8000cc8:	220b      	movs	r2, #11
 8000cca:	601a      	str	r2, [r3, #0]
			status[1] = MANUAL_RED;
 8000ccc:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <fsm_setting_run+0x220>)
 8000cce:	220b      	movs	r2, #11
 8000cd0:	605a      	str	r2, [r3, #4]
			setBuffer7SEG(0, timerLed[0] / 1000);
 8000cd2:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <fsm_setting_run+0x230>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a0f      	ldr	r2, [pc, #60]	; (8000d14 <fsm_setting_run+0x22c>)
 8000cd8:	fb82 1203 	smull	r1, r2, r2, r3
 8000cdc:	1192      	asrs	r2, r2, #6
 8000cde:	17db      	asrs	r3, r3, #31
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	f7ff fa83 	bl	80001f0 <setBuffer7SEG>
			setBuffer7SEG(1, 2);
 8000cea:	2102      	movs	r1, #2
 8000cec:	2001      	movs	r0, #1
 8000cee:	f7ff fa7f 	bl	80001f0 <setBuffer7SEG>
			SCH_Add_Task(fsm_manual_run, 0, 250);
 8000cf2:	22fa      	movs	r2, #250	; 0xfa
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4809      	ldr	r0, [pc, #36]	; (8000d1c <fsm_setting_run+0x234>)
 8000cf8:	f000 f96a 	bl	8000fd0 <SCH_Add_Task>
		}
	}
}
 8000cfc:	e000      	b.n	8000d00 <fsm_setting_run+0x218>
				break;
 8000cfe:	bf00      	nop
}
 8000d00:	bf00      	nop
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000100 	.word	0x20000100
 8000d0c:	2000003c 	.word	0x2000003c
 8000d10:	000182b7 	.word	0x000182b7
 8000d14:	10624dd3 	.word	0x10624dd3
 8000d18:	20000048 	.word	0x20000048
 8000d1c:	08000ab1 	.word	0x08000ab1
 8000d20:	0800014d 	.word	0x0800014d
 8000d24:	08000899 	.word	0x08000899
 8000d28:	080009a5 	.word	0x080009a5

08000d2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d30:	f000 fca4 	bl	800167c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d34:	f000 f840 	bl	8000db8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d38:	f000 f8c6 	bl	8000ec8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000d3c:	f000 f878 	bl	8000e30 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000d40:	4816      	ldr	r0, [pc, #88]	; (8000d9c <main+0x70>)
 8000d42:	f001 fbf9 	bl	8002538 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Init();
 8000d46:	f000 f931 	bl	8000fac <SCH_Init>
  SCH_Add_Task(fsm_automatic_run0, 1000, 0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d50:	4813      	ldr	r0, [pc, #76]	; (8000da0 <main+0x74>)
 8000d52:	f000 f93d 	bl	8000fd0 <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic_run1, 1000, 0);
 8000d56:	2200      	movs	r2, #0
 8000d58:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d5c:	4811      	ldr	r0, [pc, #68]	; (8000da4 <main+0x78>)
 8000d5e:	f000 f937 	bl	8000fd0 <SCH_Add_Task>
  SCH_Add_Task(update7SEG, 1000, 250);
 8000d62:	22fa      	movs	r2, #250	; 0xfa
 8000d64:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d68:	480f      	ldr	r0, [pc, #60]	; (8000da8 <main+0x7c>)
 8000d6a:	f000 f931 	bl	8000fd0 <SCH_Add_Task>
  SCH_Add_Task(updateBuffer7SEG, 1000, 1000);
 8000d6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d72:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d76:	480d      	ldr	r0, [pc, #52]	; (8000dac <main+0x80>)
 8000d78:	f000 f92a 	bl	8000fd0 <SCH_Add_Task>
  SCH_Add_Task(fsm_setting_run, 1000, 10);
 8000d7c:	220a      	movs	r2, #10
 8000d7e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d82:	480b      	ldr	r0, [pc, #44]	; (8000db0 <main+0x84>)
 8000d84:	f000 f924 	bl	8000fd0 <SCH_Add_Task>
  SCH_Add_Task(getKeyInput, 1000, 10);
 8000d88:	220a      	movs	r2, #10
 8000d8a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d8e:	4809      	ldr	r0, [pc, #36]	; (8000db4 <main+0x88>)
 8000d90:	f000 f91e 	bl	8000fd0 <SCH_Add_Task>
  //SCH_Add_Task(test1, 1000, 1000);
  //SCH_Add_Task(test2, 2000, 1000);
  //SCH_Add_Task(test3, 1000, 10);
  while (1)
  {
	  SCH_Dispatch_Tasks();
 8000d94:	f000 f9c8 	bl	8001128 <SCH_Dispatch_Tasks>
 8000d98:	e7fc      	b.n	8000d94 <main+0x68>
 8000d9a:	bf00      	nop
 8000d9c:	20000114 	.word	0x20000114
 8000da0:	08000899 	.word	0x08000899
 8000da4:	080009a5 	.word	0x080009a5
 8000da8:	08000249 	.word	0x08000249
 8000dac:	0800014d 	.word	0x0800014d
 8000db0:	08000ae9 	.word	0x08000ae9
 8000db4:	080006f5 	.word	0x080006f5

08000db8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b090      	sub	sp, #64	; 0x40
 8000dbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dbe:	f107 0318 	add.w	r3, r7, #24
 8000dc2:	2228      	movs	r2, #40	; 0x28
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f001 ff7c 	bl	8002cc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
 8000dd8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dde:	2301      	movs	r3, #1
 8000de0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000de2:	2310      	movs	r3, #16
 8000de4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000de6:	2300      	movs	r3, #0
 8000de8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dea:	f107 0318 	add.w	r3, r7, #24
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 ff76 	bl	8001ce0 <HAL_RCC_OscConfig>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000dfa:	f000 f8d1 	bl	8000fa0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dfe:	230f      	movs	r3, #15
 8000e00:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e02:	2300      	movs	r3, #0
 8000e04:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e12:	1d3b      	adds	r3, r7, #4
 8000e14:	2100      	movs	r1, #0
 8000e16:	4618      	mov	r0, r3
 8000e18:	f001 f9e2 	bl	80021e0 <HAL_RCC_ClockConfig>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000e22:	f000 f8bd 	bl	8000fa0 <Error_Handler>
  }
}
 8000e26:	bf00      	nop
 8000e28:	3740      	adds	r7, #64	; 0x40
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
	...

08000e30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e36:	f107 0308 	add.w	r3, r7, #8
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e44:	463b      	mov	r3, r7
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e4c:	4b1d      	ldr	r3, [pc, #116]	; (8000ec4 <MX_TIM2_Init+0x94>)
 8000e4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000e54:	4b1b      	ldr	r3, [pc, #108]	; (8000ec4 <MX_TIM2_Init+0x94>)
 8000e56:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000e5a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5c:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <MX_TIM2_Init+0x94>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000e62:	4b18      	ldr	r3, [pc, #96]	; (8000ec4 <MX_TIM2_Init+0x94>)
 8000e64:	2209      	movs	r2, #9
 8000e66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e68:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <MX_TIM2_Init+0x94>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e6e:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <MX_TIM2_Init+0x94>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e74:	4813      	ldr	r0, [pc, #76]	; (8000ec4 <MX_TIM2_Init+0x94>)
 8000e76:	f001 fb0f 	bl	8002498 <HAL_TIM_Base_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e80:	f000 f88e 	bl	8000fa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e8a:	f107 0308 	add.w	r3, r7, #8
 8000e8e:	4619      	mov	r1, r3
 8000e90:	480c      	ldr	r0, [pc, #48]	; (8000ec4 <MX_TIM2_Init+0x94>)
 8000e92:	f001 fc8d 	bl	80027b0 <HAL_TIM_ConfigClockSource>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e9c:	f000 f880 	bl	8000fa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ea8:	463b      	mov	r3, r7
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <MX_TIM2_Init+0x94>)
 8000eae:	f001 fe65 	bl	8002b7c <HAL_TIMEx_MasterConfigSynchronization>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000eb8:	f000 f872 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ebc:	bf00      	nop
 8000ebe:	3718      	adds	r7, #24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000114 	.word	0x20000114

08000ec8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ece:	f107 0308 	add.w	r3, r7, #8
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]
 8000ed8:	609a      	str	r2, [r3, #8]
 8000eda:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000edc:	4b28      	ldr	r3, [pc, #160]	; (8000f80 <MX_GPIO_Init+0xb8>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	4a27      	ldr	r2, [pc, #156]	; (8000f80 <MX_GPIO_Init+0xb8>)
 8000ee2:	f043 0304 	orr.w	r3, r3, #4
 8000ee6:	6193      	str	r3, [r2, #24]
 8000ee8:	4b25      	ldr	r3, [pc, #148]	; (8000f80 <MX_GPIO_Init+0xb8>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	f003 0304 	and.w	r3, r3, #4
 8000ef0:	607b      	str	r3, [r7, #4]
 8000ef2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef4:	4b22      	ldr	r3, [pc, #136]	; (8000f80 <MX_GPIO_Init+0xb8>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	4a21      	ldr	r2, [pc, #132]	; (8000f80 <MX_GPIO_Init+0xb8>)
 8000efa:	f043 0308 	orr.w	r3, r3, #8
 8000efe:	6193      	str	r3, [r2, #24]
 8000f00:	4b1f      	ldr	r3, [pc, #124]	; (8000f80 <MX_GPIO_Init+0xb8>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	f003 0308 	and.w	r3, r3, #8
 8000f08:	603b      	str	r3, [r7, #0]
 8000f0a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	21fc      	movs	r1, #252	; 0xfc
 8000f10:	481c      	ldr	r0, [pc, #112]	; (8000f84 <MX_GPIO_Init+0xbc>)
 8000f12:	f000 feb4 	bl	8001c7e <HAL_GPIO_WritePin>
                          |LED5_Pin|LED6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|EN4_Pin
 8000f16:	2200      	movs	r2, #0
 8000f18:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8000f1c:	481a      	ldr	r0, [pc, #104]	; (8000f88 <MX_GPIO_Init+0xc0>)
 8000f1e:	f000 feae 	bl	8001c7e <HAL_GPIO_WritePin>
                          |SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin
                          |EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
                           LED5_Pin LED6_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8000f22:	23fc      	movs	r3, #252	; 0xfc
 8000f24:	60bb      	str	r3, [r7, #8]
                          |LED5_Pin|LED6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f26:	2301      	movs	r3, #1
 8000f28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f32:	f107 0308 	add.w	r3, r7, #8
 8000f36:	4619      	mov	r1, r3
 8000f38:	4812      	ldr	r0, [pc, #72]	; (8000f84 <MX_GPIO_Init+0xbc>)
 8000f3a:	f000 fd0f 	bl	800195c <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin EN4_Pin
                           SEG3_Pin SEG4_Pin SEG5_Pin SEG6_Pin
                           EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|EN4_Pin
 8000f3e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000f42:	60bb      	str	r3, [r7, #8]
                          |SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin
                          |EN1_Pin|EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f44:	2301      	movs	r3, #1
 8000f46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f50:	f107 0308 	add.w	r3, r7, #8
 8000f54:	4619      	mov	r1, r3
 8000f56:	480c      	ldr	r0, [pc, #48]	; (8000f88 <MX_GPIO_Init+0xc0>)
 8000f58:	f000 fd00 	bl	800195c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin|B3_Pin;
 8000f5c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000f60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f66:	2301      	movs	r3, #1
 8000f68:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6a:	f107 0308 	add.w	r3, r7, #8
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4804      	ldr	r0, [pc, #16]	; (8000f84 <MX_GPIO_Init+0xbc>)
 8000f72:	f000 fcf3 	bl	800195c <HAL_GPIO_Init>

}
 8000f76:	bf00      	nop
 8000f78:	3718      	adds	r7, #24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40021000 	.word	0x40021000
 8000f84:	40010800 	.word	0x40010800
 8000f88:	40010c00 	.word	0x40010c00

08000f8c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8000f94:	f000 f8b6 	bl	8001104 <SCH_Update>
}
 8000f98:	bf00      	nop
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa4:	b672      	cpsid	i
}
 8000fa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <Error_Handler+0x8>
	...

08000fac <SCH_Init>:

#include "scheduler.h"

DLinkedList listTask;

void SCH_Init(void){
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
	listTask.head = NULL;
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <SCH_Init+0x20>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	605a      	str	r2, [r3, #4]
	listTask.tail = NULL;
 8000fb6:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <SCH_Init+0x20>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
	listTask.nTask = 0;
 8000fbc:	4b03      	ldr	r3, [pc, #12]	; (8000fcc <SCH_Init+0x20>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
}
 8000fc2:	bf00      	nop
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bc80      	pop	{r7}
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	2000015c 	.word	0x2000015c

08000fd0 <SCH_Add_Task>:

void SCH_Add_Task(void (*function)(), uint32_t DELAY, uint32_t PERIOD){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
	sTask * newTask = (sTask *) malloc (sizeof(sTask));
 8000fdc:	2014      	movs	r0, #20
 8000fde:	f001 fe61 	bl	8002ca4 <malloc>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	613b      	str	r3, [r7, #16]
	if (newTask == NULL) return;
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	f000 8082 	beq.w	80010f2 <SCH_Add_Task+0x122>

	newTask->pTask = function;
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	68fa      	ldr	r2, [r7, #12]
 8000ff2:	601a      	str	r2, [r3, #0]
	newTask->Delay = DELAY/10;
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	4a41      	ldr	r2, [pc, #260]	; (80010fc <SCH_Add_Task+0x12c>)
 8000ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffc:	08da      	lsrs	r2, r3, #3
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	605a      	str	r2, [r3, #4]
	newTask->Period = PERIOD/10;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a3d      	ldr	r2, [pc, #244]	; (80010fc <SCH_Add_Task+0x12c>)
 8001006:	fba2 2303 	umull	r2, r3, r2, r3
 800100a:	08da      	lsrs	r2, r3, #3
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	609a      	str	r2, [r3, #8]
	newTask->nextTask = NULL;
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	2200      	movs	r2, #0
 8001014:	611a      	str	r2, [r3, #16]
	newTask->preTask = NULL;
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	2200      	movs	r2, #0
 800101a:	60da      	str	r2, [r3, #12]


	if(listTask.head == NULL){
 800101c:	4b38      	ldr	r3, [pc, #224]	; (8001100 <SCH_Add_Task+0x130>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d10b      	bne.n	800103c <SCH_Add_Task+0x6c>
		listTask.head = newTask;
 8001024:	4a36      	ldr	r2, [pc, #216]	; (8001100 <SCH_Add_Task+0x130>)
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	6053      	str	r3, [r2, #4]
		listTask.tail = newTask;
 800102a:	4a35      	ldr	r2, [pc, #212]	; (8001100 <SCH_Add_Task+0x130>)
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	6093      	str	r3, [r2, #8]
		listTask.nTask++;
 8001030:	4b33      	ldr	r3, [pc, #204]	; (8001100 <SCH_Add_Task+0x130>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	3301      	adds	r3, #1
 8001036:	4a32      	ldr	r2, [pc, #200]	; (8001100 <SCH_Add_Task+0x130>)
 8001038:	6013      	str	r3, [r2, #0]
		return;
 800103a:	e05b      	b.n	80010f4 <SCH_Add_Task+0x124>
	}

	sTask *currTask = listTask.head;
 800103c:	4b30      	ldr	r3, [pc, #192]	; (8001100 <SCH_Add_Task+0x130>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	617b      	str	r3, [r7, #20]
	while(currTask != NULL && newTask->Delay >= currTask->Delay){
 8001042:	e009      	b.n	8001058 <SCH_Add_Task+0x88>
		newTask->Delay = newTask->Delay - currTask->Delay;
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	685a      	ldr	r2, [r3, #4]
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	1ad2      	subs	r2, r2, r3
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	605a      	str	r2, [r3, #4]
		currTask = currTask->nextTask;
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	691b      	ldr	r3, [r3, #16]
 8001056:	617b      	str	r3, [r7, #20]
	while(currTask != NULL && newTask->Delay >= currTask->Delay){
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d005      	beq.n	800106a <SCH_Add_Task+0x9a>
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	685a      	ldr	r2, [r3, #4]
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	429a      	cmp	r2, r3
 8001068:	d2ec      	bcs.n	8001044 <SCH_Add_Task+0x74>
	}

	if(currTask == listTask.head){
 800106a:	4b25      	ldr	r3, [pc, #148]	; (8001100 <SCH_Add_Task+0x130>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	697a      	ldr	r2, [r7, #20]
 8001070:	429a      	cmp	r2, r3
 8001072:	d114      	bne.n	800109e <SCH_Add_Task+0xce>
		newTask->nextTask = listTask.head;
 8001074:	4b22      	ldr	r3, [pc, #136]	; (8001100 <SCH_Add_Task+0x130>)
 8001076:	685a      	ldr	r2, [r3, #4]
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	611a      	str	r2, [r3, #16]
		listTask.head->preTask = newTask;
 800107c:	4b20      	ldr	r3, [pc, #128]	; (8001100 <SCH_Add_Task+0x130>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	60da      	str	r2, [r3, #12]
		listTask.head->Delay = listTask.head->Delay - newTask->Delay;
 8001084:	4b1e      	ldr	r3, [pc, #120]	; (8001100 <SCH_Add_Task+0x130>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	6859      	ldr	r1, [r3, #4]
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	685a      	ldr	r2, [r3, #4]
 800108e:	4b1c      	ldr	r3, [pc, #112]	; (8001100 <SCH_Add_Task+0x130>)
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	1a8a      	subs	r2, r1, r2
 8001094:	605a      	str	r2, [r3, #4]
		listTask.head = newTask;
 8001096:	4a1a      	ldr	r2, [pc, #104]	; (8001100 <SCH_Add_Task+0x130>)
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	6053      	str	r3, [r2, #4]
 800109c:	e023      	b.n	80010e6 <SCH_Add_Task+0x116>
	}
	else if(currTask == NULL){
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d10b      	bne.n	80010bc <SCH_Add_Task+0xec>
		newTask->preTask = listTask.tail;
 80010a4:	4b16      	ldr	r3, [pc, #88]	; (8001100 <SCH_Add_Task+0x130>)
 80010a6:	689a      	ldr	r2, [r3, #8]
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	60da      	str	r2, [r3, #12]
		listTask.tail->nextTask = newTask;
 80010ac:	4b14      	ldr	r3, [pc, #80]	; (8001100 <SCH_Add_Task+0x130>)
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	611a      	str	r2, [r3, #16]
		listTask.tail = newTask;
 80010b4:	4a12      	ldr	r2, [pc, #72]	; (8001100 <SCH_Add_Task+0x130>)
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	6093      	str	r3, [r2, #8]
 80010ba:	e014      	b.n	80010e6 <SCH_Add_Task+0x116>
	}
	else{
		newTask->nextTask = currTask;
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	697a      	ldr	r2, [r7, #20]
 80010c0:	611a      	str	r2, [r3, #16]
		newTask->preTask = currTask->preTask;
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	68da      	ldr	r2, [r3, #12]
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	60da      	str	r2, [r3, #12]
		currTask->preTask->nextTask = newTask;
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	611a      	str	r2, [r3, #16]
		currTask->preTask = newTask;
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	60da      	str	r2, [r3, #12]
		currTask->Delay = currTask->Delay - newTask->Delay;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	685a      	ldr	r2, [r3, #4]
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	1ad2      	subs	r2, r2, r3
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	605a      	str	r2, [r3, #4]
		}

	listTask.nTask++;
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <SCH_Add_Task+0x130>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	3301      	adds	r3, #1
 80010ec:	4a04      	ldr	r2, [pc, #16]	; (8001100 <SCH_Add_Task+0x130>)
 80010ee:	6013      	str	r3, [r2, #0]
 80010f0:	e000      	b.n	80010f4 <SCH_Add_Task+0x124>
	if (newTask == NULL) return;
 80010f2:	bf00      	nop
}
 80010f4:	3718      	adds	r7, #24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	cccccccd 	.word	0xcccccccd
 8001100:	2000015c 	.word	0x2000015c

08001104 <SCH_Update>:

void SCH_Update(void){
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
	if(listTask.head != NULL) listTask.head->Delay--;
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <SCH_Update+0x20>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d004      	beq.n	800111a <SCH_Update+0x16>
 8001110:	4b04      	ldr	r3, [pc, #16]	; (8001124 <SCH_Update+0x20>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	685a      	ldr	r2, [r3, #4]
 8001116:	3a01      	subs	r2, #1
 8001118:	605a      	str	r2, [r3, #4]
}
 800111a:	bf00      	nop
 800111c:	46bd      	mov	sp, r7
 800111e:	bc80      	pop	{r7}
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	2000015c 	.word	0x2000015c

08001128 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
	if(listTask.head == NULL) return;
 800112e:	4b22      	ldr	r3, [pc, #136]	; (80011b8 <SCH_Dispatch_Tasks+0x90>)
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d03b      	beq.n	80011ae <SCH_Dispatch_Tasks+0x86>

	if(listTask.head->Delay <= 0){
 8001136:	4b20      	ldr	r3, [pc, #128]	; (80011b8 <SCH_Dispatch_Tasks+0x90>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d137      	bne.n	80011b0 <SCH_Dispatch_Tasks+0x88>
		listTask.head->pTask();
 8001140:	4b1d      	ldr	r3, [pc, #116]	; (80011b8 <SCH_Dispatch_Tasks+0x90>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4798      	blx	r3
		sTask *removedTask = listTask.head;
 8001148:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <SCH_Dispatch_Tasks+0x90>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	607b      	str	r3, [r7, #4]
		listTask.head = listTask.head->nextTask;
 800114e:	4b1a      	ldr	r3, [pc, #104]	; (80011b8 <SCH_Dispatch_Tasks+0x90>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	691b      	ldr	r3, [r3, #16]
 8001154:	4a18      	ldr	r2, [pc, #96]	; (80011b8 <SCH_Dispatch_Tasks+0x90>)
 8001156:	6053      	str	r3, [r2, #4]

		if(listTask.head != NULL) listTask.head->preTask = NULL;
 8001158:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <SCH_Dispatch_Tasks+0x90>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d004      	beq.n	800116a <SCH_Dispatch_Tasks+0x42>
 8001160:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <SCH_Dispatch_Tasks+0x90>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	2200      	movs	r2, #0
 8001166:	60da      	str	r2, [r3, #12]
 8001168:	e002      	b.n	8001170 <SCH_Dispatch_Tasks+0x48>
		else listTask.tail = NULL;
 800116a:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <SCH_Dispatch_Tasks+0x90>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]

		listTask.nTask--;
 8001170:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <SCH_Dispatch_Tasks+0x90>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	3b01      	subs	r3, #1
 8001176:	4a10      	ldr	r2, [pc, #64]	; (80011b8 <SCH_Dispatch_Tasks+0x90>)
 8001178:	6013      	str	r3, [r2, #0]
		if(removedTask->Period > 0){
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d011      	beq.n	80011a6 <SCH_Dispatch_Tasks+0x7e>
			SCH_Add_Task(removedTask->pTask, removedTask->Period * 10, removedTask->Period * 10);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6818      	ldr	r0, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	689a      	ldr	r2, [r3, #8]
 800118a:	4613      	mov	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	4413      	add	r3, r2
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	4619      	mov	r1, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689a      	ldr	r2, [r3, #8]
 8001198:	4613      	mov	r3, r2
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	4413      	add	r3, r2
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	461a      	mov	r2, r3
 80011a2:	f7ff ff15 	bl	8000fd0 <SCH_Add_Task>
		}

		free(removedTask);
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f001 fd84 	bl	8002cb4 <free>
 80011ac:	e000      	b.n	80011b0 <SCH_Dispatch_Tasks+0x88>
	if(listTask.head == NULL) return;
 80011ae:	bf00      	nop
	}
}
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	2000015c 	.word	0x2000015c

080011bc <SCH_Delete>:

void SCH_Delete(void (*pFunction)()){
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	if(listTask.head == NULL) return;
 80011c4:	4b34      	ldr	r3, [pc, #208]	; (8001298 <SCH_Delete+0xdc>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d060      	beq.n	800128e <SCH_Delete+0xd2>

	sTask *currTask = listTask.head;
 80011cc:	4b32      	ldr	r3, [pc, #200]	; (8001298 <SCH_Delete+0xdc>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	60fb      	str	r3, [r7, #12]
	while(currTask != NULL){
 80011d2:	e058      	b.n	8001286 <SCH_Delete+0xca>
		if(currTask->pTask == pFunction){
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	429a      	cmp	r2, r3
 80011dc:	d150      	bne.n	8001280 <SCH_Delete+0xc4>
			sTask *removedTask = currTask;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	60bb      	str	r3, [r7, #8]
			currTask = currTask->nextTask;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	691b      	ldr	r3, [r3, #16]
 80011e6:	60fb      	str	r3, [r7, #12]

			if(removedTask == listTask.head){
 80011e8:	4b2b      	ldr	r3, [pc, #172]	; (8001298 <SCH_Delete+0xdc>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	68ba      	ldr	r2, [r7, #8]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d11a      	bne.n	8001228 <SCH_Delete+0x6c>
				listTask.head = listTask.head->nextTask;
 80011f2:	4b29      	ldr	r3, [pc, #164]	; (8001298 <SCH_Delete+0xdc>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	691b      	ldr	r3, [r3, #16]
 80011f8:	4a27      	ldr	r2, [pc, #156]	; (8001298 <SCH_Delete+0xdc>)
 80011fa:	6053      	str	r3, [r2, #4]
				if (listTask.head != NULL){
 80011fc:	4b26      	ldr	r3, [pc, #152]	; (8001298 <SCH_Delete+0xdc>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d00d      	beq.n	8001220 <SCH_Delete+0x64>
					listTask.head->preTask = NULL;
 8001204:	4b24      	ldr	r3, [pc, #144]	; (8001298 <SCH_Delete+0xdc>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	60da      	str	r2, [r3, #12]
					listTask.head->Delay = listTask.head->Delay + removedTask->Delay;
 800120c:	4b22      	ldr	r3, [pc, #136]	; (8001298 <SCH_Delete+0xdc>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	6859      	ldr	r1, [r3, #4]
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	685a      	ldr	r2, [r3, #4]
 8001216:	4b20      	ldr	r3, [pc, #128]	; (8001298 <SCH_Delete+0xdc>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	440a      	add	r2, r1
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	e026      	b.n	800126e <SCH_Delete+0xb2>
				}
				else{
					listTask.tail = NULL;
 8001220:	4b1d      	ldr	r3, [pc, #116]	; (8001298 <SCH_Delete+0xdc>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	e022      	b.n	800126e <SCH_Delete+0xb2>
				}
			}
			else if(removedTask == listTask.tail){
 8001228:	4b1b      	ldr	r3, [pc, #108]	; (8001298 <SCH_Delete+0xdc>)
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	68ba      	ldr	r2, [r7, #8]
 800122e:	429a      	cmp	r2, r3
 8001230:	d10a      	bne.n	8001248 <SCH_Delete+0x8c>
				listTask.tail->preTask->nextTask = NULL;
 8001232:	4b19      	ldr	r3, [pc, #100]	; (8001298 <SCH_Delete+0xdc>)
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	2200      	movs	r2, #0
 800123a:	611a      	str	r2, [r3, #16]
				listTask.tail = listTask.tail->preTask;
 800123c:	4b16      	ldr	r3, [pc, #88]	; (8001298 <SCH_Delete+0xdc>)
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	68db      	ldr	r3, [r3, #12]
 8001242:	4a15      	ldr	r2, [pc, #84]	; (8001298 <SCH_Delete+0xdc>)
 8001244:	6093      	str	r3, [r2, #8]
 8001246:	e012      	b.n	800126e <SCH_Delete+0xb2>
			}
			else{
				removedTask->preTask->nextTask = removedTask->nextTask;
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	68ba      	ldr	r2, [r7, #8]
 800124e:	6912      	ldr	r2, [r2, #16]
 8001250:	611a      	str	r2, [r3, #16]
				removedTask->nextTask->preTask = removedTask->preTask;
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	691b      	ldr	r3, [r3, #16]
 8001256:	68ba      	ldr	r2, [r7, #8]
 8001258:	68d2      	ldr	r2, [r2, #12]
 800125a:	60da      	str	r2, [r3, #12]
				removedTask->nextTask->Delay = removedTask->Delay + removedTask->nextTask->Delay;
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	6859      	ldr	r1, [r3, #4]
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	691b      	ldr	r3, [r3, #16]
 8001264:	685a      	ldr	r2, [r3, #4]
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	691b      	ldr	r3, [r3, #16]
 800126a:	440a      	add	r2, r1
 800126c:	605a      	str	r2, [r3, #4]
			}

			free(removedTask);
 800126e:	68b8      	ldr	r0, [r7, #8]
 8001270:	f001 fd20 	bl	8002cb4 <free>
			listTask.nTask--;
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <SCH_Delete+0xdc>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	3b01      	subs	r3, #1
 800127a:	4a07      	ldr	r2, [pc, #28]	; (8001298 <SCH_Delete+0xdc>)
 800127c:	6013      	str	r3, [r2, #0]
 800127e:	e002      	b.n	8001286 <SCH_Delete+0xca>
		}
		else currTask = currTask->nextTask;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	691b      	ldr	r3, [r3, #16]
 8001284:	60fb      	str	r3, [r7, #12]
	while(currTask != NULL){
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d1a3      	bne.n	80011d4 <SCH_Delete+0x18>
 800128c:	e000      	b.n	8001290 <SCH_Delete+0xd4>
	if(listTask.head == NULL) return;
 800128e:	bf00      	nop
	}
}
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	2000015c 	.word	0x2000015c

0800129c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012a2:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <HAL_MspInit+0x5c>)
 80012a4:	699b      	ldr	r3, [r3, #24]
 80012a6:	4a14      	ldr	r2, [pc, #80]	; (80012f8 <HAL_MspInit+0x5c>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	6193      	str	r3, [r2, #24]
 80012ae:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <HAL_MspInit+0x5c>)
 80012b0:	699b      	ldr	r3, [r3, #24]
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	60bb      	str	r3, [r7, #8]
 80012b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ba:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <HAL_MspInit+0x5c>)
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	4a0e      	ldr	r2, [pc, #56]	; (80012f8 <HAL_MspInit+0x5c>)
 80012c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c4:	61d3      	str	r3, [r2, #28]
 80012c6:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <HAL_MspInit+0x5c>)
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ce:	607b      	str	r3, [r7, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80012d2:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <HAL_MspInit+0x60>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	4a04      	ldr	r2, [pc, #16]	; (80012fc <HAL_MspInit+0x60>)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ee:	bf00      	nop
 80012f0:	3714      	adds	r7, #20
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr
 80012f8:	40021000 	.word	0x40021000
 80012fc:	40010000 	.word	0x40010000

08001300 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001310:	d113      	bne.n	800133a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001312:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <HAL_TIM_Base_MspInit+0x44>)
 8001314:	69db      	ldr	r3, [r3, #28]
 8001316:	4a0b      	ldr	r2, [pc, #44]	; (8001344 <HAL_TIM_Base_MspInit+0x44>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	61d3      	str	r3, [r2, #28]
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <HAL_TIM_Base_MspInit+0x44>)
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800132a:	2200      	movs	r2, #0
 800132c:	2100      	movs	r1, #0
 800132e:	201c      	movs	r0, #28
 8001330:	f000 fadd 	bl	80018ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001334:	201c      	movs	r0, #28
 8001336:	f000 faf6 	bl	8001926 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800133a:	bf00      	nop
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40021000 	.word	0x40021000

08001348 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800134c:	e7fe      	b.n	800134c <NMI_Handler+0x4>

0800134e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001352:	e7fe      	b.n	8001352 <HardFault_Handler+0x4>

08001354 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001358:	e7fe      	b.n	8001358 <MemManage_Handler+0x4>

0800135a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800135e:	e7fe      	b.n	800135e <BusFault_Handler+0x4>

08001360 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001364:	e7fe      	b.n	8001364 <UsageFault_Handler+0x4>

08001366 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	46bd      	mov	sp, r7
 800136e:	bc80      	pop	{r7}
 8001370:	4770      	bx	lr

08001372 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr

0800137e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr

0800138a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800138e:	f000 f9bb 	bl	8001708 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800139c:	4802      	ldr	r0, [pc, #8]	; (80013a8 <TIM2_IRQHandler+0x10>)
 800139e:	f001 f917 	bl	80025d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000114 	.word	0x20000114

080013ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013b4:	4a14      	ldr	r2, [pc, #80]	; (8001408 <_sbrk+0x5c>)
 80013b6:	4b15      	ldr	r3, [pc, #84]	; (800140c <_sbrk+0x60>)
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013c0:	4b13      	ldr	r3, [pc, #76]	; (8001410 <_sbrk+0x64>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d102      	bne.n	80013ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013c8:	4b11      	ldr	r3, [pc, #68]	; (8001410 <_sbrk+0x64>)
 80013ca:	4a12      	ldr	r2, [pc, #72]	; (8001414 <_sbrk+0x68>)
 80013cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ce:	4b10      	ldr	r3, [pc, #64]	; (8001410 <_sbrk+0x64>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4413      	add	r3, r2
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d207      	bcs.n	80013ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013dc:	f001 fc38 	bl	8002c50 <__errno>
 80013e0:	4603      	mov	r3, r0
 80013e2:	220c      	movs	r2, #12
 80013e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013e6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ea:	e009      	b.n	8001400 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013ec:	4b08      	ldr	r3, [pc, #32]	; (8001410 <_sbrk+0x64>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013f2:	4b07      	ldr	r3, [pc, #28]	; (8001410 <_sbrk+0x64>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	4a05      	ldr	r2, [pc, #20]	; (8001410 <_sbrk+0x64>)
 80013fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013fe:	68fb      	ldr	r3, [r7, #12]
}
 8001400:	4618      	mov	r0, r3
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20002800 	.word	0x20002800
 800140c:	00000400 	.word	0x00000400
 8001410:	20000108 	.word	0x20000108
 8001414:	20000180 	.word	0x20000180

08001418 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr

08001424 <setRed>:
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, RESET);
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, RESET);
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, RESET);
}

void setRed(int index){
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, 0x4<<(index*3), SET);
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	4613      	mov	r3, r2
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	4413      	add	r3, r2
 8001434:	2204      	movs	r2, #4
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	b29b      	uxth	r3, r3
 800143c:	2201      	movs	r2, #1
 800143e:	4619      	mov	r1, r3
 8001440:	4811      	ldr	r0, [pc, #68]	; (8001488 <setRed+0x64>)
 8001442:	f000 fc1c 	bl	8001c7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, 0x4<<(index*3+1), RESET);
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	4613      	mov	r3, r2
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	4413      	add	r3, r2
 800144e:	3301      	adds	r3, #1
 8001450:	2204      	movs	r2, #4
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	b29b      	uxth	r3, r3
 8001458:	2200      	movs	r2, #0
 800145a:	4619      	mov	r1, r3
 800145c:	480a      	ldr	r0, [pc, #40]	; (8001488 <setRed+0x64>)
 800145e:	f000 fc0e 	bl	8001c7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, 0x4<<(index*3+2), RESET);
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	4613      	mov	r3, r2
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	4413      	add	r3, r2
 800146a:	3302      	adds	r3, #2
 800146c:	2204      	movs	r2, #4
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	b29b      	uxth	r3, r3
 8001474:	2200      	movs	r2, #0
 8001476:	4619      	mov	r1, r3
 8001478:	4803      	ldr	r0, [pc, #12]	; (8001488 <setRed+0x64>)
 800147a:	f000 fc00 	bl	8001c7e <HAL_GPIO_WritePin>
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40010800 	.word	0x40010800

0800148c <setGreen>:


void setGreen(int index){
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, 0x4<<(index*3), RESET);
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	4613      	mov	r3, r2
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	4413      	add	r3, r2
 800149c:	2204      	movs	r2, #4
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	2200      	movs	r2, #0
 80014a6:	4619      	mov	r1, r3
 80014a8:	4811      	ldr	r0, [pc, #68]	; (80014f0 <setGreen+0x64>)
 80014aa:	f000 fbe8 	bl	8001c7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, 0x4<<(index*3+1), RESET);
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	4613      	mov	r3, r2
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	4413      	add	r3, r2
 80014b6:	3301      	adds	r3, #1
 80014b8:	2204      	movs	r2, #4
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	b29b      	uxth	r3, r3
 80014c0:	2200      	movs	r2, #0
 80014c2:	4619      	mov	r1, r3
 80014c4:	480a      	ldr	r0, [pc, #40]	; (80014f0 <setGreen+0x64>)
 80014c6:	f000 fbda 	bl	8001c7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, 0x4<<(index*3+2), SET);
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	4613      	mov	r3, r2
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	4413      	add	r3, r2
 80014d2:	3302      	adds	r3, #2
 80014d4:	2204      	movs	r2, #4
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	b29b      	uxth	r3, r3
 80014dc:	2201      	movs	r2, #1
 80014de:	4619      	mov	r1, r3
 80014e0:	4803      	ldr	r0, [pc, #12]	; (80014f0 <setGreen+0x64>)
 80014e2:	f000 fbcc 	bl	8001c7e <HAL_GPIO_WritePin>
}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40010800 	.word	0x40010800

080014f4 <setYellow>:

void setYellow(int index){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, 0x4<<(index*3), RESET);
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	4613      	mov	r3, r2
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	4413      	add	r3, r2
 8001504:	2204      	movs	r2, #4
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	b29b      	uxth	r3, r3
 800150c:	2200      	movs	r2, #0
 800150e:	4619      	mov	r1, r3
 8001510:	4811      	ldr	r0, [pc, #68]	; (8001558 <setYellow+0x64>)
 8001512:	f000 fbb4 	bl	8001c7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, 0x4<<(index*3+1), SET);
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	4613      	mov	r3, r2
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	4413      	add	r3, r2
 800151e:	3301      	adds	r3, #1
 8001520:	2204      	movs	r2, #4
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	b29b      	uxth	r3, r3
 8001528:	2201      	movs	r2, #1
 800152a:	4619      	mov	r1, r3
 800152c:	480a      	ldr	r0, [pc, #40]	; (8001558 <setYellow+0x64>)
 800152e:	f000 fba6 	bl	8001c7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, 0x4<<(index*3+2), RESET);
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	4613      	mov	r3, r2
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	4413      	add	r3, r2
 800153a:	3302      	adds	r3, #2
 800153c:	2204      	movs	r2, #4
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	b29b      	uxth	r3, r3
 8001544:	2200      	movs	r2, #0
 8001546:	4619      	mov	r1, r3
 8001548:	4803      	ldr	r0, [pc, #12]	; (8001558 <setYellow+0x64>)
 800154a:	f000 fb98 	bl	8001c7e <HAL_GPIO_WritePin>
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40010800 	.word	0x40010800

0800155c <blinkRed>:


void blinkRed(){
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001560:	2104      	movs	r1, #4
 8001562:	480e      	ldr	r0, [pc, #56]	; (800159c <blinkRed+0x40>)
 8001564:	f000 fba3 	bl	8001cae <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 8001568:	2200      	movs	r2, #0
 800156a:	2108      	movs	r1, #8
 800156c:	480b      	ldr	r0, [pc, #44]	; (800159c <blinkRed+0x40>)
 800156e:	f000 fb86 	bl	8001c7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 8001572:	2200      	movs	r2, #0
 8001574:	2110      	movs	r1, #16
 8001576:	4809      	ldr	r0, [pc, #36]	; (800159c <blinkRed+0x40>)
 8001578:	f000 fb81 	bl	8001c7e <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 800157c:	2120      	movs	r1, #32
 800157e:	4807      	ldr	r0, [pc, #28]	; (800159c <blinkRed+0x40>)
 8001580:	f000 fb95 	bl	8001cae <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, RESET);
 8001584:	2200      	movs	r2, #0
 8001586:	2140      	movs	r1, #64	; 0x40
 8001588:	4804      	ldr	r0, [pc, #16]	; (800159c <blinkRed+0x40>)
 800158a:	f000 fb78 	bl	8001c7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, RESET);
 800158e:	2200      	movs	r2, #0
 8001590:	2180      	movs	r1, #128	; 0x80
 8001592:	4802      	ldr	r0, [pc, #8]	; (800159c <blinkRed+0x40>)
 8001594:	f000 fb73 	bl	8001c7e <HAL_GPIO_WritePin>
}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40010800 	.word	0x40010800

080015a0 <blinkYellow>:

void blinkYellow(){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 80015a4:	2200      	movs	r2, #0
 80015a6:	2104      	movs	r1, #4
 80015a8:	480d      	ldr	r0, [pc, #52]	; (80015e0 <blinkYellow+0x40>)
 80015aa:	f000 fb68 	bl	8001c7e <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80015ae:	2108      	movs	r1, #8
 80015b0:	480b      	ldr	r0, [pc, #44]	; (80015e0 <blinkYellow+0x40>)
 80015b2:	f000 fb7c 	bl	8001cae <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2110      	movs	r1, #16
 80015ba:	4809      	ldr	r0, [pc, #36]	; (80015e0 <blinkYellow+0x40>)
 80015bc:	f000 fb5f 	bl	8001c7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, RESET);
 80015c0:	2200      	movs	r2, #0
 80015c2:	2120      	movs	r1, #32
 80015c4:	4806      	ldr	r0, [pc, #24]	; (80015e0 <blinkYellow+0x40>)
 80015c6:	f000 fb5a 	bl	8001c7e <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(LED5_GPIO_Port, LED5_Pin);
 80015ca:	2140      	movs	r1, #64	; 0x40
 80015cc:	4804      	ldr	r0, [pc, #16]	; (80015e0 <blinkYellow+0x40>)
 80015ce:	f000 fb6e 	bl	8001cae <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, RESET);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2180      	movs	r1, #128	; 0x80
 80015d6:	4802      	ldr	r0, [pc, #8]	; (80015e0 <blinkYellow+0x40>)
 80015d8:	f000 fb51 	bl	8001c7e <HAL_GPIO_WritePin>
}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40010800 	.word	0x40010800

080015e4 <blinkGreen>:

void blinkGreen(int index){
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 80015ec:	2200      	movs	r2, #0
 80015ee:	2104      	movs	r1, #4
 80015f0:	480e      	ldr	r0, [pc, #56]	; (800162c <blinkGreen+0x48>)
 80015f2:	f000 fb44 	bl	8001c7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2108      	movs	r1, #8
 80015fa:	480c      	ldr	r0, [pc, #48]	; (800162c <blinkGreen+0x48>)
 80015fc:	f000 fb3f 	bl	8001c7e <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001600:	2110      	movs	r1, #16
 8001602:	480a      	ldr	r0, [pc, #40]	; (800162c <blinkGreen+0x48>)
 8001604:	f000 fb53 	bl	8001cae <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, RESET);
 8001608:	2200      	movs	r2, #0
 800160a:	2120      	movs	r1, #32
 800160c:	4807      	ldr	r0, [pc, #28]	; (800162c <blinkGreen+0x48>)
 800160e:	f000 fb36 	bl	8001c7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, RESET);
 8001612:	2200      	movs	r2, #0
 8001614:	2140      	movs	r1, #64	; 0x40
 8001616:	4805      	ldr	r0, [pc, #20]	; (800162c <blinkGreen+0x48>)
 8001618:	f000 fb31 	bl	8001c7e <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(LED6_GPIO_Port, LED6_Pin);
 800161c:	2180      	movs	r1, #128	; 0x80
 800161e:	4803      	ldr	r0, [pc, #12]	; (800162c <blinkGreen+0x48>)
 8001620:	f000 fb45 	bl	8001cae <HAL_GPIO_TogglePin>
}
 8001624:	bf00      	nop
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40010800 	.word	0x40010800

08001630 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001630:	f7ff fef2 	bl	8001418 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001634:	480b      	ldr	r0, [pc, #44]	; (8001664 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001636:	490c      	ldr	r1, [pc, #48]	; (8001668 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001638:	4a0c      	ldr	r2, [pc, #48]	; (800166c <LoopFillZerobss+0x16>)
  movs r3, #0
 800163a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800163c:	e002      	b.n	8001644 <LoopCopyDataInit>

0800163e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800163e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001640:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001642:	3304      	adds	r3, #4

08001644 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001644:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001646:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001648:	d3f9      	bcc.n	800163e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800164a:	4a09      	ldr	r2, [pc, #36]	; (8001670 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800164c:	4c09      	ldr	r4, [pc, #36]	; (8001674 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800164e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001650:	e001      	b.n	8001656 <LoopFillZerobss>

08001652 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001652:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001654:	3204      	adds	r2, #4

08001656 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001656:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001658:	d3fb      	bcc.n	8001652 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800165a:	f001 faff 	bl	8002c5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800165e:	f7ff fb65 	bl	8000d2c <main>
  bx lr
 8001662:	4770      	bx	lr
  ldr r0, =_sdata
 8001664:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001668:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 800166c:	08002ea0 	.word	0x08002ea0
  ldr r2, =_sbss
 8001670:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 8001674:	2000017c 	.word	0x2000017c

08001678 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001678:	e7fe      	b.n	8001678 <ADC1_2_IRQHandler>
	...

0800167c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001680:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <HAL_Init+0x28>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a07      	ldr	r2, [pc, #28]	; (80016a4 <HAL_Init+0x28>)
 8001686:	f043 0310 	orr.w	r3, r3, #16
 800168a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800168c:	2003      	movs	r0, #3
 800168e:	f000 f923 	bl	80018d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001692:	200f      	movs	r0, #15
 8001694:	f000 f808 	bl	80016a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001698:	f7ff fe00 	bl	800129c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40022000 	.word	0x40022000

080016a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016b0:	4b12      	ldr	r3, [pc, #72]	; (80016fc <HAL_InitTick+0x54>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <HAL_InitTick+0x58>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	4619      	mov	r1, r3
 80016ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016be:	fbb3 f3f1 	udiv	r3, r3, r1
 80016c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c6:	4618      	mov	r0, r3
 80016c8:	f000 f93b 	bl	8001942 <HAL_SYSTICK_Config>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e00e      	b.n	80016f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2b0f      	cmp	r3, #15
 80016da:	d80a      	bhi.n	80016f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016dc:	2200      	movs	r2, #0
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	f04f 30ff 	mov.w	r0, #4294967295
 80016e4:	f000 f903 	bl	80018ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016e8:	4a06      	ldr	r2, [pc, #24]	; (8001704 <HAL_InitTick+0x5c>)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ee:	2300      	movs	r3, #0
 80016f0:	e000      	b.n	80016f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000054 	.word	0x20000054
 8001700:	2000005c 	.word	0x2000005c
 8001704:	20000058 	.word	0x20000058

08001708 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800170c:	4b05      	ldr	r3, [pc, #20]	; (8001724 <HAL_IncTick+0x1c>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	461a      	mov	r2, r3
 8001712:	4b05      	ldr	r3, [pc, #20]	; (8001728 <HAL_IncTick+0x20>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4413      	add	r3, r2
 8001718:	4a03      	ldr	r2, [pc, #12]	; (8001728 <HAL_IncTick+0x20>)
 800171a:	6013      	str	r3, [r2, #0]
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	bc80      	pop	{r7}
 8001722:	4770      	bx	lr
 8001724:	2000005c 	.word	0x2000005c
 8001728:	20000168 	.word	0x20000168

0800172c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  return uwTick;
 8001730:	4b02      	ldr	r3, [pc, #8]	; (800173c <HAL_GetTick+0x10>)
 8001732:	681b      	ldr	r3, [r3, #0]
}
 8001734:	4618      	mov	r0, r3
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr
 800173c:	20000168 	.word	0x20000168

08001740 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001750:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <__NVIC_SetPriorityGrouping+0x44>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001756:	68ba      	ldr	r2, [r7, #8]
 8001758:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800175c:	4013      	ands	r3, r2
 800175e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001768:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800176c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001772:	4a04      	ldr	r2, [pc, #16]	; (8001784 <__NVIC_SetPriorityGrouping+0x44>)
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	60d3      	str	r3, [r2, #12]
}
 8001778:	bf00      	nop
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800178c:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <__NVIC_GetPriorityGrouping+0x18>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	0a1b      	lsrs	r3, r3, #8
 8001792:	f003 0307 	and.w	r3, r3, #7
}
 8001796:	4618      	mov	r0, r3
 8001798:	46bd      	mov	sp, r7
 800179a:	bc80      	pop	{r7}
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	db0b      	blt.n	80017ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	f003 021f 	and.w	r2, r3, #31
 80017bc:	4906      	ldr	r1, [pc, #24]	; (80017d8 <__NVIC_EnableIRQ+0x34>)
 80017be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c2:	095b      	lsrs	r3, r3, #5
 80017c4:	2001      	movs	r0, #1
 80017c6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr
 80017d8:	e000e100 	.word	0xe000e100

080017dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	6039      	str	r1, [r7, #0]
 80017e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	db0a      	blt.n	8001806 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	490c      	ldr	r1, [pc, #48]	; (8001828 <__NVIC_SetPriority+0x4c>)
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	0112      	lsls	r2, r2, #4
 80017fc:	b2d2      	uxtb	r2, r2
 80017fe:	440b      	add	r3, r1
 8001800:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001804:	e00a      	b.n	800181c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	b2da      	uxtb	r2, r3
 800180a:	4908      	ldr	r1, [pc, #32]	; (800182c <__NVIC_SetPriority+0x50>)
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	f003 030f 	and.w	r3, r3, #15
 8001812:	3b04      	subs	r3, #4
 8001814:	0112      	lsls	r2, r2, #4
 8001816:	b2d2      	uxtb	r2, r2
 8001818:	440b      	add	r3, r1
 800181a:	761a      	strb	r2, [r3, #24]
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	bc80      	pop	{r7}
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	e000e100 	.word	0xe000e100
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001830:	b480      	push	{r7}
 8001832:	b089      	sub	sp, #36	; 0x24
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	f1c3 0307 	rsb	r3, r3, #7
 800184a:	2b04      	cmp	r3, #4
 800184c:	bf28      	it	cs
 800184e:	2304      	movcs	r3, #4
 8001850:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	3304      	adds	r3, #4
 8001856:	2b06      	cmp	r3, #6
 8001858:	d902      	bls.n	8001860 <NVIC_EncodePriority+0x30>
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	3b03      	subs	r3, #3
 800185e:	e000      	b.n	8001862 <NVIC_EncodePriority+0x32>
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001864:	f04f 32ff 	mov.w	r2, #4294967295
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43da      	mvns	r2, r3
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	401a      	ands	r2, r3
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001878:	f04f 31ff 	mov.w	r1, #4294967295
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	fa01 f303 	lsl.w	r3, r1, r3
 8001882:	43d9      	mvns	r1, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001888:	4313      	orrs	r3, r2
         );
}
 800188a:	4618      	mov	r0, r3
 800188c:	3724      	adds	r7, #36	; 0x24
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr

08001894 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3b01      	subs	r3, #1
 80018a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018a4:	d301      	bcc.n	80018aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018a6:	2301      	movs	r3, #1
 80018a8:	e00f      	b.n	80018ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018aa:	4a0a      	ldr	r2, [pc, #40]	; (80018d4 <SysTick_Config+0x40>)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	3b01      	subs	r3, #1
 80018b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018b2:	210f      	movs	r1, #15
 80018b4:	f04f 30ff 	mov.w	r0, #4294967295
 80018b8:	f7ff ff90 	bl	80017dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018bc:	4b05      	ldr	r3, [pc, #20]	; (80018d4 <SysTick_Config+0x40>)
 80018be:	2200      	movs	r2, #0
 80018c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018c2:	4b04      	ldr	r3, [pc, #16]	; (80018d4 <SysTick_Config+0x40>)
 80018c4:	2207      	movs	r2, #7
 80018c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	e000e010 	.word	0xe000e010

080018d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f7ff ff2d 	bl	8001740 <__NVIC_SetPriorityGrouping>
}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b086      	sub	sp, #24
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	4603      	mov	r3, r0
 80018f6:	60b9      	str	r1, [r7, #8]
 80018f8:	607a      	str	r2, [r7, #4]
 80018fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018fc:	2300      	movs	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001900:	f7ff ff42 	bl	8001788 <__NVIC_GetPriorityGrouping>
 8001904:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	68b9      	ldr	r1, [r7, #8]
 800190a:	6978      	ldr	r0, [r7, #20]
 800190c:	f7ff ff90 	bl	8001830 <NVIC_EncodePriority>
 8001910:	4602      	mov	r2, r0
 8001912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001916:	4611      	mov	r1, r2
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff ff5f 	bl	80017dc <__NVIC_SetPriority>
}
 800191e:	bf00      	nop
 8001920:	3718      	adds	r7, #24
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b082      	sub	sp, #8
 800192a:	af00      	add	r7, sp, #0
 800192c:	4603      	mov	r3, r0
 800192e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff ff35 	bl	80017a4 <__NVIC_EnableIRQ>
}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b082      	sub	sp, #8
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7ff ffa2 	bl	8001894 <SysTick_Config>
 8001950:	4603      	mov	r3, r0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
	...

0800195c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800195c:	b480      	push	{r7}
 800195e:	b08b      	sub	sp, #44	; 0x2c
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001966:	2300      	movs	r3, #0
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800196a:	2300      	movs	r3, #0
 800196c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800196e:	e148      	b.n	8001c02 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001970:	2201      	movs	r2, #1
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	69fa      	ldr	r2, [r7, #28]
 8001980:	4013      	ands	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	429a      	cmp	r2, r3
 800198a:	f040 8137 	bne.w	8001bfc <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	4aa3      	ldr	r2, [pc, #652]	; (8001c20 <HAL_GPIO_Init+0x2c4>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d05e      	beq.n	8001a56 <HAL_GPIO_Init+0xfa>
 8001998:	4aa1      	ldr	r2, [pc, #644]	; (8001c20 <HAL_GPIO_Init+0x2c4>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d875      	bhi.n	8001a8a <HAL_GPIO_Init+0x12e>
 800199e:	4aa1      	ldr	r2, [pc, #644]	; (8001c24 <HAL_GPIO_Init+0x2c8>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d058      	beq.n	8001a56 <HAL_GPIO_Init+0xfa>
 80019a4:	4a9f      	ldr	r2, [pc, #636]	; (8001c24 <HAL_GPIO_Init+0x2c8>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d86f      	bhi.n	8001a8a <HAL_GPIO_Init+0x12e>
 80019aa:	4a9f      	ldr	r2, [pc, #636]	; (8001c28 <HAL_GPIO_Init+0x2cc>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d052      	beq.n	8001a56 <HAL_GPIO_Init+0xfa>
 80019b0:	4a9d      	ldr	r2, [pc, #628]	; (8001c28 <HAL_GPIO_Init+0x2cc>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d869      	bhi.n	8001a8a <HAL_GPIO_Init+0x12e>
 80019b6:	4a9d      	ldr	r2, [pc, #628]	; (8001c2c <HAL_GPIO_Init+0x2d0>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d04c      	beq.n	8001a56 <HAL_GPIO_Init+0xfa>
 80019bc:	4a9b      	ldr	r2, [pc, #620]	; (8001c2c <HAL_GPIO_Init+0x2d0>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d863      	bhi.n	8001a8a <HAL_GPIO_Init+0x12e>
 80019c2:	4a9b      	ldr	r2, [pc, #620]	; (8001c30 <HAL_GPIO_Init+0x2d4>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d046      	beq.n	8001a56 <HAL_GPIO_Init+0xfa>
 80019c8:	4a99      	ldr	r2, [pc, #612]	; (8001c30 <HAL_GPIO_Init+0x2d4>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d85d      	bhi.n	8001a8a <HAL_GPIO_Init+0x12e>
 80019ce:	2b12      	cmp	r3, #18
 80019d0:	d82a      	bhi.n	8001a28 <HAL_GPIO_Init+0xcc>
 80019d2:	2b12      	cmp	r3, #18
 80019d4:	d859      	bhi.n	8001a8a <HAL_GPIO_Init+0x12e>
 80019d6:	a201      	add	r2, pc, #4	; (adr r2, 80019dc <HAL_GPIO_Init+0x80>)
 80019d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019dc:	08001a57 	.word	0x08001a57
 80019e0:	08001a31 	.word	0x08001a31
 80019e4:	08001a43 	.word	0x08001a43
 80019e8:	08001a85 	.word	0x08001a85
 80019ec:	08001a8b 	.word	0x08001a8b
 80019f0:	08001a8b 	.word	0x08001a8b
 80019f4:	08001a8b 	.word	0x08001a8b
 80019f8:	08001a8b 	.word	0x08001a8b
 80019fc:	08001a8b 	.word	0x08001a8b
 8001a00:	08001a8b 	.word	0x08001a8b
 8001a04:	08001a8b 	.word	0x08001a8b
 8001a08:	08001a8b 	.word	0x08001a8b
 8001a0c:	08001a8b 	.word	0x08001a8b
 8001a10:	08001a8b 	.word	0x08001a8b
 8001a14:	08001a8b 	.word	0x08001a8b
 8001a18:	08001a8b 	.word	0x08001a8b
 8001a1c:	08001a8b 	.word	0x08001a8b
 8001a20:	08001a39 	.word	0x08001a39
 8001a24:	08001a4d 	.word	0x08001a4d
 8001a28:	4a82      	ldr	r2, [pc, #520]	; (8001c34 <HAL_GPIO_Init+0x2d8>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d013      	beq.n	8001a56 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a2e:	e02c      	b.n	8001a8a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	623b      	str	r3, [r7, #32]
          break;
 8001a36:	e029      	b.n	8001a8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	3304      	adds	r3, #4
 8001a3e:	623b      	str	r3, [r7, #32]
          break;
 8001a40:	e024      	b.n	8001a8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	3308      	adds	r3, #8
 8001a48:	623b      	str	r3, [r7, #32]
          break;
 8001a4a:	e01f      	b.n	8001a8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	330c      	adds	r3, #12
 8001a52:	623b      	str	r3, [r7, #32]
          break;
 8001a54:	e01a      	b.n	8001a8c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d102      	bne.n	8001a64 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a5e:	2304      	movs	r3, #4
 8001a60:	623b      	str	r3, [r7, #32]
          break;
 8001a62:	e013      	b.n	8001a8c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d105      	bne.n	8001a78 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a6c:	2308      	movs	r3, #8
 8001a6e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	69fa      	ldr	r2, [r7, #28]
 8001a74:	611a      	str	r2, [r3, #16]
          break;
 8001a76:	e009      	b.n	8001a8c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a78:	2308      	movs	r3, #8
 8001a7a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	69fa      	ldr	r2, [r7, #28]
 8001a80:	615a      	str	r2, [r3, #20]
          break;
 8001a82:	e003      	b.n	8001a8c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a84:	2300      	movs	r3, #0
 8001a86:	623b      	str	r3, [r7, #32]
          break;
 8001a88:	e000      	b.n	8001a8c <HAL_GPIO_Init+0x130>
          break;
 8001a8a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	2bff      	cmp	r3, #255	; 0xff
 8001a90:	d801      	bhi.n	8001a96 <HAL_GPIO_Init+0x13a>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	e001      	b.n	8001a9a <HAL_GPIO_Init+0x13e>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	3304      	adds	r3, #4
 8001a9a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	2bff      	cmp	r3, #255	; 0xff
 8001aa0:	d802      	bhi.n	8001aa8 <HAL_GPIO_Init+0x14c>
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	e002      	b.n	8001aae <HAL_GPIO_Init+0x152>
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aaa:	3b08      	subs	r3, #8
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	210f      	movs	r1, #15
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	401a      	ands	r2, r3
 8001ac0:	6a39      	ldr	r1, [r7, #32]
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac8:	431a      	orrs	r2, r3
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f000 8090 	beq.w	8001bfc <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001adc:	4b56      	ldr	r3, [pc, #344]	; (8001c38 <HAL_GPIO_Init+0x2dc>)
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	4a55      	ldr	r2, [pc, #340]	; (8001c38 <HAL_GPIO_Init+0x2dc>)
 8001ae2:	f043 0301 	orr.w	r3, r3, #1
 8001ae6:	6193      	str	r3, [r2, #24]
 8001ae8:	4b53      	ldr	r3, [pc, #332]	; (8001c38 <HAL_GPIO_Init+0x2dc>)
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	f003 0301 	and.w	r3, r3, #1
 8001af0:	60bb      	str	r3, [r7, #8]
 8001af2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001af4:	4a51      	ldr	r2, [pc, #324]	; (8001c3c <HAL_GPIO_Init+0x2e0>)
 8001af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af8:	089b      	lsrs	r3, r3, #2
 8001afa:	3302      	adds	r3, #2
 8001afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b00:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b04:	f003 0303 	and.w	r3, r3, #3
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	220f      	movs	r2, #15
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	43db      	mvns	r3, r3
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	4013      	ands	r3, r2
 8001b16:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4a49      	ldr	r2, [pc, #292]	; (8001c40 <HAL_GPIO_Init+0x2e4>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d00d      	beq.n	8001b3c <HAL_GPIO_Init+0x1e0>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a48      	ldr	r2, [pc, #288]	; (8001c44 <HAL_GPIO_Init+0x2e8>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d007      	beq.n	8001b38 <HAL_GPIO_Init+0x1dc>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4a47      	ldr	r2, [pc, #284]	; (8001c48 <HAL_GPIO_Init+0x2ec>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d101      	bne.n	8001b34 <HAL_GPIO_Init+0x1d8>
 8001b30:	2302      	movs	r3, #2
 8001b32:	e004      	b.n	8001b3e <HAL_GPIO_Init+0x1e2>
 8001b34:	2303      	movs	r3, #3
 8001b36:	e002      	b.n	8001b3e <HAL_GPIO_Init+0x1e2>
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e000      	b.n	8001b3e <HAL_GPIO_Init+0x1e2>
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b40:	f002 0203 	and.w	r2, r2, #3
 8001b44:	0092      	lsls	r2, r2, #2
 8001b46:	4093      	lsls	r3, r2
 8001b48:	68fa      	ldr	r2, [r7, #12]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b4e:	493b      	ldr	r1, [pc, #236]	; (8001c3c <HAL_GPIO_Init+0x2e0>)
 8001b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b52:	089b      	lsrs	r3, r3, #2
 8001b54:	3302      	adds	r3, #2
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d006      	beq.n	8001b76 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b68:	4b38      	ldr	r3, [pc, #224]	; (8001c4c <HAL_GPIO_Init+0x2f0>)
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	4937      	ldr	r1, [pc, #220]	; (8001c4c <HAL_GPIO_Init+0x2f0>)
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	608b      	str	r3, [r1, #8]
 8001b74:	e006      	b.n	8001b84 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b76:	4b35      	ldr	r3, [pc, #212]	; (8001c4c <HAL_GPIO_Init+0x2f0>)
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	4933      	ldr	r1, [pc, #204]	; (8001c4c <HAL_GPIO_Init+0x2f0>)
 8001b80:	4013      	ands	r3, r2
 8001b82:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d006      	beq.n	8001b9e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b90:	4b2e      	ldr	r3, [pc, #184]	; (8001c4c <HAL_GPIO_Init+0x2f0>)
 8001b92:	68da      	ldr	r2, [r3, #12]
 8001b94:	492d      	ldr	r1, [pc, #180]	; (8001c4c <HAL_GPIO_Init+0x2f0>)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	60cb      	str	r3, [r1, #12]
 8001b9c:	e006      	b.n	8001bac <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b9e:	4b2b      	ldr	r3, [pc, #172]	; (8001c4c <HAL_GPIO_Init+0x2f0>)
 8001ba0:	68da      	ldr	r2, [r3, #12]
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	4929      	ldr	r1, [pc, #164]	; (8001c4c <HAL_GPIO_Init+0x2f0>)
 8001ba8:	4013      	ands	r3, r2
 8001baa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d006      	beq.n	8001bc6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bb8:	4b24      	ldr	r3, [pc, #144]	; (8001c4c <HAL_GPIO_Init+0x2f0>)
 8001bba:	685a      	ldr	r2, [r3, #4]
 8001bbc:	4923      	ldr	r1, [pc, #140]	; (8001c4c <HAL_GPIO_Init+0x2f0>)
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	604b      	str	r3, [r1, #4]
 8001bc4:	e006      	b.n	8001bd4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bc6:	4b21      	ldr	r3, [pc, #132]	; (8001c4c <HAL_GPIO_Init+0x2f0>)
 8001bc8:	685a      	ldr	r2, [r3, #4]
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	491f      	ldr	r1, [pc, #124]	; (8001c4c <HAL_GPIO_Init+0x2f0>)
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d006      	beq.n	8001bee <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001be0:	4b1a      	ldr	r3, [pc, #104]	; (8001c4c <HAL_GPIO_Init+0x2f0>)
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	4919      	ldr	r1, [pc, #100]	; (8001c4c <HAL_GPIO_Init+0x2f0>)
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	600b      	str	r3, [r1, #0]
 8001bec:	e006      	b.n	8001bfc <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bee:	4b17      	ldr	r3, [pc, #92]	; (8001c4c <HAL_GPIO_Init+0x2f0>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	4915      	ldr	r1, [pc, #84]	; (8001c4c <HAL_GPIO_Init+0x2f0>)
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfe:	3301      	adds	r3, #1
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c08:	fa22 f303 	lsr.w	r3, r2, r3
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f47f aeaf 	bne.w	8001970 <HAL_GPIO_Init+0x14>
  }
}
 8001c12:	bf00      	nop
 8001c14:	bf00      	nop
 8001c16:	372c      	adds	r7, #44	; 0x2c
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bc80      	pop	{r7}
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	10320000 	.word	0x10320000
 8001c24:	10310000 	.word	0x10310000
 8001c28:	10220000 	.word	0x10220000
 8001c2c:	10210000 	.word	0x10210000
 8001c30:	10120000 	.word	0x10120000
 8001c34:	10110000 	.word	0x10110000
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	40010000 	.word	0x40010000
 8001c40:	40010800 	.word	0x40010800
 8001c44:	40010c00 	.word	0x40010c00
 8001c48:	40011000 	.word	0x40011000
 8001c4c:	40010400 	.word	0x40010400

08001c50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	887b      	ldrh	r3, [r7, #2]
 8001c62:	4013      	ands	r3, r2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d002      	beq.n	8001c6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	73fb      	strb	r3, [r7, #15]
 8001c6c:	e001      	b.n	8001c72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc80      	pop	{r7}
 8001c7c:	4770      	bx	lr

08001c7e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b083      	sub	sp, #12
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
 8001c86:	460b      	mov	r3, r1
 8001c88:	807b      	strh	r3, [r7, #2]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c8e:	787b      	ldrb	r3, [r7, #1]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d003      	beq.n	8001c9c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c94:	887a      	ldrh	r2, [r7, #2]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c9a:	e003      	b.n	8001ca4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c9c:	887b      	ldrh	r3, [r7, #2]
 8001c9e:	041a      	lsls	r2, r3, #16
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	611a      	str	r2, [r3, #16]
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr

08001cae <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b085      	sub	sp, #20
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cc0:	887a      	ldrh	r2, [r7, #2]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	041a      	lsls	r2, r3, #16
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	43d9      	mvns	r1, r3
 8001ccc:	887b      	ldrh	r3, [r7, #2]
 8001cce:	400b      	ands	r3, r1
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	611a      	str	r2, [r3, #16]
}
 8001cd6:	bf00      	nop
 8001cd8:	3714      	adds	r7, #20
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr

08001ce0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e26c      	b.n	80021cc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f000 8087 	beq.w	8001e0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d00:	4b92      	ldr	r3, [pc, #584]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f003 030c 	and.w	r3, r3, #12
 8001d08:	2b04      	cmp	r3, #4
 8001d0a:	d00c      	beq.n	8001d26 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d0c:	4b8f      	ldr	r3, [pc, #572]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 030c 	and.w	r3, r3, #12
 8001d14:	2b08      	cmp	r3, #8
 8001d16:	d112      	bne.n	8001d3e <HAL_RCC_OscConfig+0x5e>
 8001d18:	4b8c      	ldr	r3, [pc, #560]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d24:	d10b      	bne.n	8001d3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d26:	4b89      	ldr	r3, [pc, #548]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d06c      	beq.n	8001e0c <HAL_RCC_OscConfig+0x12c>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d168      	bne.n	8001e0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e246      	b.n	80021cc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d46:	d106      	bne.n	8001d56 <HAL_RCC_OscConfig+0x76>
 8001d48:	4b80      	ldr	r3, [pc, #512]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a7f      	ldr	r2, [pc, #508]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d52:	6013      	str	r3, [r2, #0]
 8001d54:	e02e      	b.n	8001db4 <HAL_RCC_OscConfig+0xd4>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d10c      	bne.n	8001d78 <HAL_RCC_OscConfig+0x98>
 8001d5e:	4b7b      	ldr	r3, [pc, #492]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a7a      	ldr	r2, [pc, #488]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	4b78      	ldr	r3, [pc, #480]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a77      	ldr	r2, [pc, #476]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d74:	6013      	str	r3, [r2, #0]
 8001d76:	e01d      	b.n	8001db4 <HAL_RCC_OscConfig+0xd4>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d80:	d10c      	bne.n	8001d9c <HAL_RCC_OscConfig+0xbc>
 8001d82:	4b72      	ldr	r3, [pc, #456]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a71      	ldr	r2, [pc, #452]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d8c:	6013      	str	r3, [r2, #0]
 8001d8e:	4b6f      	ldr	r3, [pc, #444]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a6e      	ldr	r2, [pc, #440]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	e00b      	b.n	8001db4 <HAL_RCC_OscConfig+0xd4>
 8001d9c:	4b6b      	ldr	r3, [pc, #428]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a6a      	ldr	r2, [pc, #424]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001da2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001da6:	6013      	str	r3, [r2, #0]
 8001da8:	4b68      	ldr	r3, [pc, #416]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a67      	ldr	r2, [pc, #412]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001dae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001db2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d013      	beq.n	8001de4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbc:	f7ff fcb6 	bl	800172c <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dc4:	f7ff fcb2 	bl	800172c <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b64      	cmp	r3, #100	; 0x64
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e1fa      	b.n	80021cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd6:	4b5d      	ldr	r3, [pc, #372]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d0f0      	beq.n	8001dc4 <HAL_RCC_OscConfig+0xe4>
 8001de2:	e014      	b.n	8001e0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de4:	f7ff fca2 	bl	800172c <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dec:	f7ff fc9e 	bl	800172c <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b64      	cmp	r3, #100	; 0x64
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e1e6      	b.n	80021cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dfe:	4b53      	ldr	r3, [pc, #332]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f0      	bne.n	8001dec <HAL_RCC_OscConfig+0x10c>
 8001e0a:	e000      	b.n	8001e0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d063      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e1a:	4b4c      	ldr	r3, [pc, #304]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f003 030c 	and.w	r3, r3, #12
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00b      	beq.n	8001e3e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e26:	4b49      	ldr	r3, [pc, #292]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f003 030c 	and.w	r3, r3, #12
 8001e2e:	2b08      	cmp	r3, #8
 8001e30:	d11c      	bne.n	8001e6c <HAL_RCC_OscConfig+0x18c>
 8001e32:	4b46      	ldr	r3, [pc, #280]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d116      	bne.n	8001e6c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e3e:	4b43      	ldr	r3, [pc, #268]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d005      	beq.n	8001e56 <HAL_RCC_OscConfig+0x176>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d001      	beq.n	8001e56 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e1ba      	b.n	80021cc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e56:	4b3d      	ldr	r3, [pc, #244]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	4939      	ldr	r1, [pc, #228]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e6a:	e03a      	b.n	8001ee2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d020      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e74:	4b36      	ldr	r3, [pc, #216]	; (8001f50 <HAL_RCC_OscConfig+0x270>)
 8001e76:	2201      	movs	r2, #1
 8001e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7a:	f7ff fc57 	bl	800172c <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e80:	e008      	b.n	8001e94 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e82:	f7ff fc53 	bl	800172c <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e19b      	b.n	80021cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e94:	4b2d      	ldr	r3, [pc, #180]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d0f0      	beq.n	8001e82 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea0:	4b2a      	ldr	r3, [pc, #168]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	4927      	ldr	r1, [pc, #156]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	600b      	str	r3, [r1, #0]
 8001eb4:	e015      	b.n	8001ee2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eb6:	4b26      	ldr	r3, [pc, #152]	; (8001f50 <HAL_RCC_OscConfig+0x270>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ebc:	f7ff fc36 	bl	800172c <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ec4:	f7ff fc32 	bl	800172c <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e17a      	b.n	80021cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ed6:	4b1d      	ldr	r3, [pc, #116]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1f0      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0308 	and.w	r3, r3, #8
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d03a      	beq.n	8001f64 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d019      	beq.n	8001f2a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ef6:	4b17      	ldr	r3, [pc, #92]	; (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001ef8:	2201      	movs	r2, #1
 8001efa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001efc:	f7ff fc16 	bl	800172c <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f04:	f7ff fc12 	bl	800172c <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e15a      	b.n	80021cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f16:	4b0d      	ldr	r3, [pc, #52]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0f0      	beq.n	8001f04 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f22:	2001      	movs	r0, #1
 8001f24:	f000 fa9a 	bl	800245c <RCC_Delay>
 8001f28:	e01c      	b.n	8001f64 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f2a:	4b0a      	ldr	r3, [pc, #40]	; (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f30:	f7ff fbfc 	bl	800172c <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f36:	e00f      	b.n	8001f58 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f38:	f7ff fbf8 	bl	800172c <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d908      	bls.n	8001f58 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e140      	b.n	80021cc <HAL_RCC_OscConfig+0x4ec>
 8001f4a:	bf00      	nop
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	42420000 	.word	0x42420000
 8001f54:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f58:	4b9e      	ldr	r3, [pc, #632]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1e9      	bne.n	8001f38 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f000 80a6 	beq.w	80020be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f72:	2300      	movs	r3, #0
 8001f74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f76:	4b97      	ldr	r3, [pc, #604]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d10d      	bne.n	8001f9e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f82:	4b94      	ldr	r3, [pc, #592]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	4a93      	ldr	r2, [pc, #588]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 8001f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f8c:	61d3      	str	r3, [r2, #28]
 8001f8e:	4b91      	ldr	r3, [pc, #580]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f96:	60bb      	str	r3, [r7, #8]
 8001f98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f9e:	4b8e      	ldr	r3, [pc, #568]	; (80021d8 <HAL_RCC_OscConfig+0x4f8>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d118      	bne.n	8001fdc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001faa:	4b8b      	ldr	r3, [pc, #556]	; (80021d8 <HAL_RCC_OscConfig+0x4f8>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a8a      	ldr	r2, [pc, #552]	; (80021d8 <HAL_RCC_OscConfig+0x4f8>)
 8001fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fb6:	f7ff fbb9 	bl	800172c <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fbe:	f7ff fbb5 	bl	800172c <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b64      	cmp	r3, #100	; 0x64
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e0fd      	b.n	80021cc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd0:	4b81      	ldr	r3, [pc, #516]	; (80021d8 <HAL_RCC_OscConfig+0x4f8>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0f0      	beq.n	8001fbe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d106      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x312>
 8001fe4:	4b7b      	ldr	r3, [pc, #492]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	4a7a      	ldr	r2, [pc, #488]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 8001fea:	f043 0301 	orr.w	r3, r3, #1
 8001fee:	6213      	str	r3, [r2, #32]
 8001ff0:	e02d      	b.n	800204e <HAL_RCC_OscConfig+0x36e>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d10c      	bne.n	8002014 <HAL_RCC_OscConfig+0x334>
 8001ffa:	4b76      	ldr	r3, [pc, #472]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	4a75      	ldr	r2, [pc, #468]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 8002000:	f023 0301 	bic.w	r3, r3, #1
 8002004:	6213      	str	r3, [r2, #32]
 8002006:	4b73      	ldr	r3, [pc, #460]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 8002008:	6a1b      	ldr	r3, [r3, #32]
 800200a:	4a72      	ldr	r2, [pc, #456]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 800200c:	f023 0304 	bic.w	r3, r3, #4
 8002010:	6213      	str	r3, [r2, #32]
 8002012:	e01c      	b.n	800204e <HAL_RCC_OscConfig+0x36e>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	2b05      	cmp	r3, #5
 800201a:	d10c      	bne.n	8002036 <HAL_RCC_OscConfig+0x356>
 800201c:	4b6d      	ldr	r3, [pc, #436]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	4a6c      	ldr	r2, [pc, #432]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 8002022:	f043 0304 	orr.w	r3, r3, #4
 8002026:	6213      	str	r3, [r2, #32]
 8002028:	4b6a      	ldr	r3, [pc, #424]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	4a69      	ldr	r2, [pc, #420]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	6213      	str	r3, [r2, #32]
 8002034:	e00b      	b.n	800204e <HAL_RCC_OscConfig+0x36e>
 8002036:	4b67      	ldr	r3, [pc, #412]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 8002038:	6a1b      	ldr	r3, [r3, #32]
 800203a:	4a66      	ldr	r2, [pc, #408]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 800203c:	f023 0301 	bic.w	r3, r3, #1
 8002040:	6213      	str	r3, [r2, #32]
 8002042:	4b64      	ldr	r3, [pc, #400]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	4a63      	ldr	r2, [pc, #396]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 8002048:	f023 0304 	bic.w	r3, r3, #4
 800204c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d015      	beq.n	8002082 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002056:	f7ff fb69 	bl	800172c <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800205c:	e00a      	b.n	8002074 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800205e:	f7ff fb65 	bl	800172c <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	f241 3288 	movw	r2, #5000	; 0x1388
 800206c:	4293      	cmp	r3, r2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e0ab      	b.n	80021cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002074:	4b57      	ldr	r3, [pc, #348]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d0ee      	beq.n	800205e <HAL_RCC_OscConfig+0x37e>
 8002080:	e014      	b.n	80020ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002082:	f7ff fb53 	bl	800172c <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002088:	e00a      	b.n	80020a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800208a:	f7ff fb4f 	bl	800172c <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	f241 3288 	movw	r2, #5000	; 0x1388
 8002098:	4293      	cmp	r3, r2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e095      	b.n	80021cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a0:	4b4c      	ldr	r3, [pc, #304]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1ee      	bne.n	800208a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020ac:	7dfb      	ldrb	r3, [r7, #23]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d105      	bne.n	80020be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020b2:	4b48      	ldr	r3, [pc, #288]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	4a47      	ldr	r2, [pc, #284]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 80020b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 8081 	beq.w	80021ca <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020c8:	4b42      	ldr	r3, [pc, #264]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 030c 	and.w	r3, r3, #12
 80020d0:	2b08      	cmp	r3, #8
 80020d2:	d061      	beq.n	8002198 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	69db      	ldr	r3, [r3, #28]
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d146      	bne.n	800216a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020dc:	4b3f      	ldr	r3, [pc, #252]	; (80021dc <HAL_RCC_OscConfig+0x4fc>)
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e2:	f7ff fb23 	bl	800172c <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020e8:	e008      	b.n	80020fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ea:	f7ff fb1f 	bl	800172c <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e067      	b.n	80021cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020fc:	4b35      	ldr	r3, [pc, #212]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1f0      	bne.n	80020ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002110:	d108      	bne.n	8002124 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002112:	4b30      	ldr	r3, [pc, #192]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	492d      	ldr	r1, [pc, #180]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 8002120:	4313      	orrs	r3, r2
 8002122:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002124:	4b2b      	ldr	r3, [pc, #172]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a19      	ldr	r1, [r3, #32]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	430b      	orrs	r3, r1
 8002136:	4927      	ldr	r1, [pc, #156]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 8002138:	4313      	orrs	r3, r2
 800213a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800213c:	4b27      	ldr	r3, [pc, #156]	; (80021dc <HAL_RCC_OscConfig+0x4fc>)
 800213e:	2201      	movs	r2, #1
 8002140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002142:	f7ff faf3 	bl	800172c <HAL_GetTick>
 8002146:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800214a:	f7ff faef 	bl	800172c <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e037      	b.n	80021cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800215c:	4b1d      	ldr	r3, [pc, #116]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0f0      	beq.n	800214a <HAL_RCC_OscConfig+0x46a>
 8002168:	e02f      	b.n	80021ca <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800216a:	4b1c      	ldr	r3, [pc, #112]	; (80021dc <HAL_RCC_OscConfig+0x4fc>)
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002170:	f7ff fadc 	bl	800172c <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002178:	f7ff fad8 	bl	800172c <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e020      	b.n	80021cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800218a:	4b12      	ldr	r3, [pc, #72]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f0      	bne.n	8002178 <HAL_RCC_OscConfig+0x498>
 8002196:	e018      	b.n	80021ca <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	69db      	ldr	r3, [r3, #28]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d101      	bne.n	80021a4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e013      	b.n	80021cc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021a4:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d106      	bne.n	80021c6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d001      	beq.n	80021ca <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e000      	b.n	80021cc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3718      	adds	r7, #24
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40021000 	.word	0x40021000
 80021d8:	40007000 	.word	0x40007000
 80021dc:	42420060 	.word	0x42420060

080021e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d101      	bne.n	80021f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e0d0      	b.n	8002396 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021f4:	4b6a      	ldr	r3, [pc, #424]	; (80023a0 <HAL_RCC_ClockConfig+0x1c0>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d910      	bls.n	8002224 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002202:	4b67      	ldr	r3, [pc, #412]	; (80023a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f023 0207 	bic.w	r2, r3, #7
 800220a:	4965      	ldr	r1, [pc, #404]	; (80023a0 <HAL_RCC_ClockConfig+0x1c0>)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	4313      	orrs	r3, r2
 8002210:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002212:	4b63      	ldr	r3, [pc, #396]	; (80023a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	429a      	cmp	r2, r3
 800221e:	d001      	beq.n	8002224 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e0b8      	b.n	8002396 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d020      	beq.n	8002272 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0304 	and.w	r3, r3, #4
 8002238:	2b00      	cmp	r3, #0
 800223a:	d005      	beq.n	8002248 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800223c:	4b59      	ldr	r3, [pc, #356]	; (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	4a58      	ldr	r2, [pc, #352]	; (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002242:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002246:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0308 	and.w	r3, r3, #8
 8002250:	2b00      	cmp	r3, #0
 8002252:	d005      	beq.n	8002260 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002254:	4b53      	ldr	r3, [pc, #332]	; (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	4a52      	ldr	r2, [pc, #328]	; (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 800225a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800225e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002260:	4b50      	ldr	r3, [pc, #320]	; (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	494d      	ldr	r1, [pc, #308]	; (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 800226e:	4313      	orrs	r3, r2
 8002270:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	2b00      	cmp	r3, #0
 800227c:	d040      	beq.n	8002300 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d107      	bne.n	8002296 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002286:	4b47      	ldr	r3, [pc, #284]	; (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d115      	bne.n	80022be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e07f      	b.n	8002396 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2b02      	cmp	r3, #2
 800229c:	d107      	bne.n	80022ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800229e:	4b41      	ldr	r3, [pc, #260]	; (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d109      	bne.n	80022be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e073      	b.n	8002396 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ae:	4b3d      	ldr	r3, [pc, #244]	; (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e06b      	b.n	8002396 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022be:	4b39      	ldr	r3, [pc, #228]	; (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f023 0203 	bic.w	r2, r3, #3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	4936      	ldr	r1, [pc, #216]	; (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022d0:	f7ff fa2c 	bl	800172c <HAL_GetTick>
 80022d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022d6:	e00a      	b.n	80022ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022d8:	f7ff fa28 	bl	800172c <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e053      	b.n	8002396 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ee:	4b2d      	ldr	r3, [pc, #180]	; (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f003 020c 	and.w	r2, r3, #12
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d1eb      	bne.n	80022d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002300:	4b27      	ldr	r3, [pc, #156]	; (80023a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0307 	and.w	r3, r3, #7
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	429a      	cmp	r2, r3
 800230c:	d210      	bcs.n	8002330 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230e:	4b24      	ldr	r3, [pc, #144]	; (80023a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f023 0207 	bic.w	r2, r3, #7
 8002316:	4922      	ldr	r1, [pc, #136]	; (80023a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	4313      	orrs	r3, r2
 800231c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800231e:	4b20      	ldr	r3, [pc, #128]	; (80023a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	429a      	cmp	r2, r3
 800232a:	d001      	beq.n	8002330 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e032      	b.n	8002396 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b00      	cmp	r3, #0
 800233a:	d008      	beq.n	800234e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800233c:	4b19      	ldr	r3, [pc, #100]	; (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	4916      	ldr	r1, [pc, #88]	; (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 800234a:	4313      	orrs	r3, r2
 800234c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0308 	and.w	r3, r3, #8
 8002356:	2b00      	cmp	r3, #0
 8002358:	d009      	beq.n	800236e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800235a:	4b12      	ldr	r3, [pc, #72]	; (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	490e      	ldr	r1, [pc, #56]	; (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 800236a:	4313      	orrs	r3, r2
 800236c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800236e:	f000 f821 	bl	80023b4 <HAL_RCC_GetSysClockFreq>
 8002372:	4602      	mov	r2, r0
 8002374:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	091b      	lsrs	r3, r3, #4
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	490a      	ldr	r1, [pc, #40]	; (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002380:	5ccb      	ldrb	r3, [r1, r3]
 8002382:	fa22 f303 	lsr.w	r3, r2, r3
 8002386:	4a09      	ldr	r2, [pc, #36]	; (80023ac <HAL_RCC_ClockConfig+0x1cc>)
 8002388:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800238a:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <HAL_RCC_ClockConfig+0x1d0>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff f98a 	bl	80016a8 <HAL_InitTick>

  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40022000 	.word	0x40022000
 80023a4:	40021000 	.word	0x40021000
 80023a8:	08002e74 	.word	0x08002e74
 80023ac:	20000054 	.word	0x20000054
 80023b0:	20000058 	.word	0x20000058

080023b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b087      	sub	sp, #28
 80023b8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	2300      	movs	r3, #0
 80023c0:	60bb      	str	r3, [r7, #8]
 80023c2:	2300      	movs	r3, #0
 80023c4:	617b      	str	r3, [r7, #20]
 80023c6:	2300      	movs	r3, #0
 80023c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023ce:	4b1e      	ldr	r3, [pc, #120]	; (8002448 <HAL_RCC_GetSysClockFreq+0x94>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f003 030c 	and.w	r3, r3, #12
 80023da:	2b04      	cmp	r3, #4
 80023dc:	d002      	beq.n	80023e4 <HAL_RCC_GetSysClockFreq+0x30>
 80023de:	2b08      	cmp	r3, #8
 80023e0:	d003      	beq.n	80023ea <HAL_RCC_GetSysClockFreq+0x36>
 80023e2:	e027      	b.n	8002434 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023e4:	4b19      	ldr	r3, [pc, #100]	; (800244c <HAL_RCC_GetSysClockFreq+0x98>)
 80023e6:	613b      	str	r3, [r7, #16]
      break;
 80023e8:	e027      	b.n	800243a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	0c9b      	lsrs	r3, r3, #18
 80023ee:	f003 030f 	and.w	r3, r3, #15
 80023f2:	4a17      	ldr	r2, [pc, #92]	; (8002450 <HAL_RCC_GetSysClockFreq+0x9c>)
 80023f4:	5cd3      	ldrb	r3, [r2, r3]
 80023f6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d010      	beq.n	8002424 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002402:	4b11      	ldr	r3, [pc, #68]	; (8002448 <HAL_RCC_GetSysClockFreq+0x94>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	0c5b      	lsrs	r3, r3, #17
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	4a11      	ldr	r2, [pc, #68]	; (8002454 <HAL_RCC_GetSysClockFreq+0xa0>)
 800240e:	5cd3      	ldrb	r3, [r2, r3]
 8002410:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a0d      	ldr	r2, [pc, #52]	; (800244c <HAL_RCC_GetSysClockFreq+0x98>)
 8002416:	fb02 f203 	mul.w	r2, r2, r3
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002420:	617b      	str	r3, [r7, #20]
 8002422:	e004      	b.n	800242e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a0c      	ldr	r2, [pc, #48]	; (8002458 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002428:	fb02 f303 	mul.w	r3, r2, r3
 800242c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	613b      	str	r3, [r7, #16]
      break;
 8002432:	e002      	b.n	800243a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002434:	4b05      	ldr	r3, [pc, #20]	; (800244c <HAL_RCC_GetSysClockFreq+0x98>)
 8002436:	613b      	str	r3, [r7, #16]
      break;
 8002438:	bf00      	nop
    }
  }
  return sysclockfreq;
 800243a:	693b      	ldr	r3, [r7, #16]
}
 800243c:	4618      	mov	r0, r3
 800243e:	371c      	adds	r7, #28
 8002440:	46bd      	mov	sp, r7
 8002442:	bc80      	pop	{r7}
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	40021000 	.word	0x40021000
 800244c:	007a1200 	.word	0x007a1200
 8002450:	08002e84 	.word	0x08002e84
 8002454:	08002e94 	.word	0x08002e94
 8002458:	003d0900 	.word	0x003d0900

0800245c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002464:	4b0a      	ldr	r3, [pc, #40]	; (8002490 <RCC_Delay+0x34>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a0a      	ldr	r2, [pc, #40]	; (8002494 <RCC_Delay+0x38>)
 800246a:	fba2 2303 	umull	r2, r3, r2, r3
 800246e:	0a5b      	lsrs	r3, r3, #9
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	fb02 f303 	mul.w	r3, r2, r3
 8002476:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002478:	bf00      	nop
  }
  while (Delay --);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	1e5a      	subs	r2, r3, #1
 800247e:	60fa      	str	r2, [r7, #12]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1f9      	bne.n	8002478 <RCC_Delay+0x1c>
}
 8002484:	bf00      	nop
 8002486:	bf00      	nop
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	bc80      	pop	{r7}
 800248e:	4770      	bx	lr
 8002490:	20000054 	.word	0x20000054
 8002494:	10624dd3 	.word	0x10624dd3

08002498 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e041      	b.n	800252e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d106      	bne.n	80024c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f7fe ff1e 	bl	8001300 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2202      	movs	r2, #2
 80024c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3304      	adds	r3, #4
 80024d4:	4619      	mov	r1, r3
 80024d6:	4610      	mov	r0, r2
 80024d8:	f000 fa56 	bl	8002988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b01      	cmp	r3, #1
 800254a:	d001      	beq.n	8002550 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e035      	b.n	80025bc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2202      	movs	r2, #2
 8002554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68da      	ldr	r2, [r3, #12]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 0201 	orr.w	r2, r2, #1
 8002566:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a16      	ldr	r2, [pc, #88]	; (80025c8 <HAL_TIM_Base_Start_IT+0x90>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d009      	beq.n	8002586 <HAL_TIM_Base_Start_IT+0x4e>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800257a:	d004      	beq.n	8002586 <HAL_TIM_Base_Start_IT+0x4e>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a12      	ldr	r2, [pc, #72]	; (80025cc <HAL_TIM_Base_Start_IT+0x94>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d111      	bne.n	80025aa <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2b06      	cmp	r3, #6
 8002596:	d010      	beq.n	80025ba <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f042 0201 	orr.w	r2, r2, #1
 80025a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025a8:	e007      	b.n	80025ba <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f042 0201 	orr.w	r2, r2, #1
 80025b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bc80      	pop	{r7}
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	40012c00 	.word	0x40012c00
 80025cc:	40000400 	.word	0x40000400

080025d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d020      	beq.n	8002634 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d01b      	beq.n	8002634 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f06f 0202 	mvn.w	r2, #2
 8002604:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	f003 0303 	and.w	r3, r3, #3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f998 	bl	8002950 <HAL_TIM_IC_CaptureCallback>
 8002620:	e005      	b.n	800262e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f98b 	bl	800293e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 f99a 	bl	8002962 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	f003 0304 	and.w	r3, r3, #4
 800263a:	2b00      	cmp	r3, #0
 800263c:	d020      	beq.n	8002680 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	2b00      	cmp	r3, #0
 8002646:	d01b      	beq.n	8002680 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f06f 0204 	mvn.w	r2, #4
 8002650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2202      	movs	r2, #2
 8002656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 f972 	bl	8002950 <HAL_TIM_IC_CaptureCallback>
 800266c:	e005      	b.n	800267a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f965 	bl	800293e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 f974 	bl	8002962 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	f003 0308 	and.w	r3, r3, #8
 8002686:	2b00      	cmp	r3, #0
 8002688:	d020      	beq.n	80026cc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f003 0308 	and.w	r3, r3, #8
 8002690:	2b00      	cmp	r3, #0
 8002692:	d01b      	beq.n	80026cc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f06f 0208 	mvn.w	r2, #8
 800269c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2204      	movs	r2, #4
 80026a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f94c 	bl	8002950 <HAL_TIM_IC_CaptureCallback>
 80026b8:	e005      	b.n	80026c6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 f93f 	bl	800293e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 f94e 	bl	8002962 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	f003 0310 	and.w	r3, r3, #16
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d020      	beq.n	8002718 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f003 0310 	and.w	r3, r3, #16
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d01b      	beq.n	8002718 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f06f 0210 	mvn.w	r2, #16
 80026e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2208      	movs	r2, #8
 80026ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 f926 	bl	8002950 <HAL_TIM_IC_CaptureCallback>
 8002704:	e005      	b.n	8002712 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 f919 	bl	800293e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f000 f928 	bl	8002962 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00c      	beq.n	800273c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b00      	cmp	r3, #0
 800272a:	d007      	beq.n	800273c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f06f 0201 	mvn.w	r2, #1
 8002734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7fe fc28 	bl	8000f8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00c      	beq.n	8002760 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800274c:	2b00      	cmp	r3, #0
 800274e:	d007      	beq.n	8002760 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 fa6f 	bl	8002c3e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00c      	beq.n	8002784 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002770:	2b00      	cmp	r3, #0
 8002772:	d007      	beq.n	8002784 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800277c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 f8f8 	bl	8002974 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	f003 0320 	and.w	r3, r3, #32
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00c      	beq.n	80027a8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f003 0320 	and.w	r3, r3, #32
 8002794:	2b00      	cmp	r3, #0
 8002796:	d007      	beq.n	80027a8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f06f 0220 	mvn.w	r2, #32
 80027a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 fa42 	bl	8002c2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027a8:	bf00      	nop
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027ba:	2300      	movs	r3, #0
 80027bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d101      	bne.n	80027cc <HAL_TIM_ConfigClockSource+0x1c>
 80027c8:	2302      	movs	r3, #2
 80027ca:	e0b4      	b.n	8002936 <HAL_TIM_ConfigClockSource+0x186>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2202      	movs	r2, #2
 80027d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68ba      	ldr	r2, [r7, #8]
 80027fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002804:	d03e      	beq.n	8002884 <HAL_TIM_ConfigClockSource+0xd4>
 8002806:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800280a:	f200 8087 	bhi.w	800291c <HAL_TIM_ConfigClockSource+0x16c>
 800280e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002812:	f000 8086 	beq.w	8002922 <HAL_TIM_ConfigClockSource+0x172>
 8002816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800281a:	d87f      	bhi.n	800291c <HAL_TIM_ConfigClockSource+0x16c>
 800281c:	2b70      	cmp	r3, #112	; 0x70
 800281e:	d01a      	beq.n	8002856 <HAL_TIM_ConfigClockSource+0xa6>
 8002820:	2b70      	cmp	r3, #112	; 0x70
 8002822:	d87b      	bhi.n	800291c <HAL_TIM_ConfigClockSource+0x16c>
 8002824:	2b60      	cmp	r3, #96	; 0x60
 8002826:	d050      	beq.n	80028ca <HAL_TIM_ConfigClockSource+0x11a>
 8002828:	2b60      	cmp	r3, #96	; 0x60
 800282a:	d877      	bhi.n	800291c <HAL_TIM_ConfigClockSource+0x16c>
 800282c:	2b50      	cmp	r3, #80	; 0x50
 800282e:	d03c      	beq.n	80028aa <HAL_TIM_ConfigClockSource+0xfa>
 8002830:	2b50      	cmp	r3, #80	; 0x50
 8002832:	d873      	bhi.n	800291c <HAL_TIM_ConfigClockSource+0x16c>
 8002834:	2b40      	cmp	r3, #64	; 0x40
 8002836:	d058      	beq.n	80028ea <HAL_TIM_ConfigClockSource+0x13a>
 8002838:	2b40      	cmp	r3, #64	; 0x40
 800283a:	d86f      	bhi.n	800291c <HAL_TIM_ConfigClockSource+0x16c>
 800283c:	2b30      	cmp	r3, #48	; 0x30
 800283e:	d064      	beq.n	800290a <HAL_TIM_ConfigClockSource+0x15a>
 8002840:	2b30      	cmp	r3, #48	; 0x30
 8002842:	d86b      	bhi.n	800291c <HAL_TIM_ConfigClockSource+0x16c>
 8002844:	2b20      	cmp	r3, #32
 8002846:	d060      	beq.n	800290a <HAL_TIM_ConfigClockSource+0x15a>
 8002848:	2b20      	cmp	r3, #32
 800284a:	d867      	bhi.n	800291c <HAL_TIM_ConfigClockSource+0x16c>
 800284c:	2b00      	cmp	r3, #0
 800284e:	d05c      	beq.n	800290a <HAL_TIM_ConfigClockSource+0x15a>
 8002850:	2b10      	cmp	r3, #16
 8002852:	d05a      	beq.n	800290a <HAL_TIM_ConfigClockSource+0x15a>
 8002854:	e062      	b.n	800291c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6818      	ldr	r0, [r3, #0]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	6899      	ldr	r1, [r3, #8]
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685a      	ldr	r2, [r3, #4]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	f000 f96a 	bl	8002b3e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002878:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68ba      	ldr	r2, [r7, #8]
 8002880:	609a      	str	r2, [r3, #8]
      break;
 8002882:	e04f      	b.n	8002924 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6818      	ldr	r0, [r3, #0]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	6899      	ldr	r1, [r3, #8]
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	f000 f953 	bl	8002b3e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	689a      	ldr	r2, [r3, #8]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028a6:	609a      	str	r2, [r3, #8]
      break;
 80028a8:	e03c      	b.n	8002924 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6818      	ldr	r0, [r3, #0]
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	6859      	ldr	r1, [r3, #4]
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	461a      	mov	r2, r3
 80028b8:	f000 f8ca 	bl	8002a50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2150      	movs	r1, #80	; 0x50
 80028c2:	4618      	mov	r0, r3
 80028c4:	f000 f921 	bl	8002b0a <TIM_ITRx_SetConfig>
      break;
 80028c8:	e02c      	b.n	8002924 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6818      	ldr	r0, [r3, #0]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	6859      	ldr	r1, [r3, #4]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	461a      	mov	r2, r3
 80028d8:	f000 f8e8 	bl	8002aac <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2160      	movs	r1, #96	; 0x60
 80028e2:	4618      	mov	r0, r3
 80028e4:	f000 f911 	bl	8002b0a <TIM_ITRx_SetConfig>
      break;
 80028e8:	e01c      	b.n	8002924 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6818      	ldr	r0, [r3, #0]
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	6859      	ldr	r1, [r3, #4]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	461a      	mov	r2, r3
 80028f8:	f000 f8aa 	bl	8002a50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2140      	movs	r1, #64	; 0x40
 8002902:	4618      	mov	r0, r3
 8002904:	f000 f901 	bl	8002b0a <TIM_ITRx_SetConfig>
      break;
 8002908:	e00c      	b.n	8002924 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4619      	mov	r1, r3
 8002914:	4610      	mov	r0, r2
 8002916:	f000 f8f8 	bl	8002b0a <TIM_ITRx_SetConfig>
      break;
 800291a:	e003      	b.n	8002924 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	73fb      	strb	r3, [r7, #15]
      break;
 8002920:	e000      	b.n	8002924 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002922:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002934:	7bfb      	ldrb	r3, [r7, #15]
}
 8002936:	4618      	mov	r0, r3
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr

08002950 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	bc80      	pop	{r7}
 8002960:	4770      	bx	lr

08002962 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002962:	b480      	push	{r7}
 8002964:	b083      	sub	sp, #12
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr

08002974 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr
	...

08002988 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a2b      	ldr	r2, [pc, #172]	; (8002a48 <TIM_Base_SetConfig+0xc0>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d007      	beq.n	80029b0 <TIM_Base_SetConfig+0x28>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029a6:	d003      	beq.n	80029b0 <TIM_Base_SetConfig+0x28>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a28      	ldr	r2, [pc, #160]	; (8002a4c <TIM_Base_SetConfig+0xc4>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d108      	bne.n	80029c2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	4313      	orrs	r3, r2
 80029c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a20      	ldr	r2, [pc, #128]	; (8002a48 <TIM_Base_SetConfig+0xc0>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d007      	beq.n	80029da <TIM_Base_SetConfig+0x52>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029d0:	d003      	beq.n	80029da <TIM_Base_SetConfig+0x52>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a1d      	ldr	r2, [pc, #116]	; (8002a4c <TIM_Base_SetConfig+0xc4>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d108      	bne.n	80029ec <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a0d      	ldr	r2, [pc, #52]	; (8002a48 <TIM_Base_SetConfig+0xc0>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d103      	bne.n	8002a20 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	691a      	ldr	r2, [r3, #16]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d005      	beq.n	8002a3e <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	f023 0201 	bic.w	r2, r3, #1
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	611a      	str	r2, [r3, #16]
  }
}
 8002a3e:	bf00      	nop
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr
 8002a48:	40012c00 	.word	0x40012c00
 8002a4c:	40000400 	.word	0x40000400

08002a50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b087      	sub	sp, #28
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	f023 0201 	bic.w	r2, r3, #1
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	011b      	lsls	r3, r3, #4
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	f023 030a 	bic.w	r3, r3, #10
 8002a8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	621a      	str	r2, [r3, #32]
}
 8002aa2:	bf00      	nop
 8002aa4:	371c      	adds	r7, #28
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bc80      	pop	{r7}
 8002aaa:	4770      	bx	lr

08002aac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b087      	sub	sp, #28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	f023 0210 	bic.w	r2, r3, #16
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ad6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	031b      	lsls	r3, r3, #12
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ae8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	011b      	lsls	r3, r3, #4
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	621a      	str	r2, [r3, #32]
}
 8002b00:	bf00      	nop
 8002b02:	371c      	adds	r7, #28
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bc80      	pop	{r7}
 8002b08:	4770      	bx	lr

08002b0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b085      	sub	sp, #20
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
 8002b12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	f043 0307 	orr.w	r3, r3, #7
 8002b2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	609a      	str	r2, [r3, #8]
}
 8002b34:	bf00      	nop
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc80      	pop	{r7}
 8002b3c:	4770      	bx	lr

08002b3e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b087      	sub	sp, #28
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	60f8      	str	r0, [r7, #12]
 8002b46:	60b9      	str	r1, [r7, #8]
 8002b48:	607a      	str	r2, [r7, #4]
 8002b4a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b58:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	021a      	lsls	r2, r3, #8
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	431a      	orrs	r2, r3
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	609a      	str	r2, [r3, #8]
}
 8002b72:	bf00      	nop
 8002b74:	371c      	adds	r7, #28
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bc80      	pop	{r7}
 8002b7a:	4770      	bx	lr

08002b7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d101      	bne.n	8002b94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b90:	2302      	movs	r3, #2
 8002b92:	e041      	b.n	8002c18 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a14      	ldr	r2, [pc, #80]	; (8002c24 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d009      	beq.n	8002bec <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be0:	d004      	beq.n	8002bec <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a10      	ldr	r2, [pc, #64]	; (8002c28 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d10c      	bne.n	8002c06 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bf2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	68ba      	ldr	r2, [r7, #8]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68ba      	ldr	r2, [r7, #8]
 8002c04:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3714      	adds	r7, #20
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bc80      	pop	{r7}
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	40012c00 	.word	0x40012c00
 8002c28:	40000400 	.word	0x40000400

08002c2c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bc80      	pop	{r7}
 8002c3c:	4770      	bx	lr

08002c3e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b083      	sub	sp, #12
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr

08002c50 <__errno>:
 8002c50:	4b01      	ldr	r3, [pc, #4]	; (8002c58 <__errno+0x8>)
 8002c52:	6818      	ldr	r0, [r3, #0]
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	20000060 	.word	0x20000060

08002c5c <__libc_init_array>:
 8002c5c:	b570      	push	{r4, r5, r6, lr}
 8002c5e:	2600      	movs	r6, #0
 8002c60:	4d0c      	ldr	r5, [pc, #48]	; (8002c94 <__libc_init_array+0x38>)
 8002c62:	4c0d      	ldr	r4, [pc, #52]	; (8002c98 <__libc_init_array+0x3c>)
 8002c64:	1b64      	subs	r4, r4, r5
 8002c66:	10a4      	asrs	r4, r4, #2
 8002c68:	42a6      	cmp	r6, r4
 8002c6a:	d109      	bne.n	8002c80 <__libc_init_array+0x24>
 8002c6c:	f000 f8f6 	bl	8002e5c <_init>
 8002c70:	2600      	movs	r6, #0
 8002c72:	4d0a      	ldr	r5, [pc, #40]	; (8002c9c <__libc_init_array+0x40>)
 8002c74:	4c0a      	ldr	r4, [pc, #40]	; (8002ca0 <__libc_init_array+0x44>)
 8002c76:	1b64      	subs	r4, r4, r5
 8002c78:	10a4      	asrs	r4, r4, #2
 8002c7a:	42a6      	cmp	r6, r4
 8002c7c:	d105      	bne.n	8002c8a <__libc_init_array+0x2e>
 8002c7e:	bd70      	pop	{r4, r5, r6, pc}
 8002c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c84:	4798      	blx	r3
 8002c86:	3601      	adds	r6, #1
 8002c88:	e7ee      	b.n	8002c68 <__libc_init_array+0xc>
 8002c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c8e:	4798      	blx	r3
 8002c90:	3601      	adds	r6, #1
 8002c92:	e7f2      	b.n	8002c7a <__libc_init_array+0x1e>
 8002c94:	08002e98 	.word	0x08002e98
 8002c98:	08002e98 	.word	0x08002e98
 8002c9c:	08002e98 	.word	0x08002e98
 8002ca0:	08002e9c 	.word	0x08002e9c

08002ca4 <malloc>:
 8002ca4:	4b02      	ldr	r3, [pc, #8]	; (8002cb0 <malloc+0xc>)
 8002ca6:	4601      	mov	r1, r0
 8002ca8:	6818      	ldr	r0, [r3, #0]
 8002caa:	f000 b85f 	b.w	8002d6c <_malloc_r>
 8002cae:	bf00      	nop
 8002cb0:	20000060 	.word	0x20000060

08002cb4 <free>:
 8002cb4:	4b02      	ldr	r3, [pc, #8]	; (8002cc0 <free+0xc>)
 8002cb6:	4601      	mov	r1, r0
 8002cb8:	6818      	ldr	r0, [r3, #0]
 8002cba:	f000 b80b 	b.w	8002cd4 <_free_r>
 8002cbe:	bf00      	nop
 8002cc0:	20000060 	.word	0x20000060

08002cc4 <memset>:
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	4402      	add	r2, r0
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d100      	bne.n	8002cce <memset+0xa>
 8002ccc:	4770      	bx	lr
 8002cce:	f803 1b01 	strb.w	r1, [r3], #1
 8002cd2:	e7f9      	b.n	8002cc8 <memset+0x4>

08002cd4 <_free_r>:
 8002cd4:	b538      	push	{r3, r4, r5, lr}
 8002cd6:	4605      	mov	r5, r0
 8002cd8:	2900      	cmp	r1, #0
 8002cda:	d043      	beq.n	8002d64 <_free_r+0x90>
 8002cdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ce0:	1f0c      	subs	r4, r1, #4
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	bfb8      	it	lt
 8002ce6:	18e4      	addlt	r4, r4, r3
 8002ce8:	f000 f8aa 	bl	8002e40 <__malloc_lock>
 8002cec:	4a1e      	ldr	r2, [pc, #120]	; (8002d68 <_free_r+0x94>)
 8002cee:	6813      	ldr	r3, [r2, #0]
 8002cf0:	4610      	mov	r0, r2
 8002cf2:	b933      	cbnz	r3, 8002d02 <_free_r+0x2e>
 8002cf4:	6063      	str	r3, [r4, #4]
 8002cf6:	6014      	str	r4, [r2, #0]
 8002cf8:	4628      	mov	r0, r5
 8002cfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002cfe:	f000 b8a5 	b.w	8002e4c <__malloc_unlock>
 8002d02:	42a3      	cmp	r3, r4
 8002d04:	d90a      	bls.n	8002d1c <_free_r+0x48>
 8002d06:	6821      	ldr	r1, [r4, #0]
 8002d08:	1862      	adds	r2, r4, r1
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	bf01      	itttt	eq
 8002d0e:	681a      	ldreq	r2, [r3, #0]
 8002d10:	685b      	ldreq	r3, [r3, #4]
 8002d12:	1852      	addeq	r2, r2, r1
 8002d14:	6022      	streq	r2, [r4, #0]
 8002d16:	6063      	str	r3, [r4, #4]
 8002d18:	6004      	str	r4, [r0, #0]
 8002d1a:	e7ed      	b.n	8002cf8 <_free_r+0x24>
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	b10b      	cbz	r3, 8002d26 <_free_r+0x52>
 8002d22:	42a3      	cmp	r3, r4
 8002d24:	d9fa      	bls.n	8002d1c <_free_r+0x48>
 8002d26:	6811      	ldr	r1, [r2, #0]
 8002d28:	1850      	adds	r0, r2, r1
 8002d2a:	42a0      	cmp	r0, r4
 8002d2c:	d10b      	bne.n	8002d46 <_free_r+0x72>
 8002d2e:	6820      	ldr	r0, [r4, #0]
 8002d30:	4401      	add	r1, r0
 8002d32:	1850      	adds	r0, r2, r1
 8002d34:	4283      	cmp	r3, r0
 8002d36:	6011      	str	r1, [r2, #0]
 8002d38:	d1de      	bne.n	8002cf8 <_free_r+0x24>
 8002d3a:	6818      	ldr	r0, [r3, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	4401      	add	r1, r0
 8002d40:	6011      	str	r1, [r2, #0]
 8002d42:	6053      	str	r3, [r2, #4]
 8002d44:	e7d8      	b.n	8002cf8 <_free_r+0x24>
 8002d46:	d902      	bls.n	8002d4e <_free_r+0x7a>
 8002d48:	230c      	movs	r3, #12
 8002d4a:	602b      	str	r3, [r5, #0]
 8002d4c:	e7d4      	b.n	8002cf8 <_free_r+0x24>
 8002d4e:	6820      	ldr	r0, [r4, #0]
 8002d50:	1821      	adds	r1, r4, r0
 8002d52:	428b      	cmp	r3, r1
 8002d54:	bf01      	itttt	eq
 8002d56:	6819      	ldreq	r1, [r3, #0]
 8002d58:	685b      	ldreq	r3, [r3, #4]
 8002d5a:	1809      	addeq	r1, r1, r0
 8002d5c:	6021      	streq	r1, [r4, #0]
 8002d5e:	6063      	str	r3, [r4, #4]
 8002d60:	6054      	str	r4, [r2, #4]
 8002d62:	e7c9      	b.n	8002cf8 <_free_r+0x24>
 8002d64:	bd38      	pop	{r3, r4, r5, pc}
 8002d66:	bf00      	nop
 8002d68:	2000010c 	.word	0x2000010c

08002d6c <_malloc_r>:
 8002d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d6e:	1ccd      	adds	r5, r1, #3
 8002d70:	f025 0503 	bic.w	r5, r5, #3
 8002d74:	3508      	adds	r5, #8
 8002d76:	2d0c      	cmp	r5, #12
 8002d78:	bf38      	it	cc
 8002d7a:	250c      	movcc	r5, #12
 8002d7c:	2d00      	cmp	r5, #0
 8002d7e:	4606      	mov	r6, r0
 8002d80:	db01      	blt.n	8002d86 <_malloc_r+0x1a>
 8002d82:	42a9      	cmp	r1, r5
 8002d84:	d903      	bls.n	8002d8e <_malloc_r+0x22>
 8002d86:	230c      	movs	r3, #12
 8002d88:	6033      	str	r3, [r6, #0]
 8002d8a:	2000      	movs	r0, #0
 8002d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d8e:	f000 f857 	bl	8002e40 <__malloc_lock>
 8002d92:	4921      	ldr	r1, [pc, #132]	; (8002e18 <_malloc_r+0xac>)
 8002d94:	680a      	ldr	r2, [r1, #0]
 8002d96:	4614      	mov	r4, r2
 8002d98:	b99c      	cbnz	r4, 8002dc2 <_malloc_r+0x56>
 8002d9a:	4f20      	ldr	r7, [pc, #128]	; (8002e1c <_malloc_r+0xb0>)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	b923      	cbnz	r3, 8002daa <_malloc_r+0x3e>
 8002da0:	4621      	mov	r1, r4
 8002da2:	4630      	mov	r0, r6
 8002da4:	f000 f83c 	bl	8002e20 <_sbrk_r>
 8002da8:	6038      	str	r0, [r7, #0]
 8002daa:	4629      	mov	r1, r5
 8002dac:	4630      	mov	r0, r6
 8002dae:	f000 f837 	bl	8002e20 <_sbrk_r>
 8002db2:	1c43      	adds	r3, r0, #1
 8002db4:	d123      	bne.n	8002dfe <_malloc_r+0x92>
 8002db6:	230c      	movs	r3, #12
 8002db8:	4630      	mov	r0, r6
 8002dba:	6033      	str	r3, [r6, #0]
 8002dbc:	f000 f846 	bl	8002e4c <__malloc_unlock>
 8002dc0:	e7e3      	b.n	8002d8a <_malloc_r+0x1e>
 8002dc2:	6823      	ldr	r3, [r4, #0]
 8002dc4:	1b5b      	subs	r3, r3, r5
 8002dc6:	d417      	bmi.n	8002df8 <_malloc_r+0x8c>
 8002dc8:	2b0b      	cmp	r3, #11
 8002dca:	d903      	bls.n	8002dd4 <_malloc_r+0x68>
 8002dcc:	6023      	str	r3, [r4, #0]
 8002dce:	441c      	add	r4, r3
 8002dd0:	6025      	str	r5, [r4, #0]
 8002dd2:	e004      	b.n	8002dde <_malloc_r+0x72>
 8002dd4:	6863      	ldr	r3, [r4, #4]
 8002dd6:	42a2      	cmp	r2, r4
 8002dd8:	bf0c      	ite	eq
 8002dda:	600b      	streq	r3, [r1, #0]
 8002ddc:	6053      	strne	r3, [r2, #4]
 8002dde:	4630      	mov	r0, r6
 8002de0:	f000 f834 	bl	8002e4c <__malloc_unlock>
 8002de4:	f104 000b 	add.w	r0, r4, #11
 8002de8:	1d23      	adds	r3, r4, #4
 8002dea:	f020 0007 	bic.w	r0, r0, #7
 8002dee:	1ac2      	subs	r2, r0, r3
 8002df0:	d0cc      	beq.n	8002d8c <_malloc_r+0x20>
 8002df2:	1a1b      	subs	r3, r3, r0
 8002df4:	50a3      	str	r3, [r4, r2]
 8002df6:	e7c9      	b.n	8002d8c <_malloc_r+0x20>
 8002df8:	4622      	mov	r2, r4
 8002dfa:	6864      	ldr	r4, [r4, #4]
 8002dfc:	e7cc      	b.n	8002d98 <_malloc_r+0x2c>
 8002dfe:	1cc4      	adds	r4, r0, #3
 8002e00:	f024 0403 	bic.w	r4, r4, #3
 8002e04:	42a0      	cmp	r0, r4
 8002e06:	d0e3      	beq.n	8002dd0 <_malloc_r+0x64>
 8002e08:	1a21      	subs	r1, r4, r0
 8002e0a:	4630      	mov	r0, r6
 8002e0c:	f000 f808 	bl	8002e20 <_sbrk_r>
 8002e10:	3001      	adds	r0, #1
 8002e12:	d1dd      	bne.n	8002dd0 <_malloc_r+0x64>
 8002e14:	e7cf      	b.n	8002db6 <_malloc_r+0x4a>
 8002e16:	bf00      	nop
 8002e18:	2000010c 	.word	0x2000010c
 8002e1c:	20000110 	.word	0x20000110

08002e20 <_sbrk_r>:
 8002e20:	b538      	push	{r3, r4, r5, lr}
 8002e22:	2300      	movs	r3, #0
 8002e24:	4d05      	ldr	r5, [pc, #20]	; (8002e3c <_sbrk_r+0x1c>)
 8002e26:	4604      	mov	r4, r0
 8002e28:	4608      	mov	r0, r1
 8002e2a:	602b      	str	r3, [r5, #0]
 8002e2c:	f7fe fabe 	bl	80013ac <_sbrk>
 8002e30:	1c43      	adds	r3, r0, #1
 8002e32:	d102      	bne.n	8002e3a <_sbrk_r+0x1a>
 8002e34:	682b      	ldr	r3, [r5, #0]
 8002e36:	b103      	cbz	r3, 8002e3a <_sbrk_r+0x1a>
 8002e38:	6023      	str	r3, [r4, #0]
 8002e3a:	bd38      	pop	{r3, r4, r5, pc}
 8002e3c:	2000016c 	.word	0x2000016c

08002e40 <__malloc_lock>:
 8002e40:	4801      	ldr	r0, [pc, #4]	; (8002e48 <__malloc_lock+0x8>)
 8002e42:	f000 b809 	b.w	8002e58 <__retarget_lock_acquire_recursive>
 8002e46:	bf00      	nop
 8002e48:	20000174 	.word	0x20000174

08002e4c <__malloc_unlock>:
 8002e4c:	4801      	ldr	r0, [pc, #4]	; (8002e54 <__malloc_unlock+0x8>)
 8002e4e:	f000 b804 	b.w	8002e5a <__retarget_lock_release_recursive>
 8002e52:	bf00      	nop
 8002e54:	20000174 	.word	0x20000174

08002e58 <__retarget_lock_acquire_recursive>:
 8002e58:	4770      	bx	lr

08002e5a <__retarget_lock_release_recursive>:
 8002e5a:	4770      	bx	lr

08002e5c <_init>:
 8002e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e5e:	bf00      	nop
 8002e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e62:	bc08      	pop	{r3}
 8002e64:	469e      	mov	lr, r3
 8002e66:	4770      	bx	lr

08002e68 <_fini>:
 8002e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e6a:	bf00      	nop
 8002e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e6e:	bc08      	pop	{r3}
 8002e70:	469e      	mov	lr, r3
 8002e72:	4770      	bx	lr
