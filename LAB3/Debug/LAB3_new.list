
LAB3_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002958  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002a64  08002a64  00012a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a88  08002a88  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08002a88  08002a88  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a88  08002a88  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a88  08002a88  00012a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a8c  08002a8c  00012a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08002a90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000060  08002af0  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08002af0  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009369  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bbb  00000000  00000000  000293f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  0002afb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000958  00000000  00000000  0002ba38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b34  00000000  00000000  0002c390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b589  00000000  00000000  00042ec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000823ce  00000000  00000000  0004e44d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d081b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028d8  00000000  00000000  000d0870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a4c 	.word	0x08002a4c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08002a4c 	.word	0x08002a4c

0800014c <updateBuffer7SEG>:
#include "7SEG_led.h"
#include "main.h"

int buffer7SEG_led[4] = {0,0,0,0};

void updateBuffer7SEG(int index, int time){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
	buffer7SEG_led[index*2] = time / 10;
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	005a      	lsls	r2, r3, #1
 800015a:	683b      	ldr	r3, [r7, #0]
 800015c:	490f      	ldr	r1, [pc, #60]	; (800019c <updateBuffer7SEG+0x50>)
 800015e:	fb81 0103 	smull	r0, r1, r1, r3
 8000162:	1089      	asrs	r1, r1, #2
 8000164:	17db      	asrs	r3, r3, #31
 8000166:	1acb      	subs	r3, r1, r3
 8000168:	490d      	ldr	r1, [pc, #52]	; (80001a0 <updateBuffer7SEG+0x54>)
 800016a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	buffer7SEG_led[index*2+1] = time % 10;
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	005b      	lsls	r3, r3, #1
 8000172:	1c58      	adds	r0, r3, #1
 8000174:	6839      	ldr	r1, [r7, #0]
 8000176:	4b09      	ldr	r3, [pc, #36]	; (800019c <updateBuffer7SEG+0x50>)
 8000178:	fb83 2301 	smull	r2, r3, r3, r1
 800017c:	109a      	asrs	r2, r3, #2
 800017e:	17cb      	asrs	r3, r1, #31
 8000180:	1ad2      	subs	r2, r2, r3
 8000182:	4613      	mov	r3, r2
 8000184:	009b      	lsls	r3, r3, #2
 8000186:	4413      	add	r3, r2
 8000188:	005b      	lsls	r3, r3, #1
 800018a:	1aca      	subs	r2, r1, r3
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <updateBuffer7SEG+0x54>)
 800018e:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	66666667 	.word	0x66666667
 80001a0:	2000007c 	.word	0x2000007c

080001a4 <update7SEG>:

void update7SEG(int index){
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b082      	sub	sp, #8
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	6078      	str	r0, [r7, #4]
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	2b03      	cmp	r3, #3
 80001b0:	d86a      	bhi.n	8000288 <update7SEG+0xe4>
 80001b2:	a201      	add	r2, pc, #4	; (adr r2, 80001b8 <update7SEG+0x14>)
 80001b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001b8:	080001c9 	.word	0x080001c9
 80001bc:	080001f9 	.word	0x080001f9
 80001c0:	08000229 	.word	0x08000229
 80001c4:	08000259 	.word	0x08000259

	switch (index){
	case 0:
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 80001c8:	2200      	movs	r2, #0
 80001ca:	2180      	movs	r1, #128	; 0x80
 80001cc:	4834      	ldr	r0, [pc, #208]	; (80002a0 <update7SEG+0xfc>)
 80001ce:	f001 fc28 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80001d2:	2201      	movs	r2, #1
 80001d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001d8:	4831      	ldr	r0, [pc, #196]	; (80002a0 <update7SEG+0xfc>)
 80001da:	f001 fc22 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 80001de:	2201      	movs	r2, #1
 80001e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001e4:	482e      	ldr	r0, [pc, #184]	; (80002a0 <update7SEG+0xfc>)
 80001e6:	f001 fc1c 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, SET);
 80001ea:	2201      	movs	r2, #1
 80001ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001f0:	482b      	ldr	r0, [pc, #172]	; (80002a0 <update7SEG+0xfc>)
 80001f2:	f001 fc16 	bl	8001a22 <HAL_GPIO_WritePin>
		break;
 80001f6:	e048      	b.n	800028a <update7SEG+0xe6>
	case 1:
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80001f8:	2201      	movs	r2, #1
 80001fa:	2180      	movs	r1, #128	; 0x80
 80001fc:	4828      	ldr	r0, [pc, #160]	; (80002a0 <update7SEG+0xfc>)
 80001fe:	f001 fc10 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000202:	2200      	movs	r2, #0
 8000204:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000208:	4825      	ldr	r0, [pc, #148]	; (80002a0 <update7SEG+0xfc>)
 800020a:	f001 fc0a 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 800020e:	2201      	movs	r2, #1
 8000210:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000214:	4822      	ldr	r0, [pc, #136]	; (80002a0 <update7SEG+0xfc>)
 8000216:	f001 fc04 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, SET);
 800021a:	2201      	movs	r2, #1
 800021c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000220:	481f      	ldr	r0, [pc, #124]	; (80002a0 <update7SEG+0xfc>)
 8000222:	f001 fbfe 	bl	8001a22 <HAL_GPIO_WritePin>
		break;
 8000226:	e030      	b.n	800028a <update7SEG+0xe6>
	case 2:
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000228:	2201      	movs	r2, #1
 800022a:	2180      	movs	r1, #128	; 0x80
 800022c:	481c      	ldr	r0, [pc, #112]	; (80002a0 <update7SEG+0xfc>)
 800022e:	f001 fbf8 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000232:	2201      	movs	r2, #1
 8000234:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000238:	4819      	ldr	r0, [pc, #100]	; (80002a0 <update7SEG+0xfc>)
 800023a:	f001 fbf2 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 800023e:	2200      	movs	r2, #0
 8000240:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000244:	4816      	ldr	r0, [pc, #88]	; (80002a0 <update7SEG+0xfc>)
 8000246:	f001 fbec 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, SET);
 800024a:	2201      	movs	r2, #1
 800024c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000250:	4813      	ldr	r0, [pc, #76]	; (80002a0 <update7SEG+0xfc>)
 8000252:	f001 fbe6 	bl	8001a22 <HAL_GPIO_WritePin>
		break;
 8000256:	e018      	b.n	800028a <update7SEG+0xe6>
	case 3:
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000258:	2201      	movs	r2, #1
 800025a:	2180      	movs	r1, #128	; 0x80
 800025c:	4810      	ldr	r0, [pc, #64]	; (80002a0 <update7SEG+0xfc>)
 800025e:	f001 fbe0 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000262:	2201      	movs	r2, #1
 8000264:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000268:	480d      	ldr	r0, [pc, #52]	; (80002a0 <update7SEG+0xfc>)
 800026a:	f001 fbda 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 800026e:	2201      	movs	r2, #1
 8000270:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000274:	480a      	ldr	r0, [pc, #40]	; (80002a0 <update7SEG+0xfc>)
 8000276:	f001 fbd4 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, RESET);
 800027a:	2200      	movs	r2, #0
 800027c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000280:	4807      	ldr	r0, [pc, #28]	; (80002a0 <update7SEG+0xfc>)
 8000282:	f001 fbce 	bl	8001a22 <HAL_GPIO_WritePin>
		break;
 8000286:	e000      	b.n	800028a <update7SEG+0xe6>
	default:
		break;
 8000288:	bf00      	nop
	}
	display7SEG(buffer7SEG_led[index]);
 800028a:	4a06      	ldr	r2, [pc, #24]	; (80002a4 <update7SEG+0x100>)
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000292:	4618      	mov	r0, r3
 8000294:	f000 f808 	bl	80002a8 <display7SEG>
}
 8000298:	bf00      	nop
 800029a:	3708      	adds	r7, #8
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	40010c00 	.word	0x40010c00
 80002a4:	2000007c 	.word	0x2000007c

080002a8 <display7SEG>:

void display7SEG(int num)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	2b09      	cmp	r3, #9
 80002b4:	f200 8180 	bhi.w	80005b8 <display7SEG+0x310>
 80002b8:	a201      	add	r2, pc, #4	; (adr r2, 80002c0 <display7SEG+0x18>)
 80002ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002be:	bf00      	nop
 80002c0:	080002e9 	.word	0x080002e9
 80002c4:	08000331 	.word	0x08000331
 80002c8:	08000379 	.word	0x08000379
 80002cc:	080003c1 	.word	0x080003c1
 80002d0:	08000409 	.word	0x08000409
 80002d4:	08000451 	.word	0x08000451
 80002d8:	08000499 	.word	0x08000499
 80002dc:	080004e1 	.word	0x080004e1
 80002e0:	08000529 	.word	0x08000529
 80002e4:	08000571 	.word	0x08000571
	switch (num){
	case 0:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 80002e8:	2200      	movs	r2, #0
 80002ea:	2101      	movs	r1, #1
 80002ec:	48b5      	ldr	r0, [pc, #724]	; (80005c4 <display7SEG+0x31c>)
 80002ee:	f001 fb98 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80002f2:	2200      	movs	r2, #0
 80002f4:	2102      	movs	r1, #2
 80002f6:	48b3      	ldr	r0, [pc, #716]	; (80005c4 <display7SEG+0x31c>)
 80002f8:	f001 fb93 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80002fc:	2200      	movs	r2, #0
 80002fe:	2104      	movs	r1, #4
 8000300:	48b0      	ldr	r0, [pc, #704]	; (80005c4 <display7SEG+0x31c>)
 8000302:	f001 fb8e 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000306:	2200      	movs	r2, #0
 8000308:	2108      	movs	r1, #8
 800030a:	48ae      	ldr	r0, [pc, #696]	; (80005c4 <display7SEG+0x31c>)
 800030c:	f001 fb89 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000310:	2200      	movs	r2, #0
 8000312:	2110      	movs	r1, #16
 8000314:	48ab      	ldr	r0, [pc, #684]	; (80005c4 <display7SEG+0x31c>)
 8000316:	f001 fb84 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 800031a:	2200      	movs	r2, #0
 800031c:	2120      	movs	r1, #32
 800031e:	48a9      	ldr	r0, [pc, #676]	; (80005c4 <display7SEG+0x31c>)
 8000320:	f001 fb7f 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000324:	2201      	movs	r2, #1
 8000326:	2140      	movs	r1, #64	; 0x40
 8000328:	48a6      	ldr	r0, [pc, #664]	; (80005c4 <display7SEG+0x31c>)
 800032a:	f001 fb7a 	bl	8001a22 <HAL_GPIO_WritePin>
		break;
 800032e:	e144      	b.n	80005ba <display7SEG+0x312>
	case 1:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 8000330:	2201      	movs	r2, #1
 8000332:	2101      	movs	r1, #1
 8000334:	48a3      	ldr	r0, [pc, #652]	; (80005c4 <display7SEG+0x31c>)
 8000336:	f001 fb74 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 800033a:	2200      	movs	r2, #0
 800033c:	2102      	movs	r1, #2
 800033e:	48a1      	ldr	r0, [pc, #644]	; (80005c4 <display7SEG+0x31c>)
 8000340:	f001 fb6f 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000344:	2200      	movs	r2, #0
 8000346:	2104      	movs	r1, #4
 8000348:	489e      	ldr	r0, [pc, #632]	; (80005c4 <display7SEG+0x31c>)
 800034a:	f001 fb6a 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 800034e:	2201      	movs	r2, #1
 8000350:	2108      	movs	r1, #8
 8000352:	489c      	ldr	r0, [pc, #624]	; (80005c4 <display7SEG+0x31c>)
 8000354:	f001 fb65 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000358:	2201      	movs	r2, #1
 800035a:	2110      	movs	r1, #16
 800035c:	4899      	ldr	r0, [pc, #612]	; (80005c4 <display7SEG+0x31c>)
 800035e:	f001 fb60 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000362:	2201      	movs	r2, #1
 8000364:	2120      	movs	r1, #32
 8000366:	4897      	ldr	r0, [pc, #604]	; (80005c4 <display7SEG+0x31c>)
 8000368:	f001 fb5b 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 800036c:	2201      	movs	r2, #1
 800036e:	2140      	movs	r1, #64	; 0x40
 8000370:	4894      	ldr	r0, [pc, #592]	; (80005c4 <display7SEG+0x31c>)
 8000372:	f001 fb56 	bl	8001a22 <HAL_GPIO_WritePin>
		break;
 8000376:	e120      	b.n	80005ba <display7SEG+0x312>
	case 2:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	2101      	movs	r1, #1
 800037c:	4891      	ldr	r0, [pc, #580]	; (80005c4 <display7SEG+0x31c>)
 800037e:	f001 fb50 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000382:	2200      	movs	r2, #0
 8000384:	2102      	movs	r1, #2
 8000386:	488f      	ldr	r0, [pc, #572]	; (80005c4 <display7SEG+0x31c>)
 8000388:	f001 fb4b 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, SET);
 800038c:	2201      	movs	r2, #1
 800038e:	2104      	movs	r1, #4
 8000390:	488c      	ldr	r0, [pc, #560]	; (80005c4 <display7SEG+0x31c>)
 8000392:	f001 fb46 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000396:	2200      	movs	r2, #0
 8000398:	2108      	movs	r1, #8
 800039a:	488a      	ldr	r0, [pc, #552]	; (80005c4 <display7SEG+0x31c>)
 800039c:	f001 fb41 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 80003a0:	2200      	movs	r2, #0
 80003a2:	2110      	movs	r1, #16
 80003a4:	4887      	ldr	r0, [pc, #540]	; (80005c4 <display7SEG+0x31c>)
 80003a6:	f001 fb3c 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 80003aa:	2201      	movs	r2, #1
 80003ac:	2120      	movs	r1, #32
 80003ae:	4885      	ldr	r0, [pc, #532]	; (80005c4 <display7SEG+0x31c>)
 80003b0:	f001 fb37 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 80003b4:	2200      	movs	r2, #0
 80003b6:	2140      	movs	r1, #64	; 0x40
 80003b8:	4882      	ldr	r0, [pc, #520]	; (80005c4 <display7SEG+0x31c>)
 80003ba:	f001 fb32 	bl	8001a22 <HAL_GPIO_WritePin>
		break;
 80003be:	e0fc      	b.n	80005ba <display7SEG+0x312>
	case 3:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 80003c0:	2200      	movs	r2, #0
 80003c2:	2101      	movs	r1, #1
 80003c4:	487f      	ldr	r0, [pc, #508]	; (80005c4 <display7SEG+0x31c>)
 80003c6:	f001 fb2c 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80003ca:	2200      	movs	r2, #0
 80003cc:	2102      	movs	r1, #2
 80003ce:	487d      	ldr	r0, [pc, #500]	; (80005c4 <display7SEG+0x31c>)
 80003d0:	f001 fb27 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80003d4:	2200      	movs	r2, #0
 80003d6:	2104      	movs	r1, #4
 80003d8:	487a      	ldr	r0, [pc, #488]	; (80005c4 <display7SEG+0x31c>)
 80003da:	f001 fb22 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 80003de:	2200      	movs	r2, #0
 80003e0:	2108      	movs	r1, #8
 80003e2:	4878      	ldr	r0, [pc, #480]	; (80005c4 <display7SEG+0x31c>)
 80003e4:	f001 fb1d 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 80003e8:	2201      	movs	r2, #1
 80003ea:	2110      	movs	r1, #16
 80003ec:	4875      	ldr	r0, [pc, #468]	; (80005c4 <display7SEG+0x31c>)
 80003ee:	f001 fb18 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 80003f2:	2201      	movs	r2, #1
 80003f4:	2120      	movs	r1, #32
 80003f6:	4873      	ldr	r0, [pc, #460]	; (80005c4 <display7SEG+0x31c>)
 80003f8:	f001 fb13 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 80003fc:	2200      	movs	r2, #0
 80003fe:	2140      	movs	r1, #64	; 0x40
 8000400:	4870      	ldr	r0, [pc, #448]	; (80005c4 <display7SEG+0x31c>)
 8000402:	f001 fb0e 	bl	8001a22 <HAL_GPIO_WritePin>
		break;
 8000406:	e0d8      	b.n	80005ba <display7SEG+0x312>
	case 4:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 8000408:	2201      	movs	r2, #1
 800040a:	2101      	movs	r1, #1
 800040c:	486d      	ldr	r0, [pc, #436]	; (80005c4 <display7SEG+0x31c>)
 800040e:	f001 fb08 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000412:	2200      	movs	r2, #0
 8000414:	2102      	movs	r1, #2
 8000416:	486b      	ldr	r0, [pc, #428]	; (80005c4 <display7SEG+0x31c>)
 8000418:	f001 fb03 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 800041c:	2200      	movs	r2, #0
 800041e:	2104      	movs	r1, #4
 8000420:	4868      	ldr	r0, [pc, #416]	; (80005c4 <display7SEG+0x31c>)
 8000422:	f001 fafe 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000426:	2201      	movs	r2, #1
 8000428:	2108      	movs	r1, #8
 800042a:	4866      	ldr	r0, [pc, #408]	; (80005c4 <display7SEG+0x31c>)
 800042c:	f001 faf9 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000430:	2201      	movs	r2, #1
 8000432:	2110      	movs	r1, #16
 8000434:	4863      	ldr	r0, [pc, #396]	; (80005c4 <display7SEG+0x31c>)
 8000436:	f001 faf4 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 800043a:	2200      	movs	r2, #0
 800043c:	2120      	movs	r1, #32
 800043e:	4861      	ldr	r0, [pc, #388]	; (80005c4 <display7SEG+0x31c>)
 8000440:	f001 faef 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000444:	2200      	movs	r2, #0
 8000446:	2140      	movs	r1, #64	; 0x40
 8000448:	485e      	ldr	r0, [pc, #376]	; (80005c4 <display7SEG+0x31c>)
 800044a:	f001 faea 	bl	8001a22 <HAL_GPIO_WritePin>
		break;
 800044e:	e0b4      	b.n	80005ba <display7SEG+0x312>
	case 5:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000450:	2200      	movs	r2, #0
 8000452:	2101      	movs	r1, #1
 8000454:	485b      	ldr	r0, [pc, #364]	; (80005c4 <display7SEG+0x31c>)
 8000456:	f001 fae4 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 800045a:	2201      	movs	r2, #1
 800045c:	2102      	movs	r1, #2
 800045e:	4859      	ldr	r0, [pc, #356]	; (80005c4 <display7SEG+0x31c>)
 8000460:	f001 fadf 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000464:	2200      	movs	r2, #0
 8000466:	2104      	movs	r1, #4
 8000468:	4856      	ldr	r0, [pc, #344]	; (80005c4 <display7SEG+0x31c>)
 800046a:	f001 fada 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 800046e:	2200      	movs	r2, #0
 8000470:	2108      	movs	r1, #8
 8000472:	4854      	ldr	r0, [pc, #336]	; (80005c4 <display7SEG+0x31c>)
 8000474:	f001 fad5 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000478:	2201      	movs	r2, #1
 800047a:	2110      	movs	r1, #16
 800047c:	4851      	ldr	r0, [pc, #324]	; (80005c4 <display7SEG+0x31c>)
 800047e:	f001 fad0 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000482:	2200      	movs	r2, #0
 8000484:	2120      	movs	r1, #32
 8000486:	484f      	ldr	r0, [pc, #316]	; (80005c4 <display7SEG+0x31c>)
 8000488:	f001 facb 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 800048c:	2200      	movs	r2, #0
 800048e:	2140      	movs	r1, #64	; 0x40
 8000490:	484c      	ldr	r0, [pc, #304]	; (80005c4 <display7SEG+0x31c>)
 8000492:	f001 fac6 	bl	8001a22 <HAL_GPIO_WritePin>
		break;
 8000496:	e090      	b.n	80005ba <display7SEG+0x312>
	case 6:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000498:	2200      	movs	r2, #0
 800049a:	2101      	movs	r1, #1
 800049c:	4849      	ldr	r0, [pc, #292]	; (80005c4 <display7SEG+0x31c>)
 800049e:	f001 fac0 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 80004a2:	2201      	movs	r2, #1
 80004a4:	2102      	movs	r1, #2
 80004a6:	4847      	ldr	r0, [pc, #284]	; (80005c4 <display7SEG+0x31c>)
 80004a8:	f001 fabb 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80004ac:	2200      	movs	r2, #0
 80004ae:	2104      	movs	r1, #4
 80004b0:	4844      	ldr	r0, [pc, #272]	; (80005c4 <display7SEG+0x31c>)
 80004b2:	f001 fab6 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 80004b6:	2200      	movs	r2, #0
 80004b8:	2108      	movs	r1, #8
 80004ba:	4842      	ldr	r0, [pc, #264]	; (80005c4 <display7SEG+0x31c>)
 80004bc:	f001 fab1 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 80004c0:	2200      	movs	r2, #0
 80004c2:	2110      	movs	r1, #16
 80004c4:	483f      	ldr	r0, [pc, #252]	; (80005c4 <display7SEG+0x31c>)
 80004c6:	f001 faac 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 80004ca:	2200      	movs	r2, #0
 80004cc:	2120      	movs	r1, #32
 80004ce:	483d      	ldr	r0, [pc, #244]	; (80005c4 <display7SEG+0x31c>)
 80004d0:	f001 faa7 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 80004d4:	2200      	movs	r2, #0
 80004d6:	2140      	movs	r1, #64	; 0x40
 80004d8:	483a      	ldr	r0, [pc, #232]	; (80005c4 <display7SEG+0x31c>)
 80004da:	f001 faa2 	bl	8001a22 <HAL_GPIO_WritePin>
		break;
 80004de:	e06c      	b.n	80005ba <display7SEG+0x312>
	case 7:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 80004e0:	2200      	movs	r2, #0
 80004e2:	2101      	movs	r1, #1
 80004e4:	4837      	ldr	r0, [pc, #220]	; (80005c4 <display7SEG+0x31c>)
 80004e6:	f001 fa9c 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2102      	movs	r1, #2
 80004ee:	4835      	ldr	r0, [pc, #212]	; (80005c4 <display7SEG+0x31c>)
 80004f0:	f001 fa97 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80004f4:	2200      	movs	r2, #0
 80004f6:	2104      	movs	r1, #4
 80004f8:	4832      	ldr	r0, [pc, #200]	; (80005c4 <display7SEG+0x31c>)
 80004fa:	f001 fa92 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 80004fe:	2201      	movs	r2, #1
 8000500:	2108      	movs	r1, #8
 8000502:	4830      	ldr	r0, [pc, #192]	; (80005c4 <display7SEG+0x31c>)
 8000504:	f001 fa8d 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000508:	2201      	movs	r2, #1
 800050a:	2110      	movs	r1, #16
 800050c:	482d      	ldr	r0, [pc, #180]	; (80005c4 <display7SEG+0x31c>)
 800050e:	f001 fa88 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000512:	2201      	movs	r2, #1
 8000514:	2120      	movs	r1, #32
 8000516:	482b      	ldr	r0, [pc, #172]	; (80005c4 <display7SEG+0x31c>)
 8000518:	f001 fa83 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 800051c:	2201      	movs	r2, #1
 800051e:	2140      	movs	r1, #64	; 0x40
 8000520:	4828      	ldr	r0, [pc, #160]	; (80005c4 <display7SEG+0x31c>)
 8000522:	f001 fa7e 	bl	8001a22 <HAL_GPIO_WritePin>
		break;
 8000526:	e048      	b.n	80005ba <display7SEG+0x312>
	case 8:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000528:	2200      	movs	r2, #0
 800052a:	2101      	movs	r1, #1
 800052c:	4825      	ldr	r0, [pc, #148]	; (80005c4 <display7SEG+0x31c>)
 800052e:	f001 fa78 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000532:	2200      	movs	r2, #0
 8000534:	2102      	movs	r1, #2
 8000536:	4823      	ldr	r0, [pc, #140]	; (80005c4 <display7SEG+0x31c>)
 8000538:	f001 fa73 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 800053c:	2200      	movs	r2, #0
 800053e:	2104      	movs	r1, #4
 8000540:	4820      	ldr	r0, [pc, #128]	; (80005c4 <display7SEG+0x31c>)
 8000542:	f001 fa6e 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000546:	2200      	movs	r2, #0
 8000548:	2108      	movs	r1, #8
 800054a:	481e      	ldr	r0, [pc, #120]	; (80005c4 <display7SEG+0x31c>)
 800054c:	f001 fa69 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000550:	2200      	movs	r2, #0
 8000552:	2110      	movs	r1, #16
 8000554:	481b      	ldr	r0, [pc, #108]	; (80005c4 <display7SEG+0x31c>)
 8000556:	f001 fa64 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 800055a:	2200      	movs	r2, #0
 800055c:	2120      	movs	r1, #32
 800055e:	4819      	ldr	r0, [pc, #100]	; (80005c4 <display7SEG+0x31c>)
 8000560:	f001 fa5f 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000564:	2200      	movs	r2, #0
 8000566:	2140      	movs	r1, #64	; 0x40
 8000568:	4816      	ldr	r0, [pc, #88]	; (80005c4 <display7SEG+0x31c>)
 800056a:	f001 fa5a 	bl	8001a22 <HAL_GPIO_WritePin>
		break;
 800056e:	e024      	b.n	80005ba <display7SEG+0x312>
	case 9:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	2101      	movs	r1, #1
 8000574:	4813      	ldr	r0, [pc, #76]	; (80005c4 <display7SEG+0x31c>)
 8000576:	f001 fa54 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	2102      	movs	r1, #2
 800057e:	4811      	ldr	r0, [pc, #68]	; (80005c4 <display7SEG+0x31c>)
 8000580:	f001 fa4f 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	2104      	movs	r1, #4
 8000588:	480e      	ldr	r0, [pc, #56]	; (80005c4 <display7SEG+0x31c>)
 800058a:	f001 fa4a 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 800058e:	2200      	movs	r2, #0
 8000590:	2108      	movs	r1, #8
 8000592:	480c      	ldr	r0, [pc, #48]	; (80005c4 <display7SEG+0x31c>)
 8000594:	f001 fa45 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000598:	2201      	movs	r2, #1
 800059a:	2110      	movs	r1, #16
 800059c:	4809      	ldr	r0, [pc, #36]	; (80005c4 <display7SEG+0x31c>)
 800059e:	f001 fa40 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2120      	movs	r1, #32
 80005a6:	4807      	ldr	r0, [pc, #28]	; (80005c4 <display7SEG+0x31c>)
 80005a8:	f001 fa3b 	bl	8001a22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2140      	movs	r1, #64	; 0x40
 80005b0:	4804      	ldr	r0, [pc, #16]	; (80005c4 <display7SEG+0x31c>)
 80005b2:	f001 fa36 	bl	8001a22 <HAL_GPIO_WritePin>
		break;
 80005b6:	e000      	b.n	80005ba <display7SEG+0x312>
	default:
		break;
 80005b8:	bf00      	nop
	}
}
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40010c00 	.word	0x40010c00

080005c8 <isButton1Pressed>:
int TimerForKeyPress3 = 200;
int button1_flag = 0;
int button2_flag = 0;
int button3_flag = 0;

int isButton1Pressed(){
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
	if(button1_flag ==1){
 80005cc:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <isButton1Pressed+0x20>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d104      	bne.n	80005de <isButton1Pressed+0x16>
		button1_flag = 0;
 80005d4:	4b04      	ldr	r3, [pc, #16]	; (80005e8 <isButton1Pressed+0x20>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
		return 1;
 80005da:	2301      	movs	r3, #1
 80005dc:	e000      	b.n	80005e0 <isButton1Pressed+0x18>
	}
	return 0;
 80005de:	2300      	movs	r3, #0
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr
 80005e8:	2000008c 	.word	0x2000008c

080005ec <isButton2Pressed>:

int isButton2Pressed(){
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
	if(button2_flag == 1){
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <isButton2Pressed+0x20>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d104      	bne.n	8000602 <isButton2Pressed+0x16>
		button2_flag = 0;
 80005f8:	4b04      	ldr	r3, [pc, #16]	; (800060c <isButton2Pressed+0x20>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
		return 1;
 80005fe:	2301      	movs	r3, #1
 8000600:	e000      	b.n	8000604 <isButton2Pressed+0x18>
	}
	return 0;
 8000602:	2300      	movs	r3, #0
}
 8000604:	4618      	mov	r0, r3
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr
 800060c:	20000090 	.word	0x20000090

08000610 <isButton3Pressed>:

int isButton3Pressed(){
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
	if(button3_flag == 1){
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <isButton3Pressed+0x20>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2b01      	cmp	r3, #1
 800061a:	d104      	bne.n	8000626 <isButton3Pressed+0x16>
		button3_flag = 0;
 800061c:	4b04      	ldr	r3, [pc, #16]	; (8000630 <isButton3Pressed+0x20>)
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
		return 1;
 8000622:	2301      	movs	r3, #1
 8000624:	e000      	b.n	8000628 <isButton3Pressed+0x18>
	}
	return 0;
 8000626:	2300      	movs	r3, #0
}
 8000628:	4618      	mov	r0, r3
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr
 8000630:	20000094 	.word	0x20000094

08000634 <getKeyInput>:

void getKeyInput(){
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	Key1Reg[0] = Key1Reg[1];
 8000638:	4b5d      	ldr	r3, [pc, #372]	; (80007b0 <getKeyInput+0x17c>)
 800063a:	685b      	ldr	r3, [r3, #4]
 800063c:	4a5c      	ldr	r2, [pc, #368]	; (80007b0 <getKeyInput+0x17c>)
 800063e:	6013      	str	r3, [r2, #0]
	Key1Reg[1] = Key1Reg[2];
 8000640:	4b5b      	ldr	r3, [pc, #364]	; (80007b0 <getKeyInput+0x17c>)
 8000642:	689b      	ldr	r3, [r3, #8]
 8000644:	4a5a      	ldr	r2, [pc, #360]	; (80007b0 <getKeyInput+0x17c>)
 8000646:	6053      	str	r3, [r2, #4]
	Key1Reg[2] = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8000648:	f44f 7180 	mov.w	r1, #256	; 0x100
 800064c:	4859      	ldr	r0, [pc, #356]	; (80007b4 <getKeyInput+0x180>)
 800064e:	f001 f9d1 	bl	80019f4 <HAL_GPIO_ReadPin>
 8000652:	4603      	mov	r3, r0
 8000654:	461a      	mov	r2, r3
 8000656:	4b56      	ldr	r3, [pc, #344]	; (80007b0 <getKeyInput+0x17c>)
 8000658:	609a      	str	r2, [r3, #8]
	if ((Key1Reg[0] == Key1Reg[1]) && (Key1Reg[1] == Key1Reg[2])){
 800065a:	4b55      	ldr	r3, [pc, #340]	; (80007b0 <getKeyInput+0x17c>)
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	4b54      	ldr	r3, [pc, #336]	; (80007b0 <getKeyInput+0x17c>)
 8000660:	685b      	ldr	r3, [r3, #4]
 8000662:	429a      	cmp	r2, r3
 8000664:	d126      	bne.n	80006b4 <getKeyInput+0x80>
 8000666:	4b52      	ldr	r3, [pc, #328]	; (80007b0 <getKeyInput+0x17c>)
 8000668:	685a      	ldr	r2, [r3, #4]
 800066a:	4b51      	ldr	r3, [pc, #324]	; (80007b0 <getKeyInput+0x17c>)
 800066c:	689b      	ldr	r3, [r3, #8]
 800066e:	429a      	cmp	r2, r3
 8000670:	d120      	bne.n	80006b4 <getKeyInput+0x80>
		if (Key1Reg[3] != Key1Reg[2]){
 8000672:	4b4f      	ldr	r3, [pc, #316]	; (80007b0 <getKeyInput+0x17c>)
 8000674:	68da      	ldr	r2, [r3, #12]
 8000676:	4b4e      	ldr	r3, [pc, #312]	; (80007b0 <getKeyInput+0x17c>)
 8000678:	689b      	ldr	r3, [r3, #8]
 800067a:	429a      	cmp	r2, r3
 800067c:	d00e      	beq.n	800069c <getKeyInput+0x68>
			Key1Reg[3] = Key1Reg[2];
 800067e:	4b4c      	ldr	r3, [pc, #304]	; (80007b0 <getKeyInput+0x17c>)
 8000680:	689b      	ldr	r3, [r3, #8]
 8000682:	4a4b      	ldr	r2, [pc, #300]	; (80007b0 <getKeyInput+0x17c>)
 8000684:	60d3      	str	r3, [r2, #12]
			if (Key1Reg[2] == PRESSED_STATE){
 8000686:	4b4a      	ldr	r3, [pc, #296]	; (80007b0 <getKeyInput+0x17c>)
 8000688:	689b      	ldr	r3, [r3, #8]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d112      	bne.n	80006b4 <getKeyInput+0x80>
				button1_flag = 1;
 800068e:	4b4a      	ldr	r3, [pc, #296]	; (80007b8 <getKeyInput+0x184>)
 8000690:	2201      	movs	r2, #1
 8000692:	601a      	str	r2, [r3, #0]
				TimerForKeyPress1 = 200;
 8000694:	4b49      	ldr	r3, [pc, #292]	; (80007bc <getKeyInput+0x188>)
 8000696:	22c8      	movs	r2, #200	; 0xc8
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	e00b      	b.n	80006b4 <getKeyInput+0x80>
			}
		}
		else{
			TimerForKeyPress1--;
 800069c:	4b47      	ldr	r3, [pc, #284]	; (80007bc <getKeyInput+0x188>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	3b01      	subs	r3, #1
 80006a2:	4a46      	ldr	r2, [pc, #280]	; (80007bc <getKeyInput+0x188>)
 80006a4:	6013      	str	r3, [r2, #0]
			if (TimerForKeyPress1 <= 0){
 80006a6:	4b45      	ldr	r3, [pc, #276]	; (80007bc <getKeyInput+0x188>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	dc02      	bgt.n	80006b4 <getKeyInput+0x80>
				Key1Reg[3] = NORMAL_STATE;
 80006ae:	4b40      	ldr	r3, [pc, #256]	; (80007b0 <getKeyInput+0x17c>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	60da      	str	r2, [r3, #12]
			}
		}
	}

	Key2Reg[0] = Key2Reg[1];
 80006b4:	4b42      	ldr	r3, [pc, #264]	; (80007c0 <getKeyInput+0x18c>)
 80006b6:	685b      	ldr	r3, [r3, #4]
 80006b8:	4a41      	ldr	r2, [pc, #260]	; (80007c0 <getKeyInput+0x18c>)
 80006ba:	6013      	str	r3, [r2, #0]
	Key2Reg[1] = Key2Reg[2];
 80006bc:	4b40      	ldr	r3, [pc, #256]	; (80007c0 <getKeyInput+0x18c>)
 80006be:	689b      	ldr	r3, [r3, #8]
 80006c0:	4a3f      	ldr	r2, [pc, #252]	; (80007c0 <getKeyInput+0x18c>)
 80006c2:	6053      	str	r3, [r2, #4]
	Key2Reg[2] = HAL_GPIO_ReadPin(B2_GPIO_Port, B2_Pin);
 80006c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006c8:	483a      	ldr	r0, [pc, #232]	; (80007b4 <getKeyInput+0x180>)
 80006ca:	f001 f993 	bl	80019f4 <HAL_GPIO_ReadPin>
 80006ce:	4603      	mov	r3, r0
 80006d0:	461a      	mov	r2, r3
 80006d2:	4b3b      	ldr	r3, [pc, #236]	; (80007c0 <getKeyInput+0x18c>)
 80006d4:	609a      	str	r2, [r3, #8]
	if ((Key2Reg[0] == Key2Reg[1]) && (Key2Reg[1] == Key2Reg[2])){
 80006d6:	4b3a      	ldr	r3, [pc, #232]	; (80007c0 <getKeyInput+0x18c>)
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	4b39      	ldr	r3, [pc, #228]	; (80007c0 <getKeyInput+0x18c>)
 80006dc:	685b      	ldr	r3, [r3, #4]
 80006de:	429a      	cmp	r2, r3
 80006e0:	d126      	bne.n	8000730 <getKeyInput+0xfc>
 80006e2:	4b37      	ldr	r3, [pc, #220]	; (80007c0 <getKeyInput+0x18c>)
 80006e4:	685a      	ldr	r2, [r3, #4]
 80006e6:	4b36      	ldr	r3, [pc, #216]	; (80007c0 <getKeyInput+0x18c>)
 80006e8:	689b      	ldr	r3, [r3, #8]
 80006ea:	429a      	cmp	r2, r3
 80006ec:	d120      	bne.n	8000730 <getKeyInput+0xfc>
		if (Key2Reg[3] != Key2Reg[2]){
 80006ee:	4b34      	ldr	r3, [pc, #208]	; (80007c0 <getKeyInput+0x18c>)
 80006f0:	68da      	ldr	r2, [r3, #12]
 80006f2:	4b33      	ldr	r3, [pc, #204]	; (80007c0 <getKeyInput+0x18c>)
 80006f4:	689b      	ldr	r3, [r3, #8]
 80006f6:	429a      	cmp	r2, r3
 80006f8:	d00e      	beq.n	8000718 <getKeyInput+0xe4>
			Key2Reg[3] = Key2Reg[2];
 80006fa:	4b31      	ldr	r3, [pc, #196]	; (80007c0 <getKeyInput+0x18c>)
 80006fc:	689b      	ldr	r3, [r3, #8]
 80006fe:	4a30      	ldr	r2, [pc, #192]	; (80007c0 <getKeyInput+0x18c>)
 8000700:	60d3      	str	r3, [r2, #12]
			if (Key2Reg[2] == PRESSED_STATE){
 8000702:	4b2f      	ldr	r3, [pc, #188]	; (80007c0 <getKeyInput+0x18c>)
 8000704:	689b      	ldr	r3, [r3, #8]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d112      	bne.n	8000730 <getKeyInput+0xfc>
				button2_flag = 1;
 800070a:	4b2e      	ldr	r3, [pc, #184]	; (80007c4 <getKeyInput+0x190>)
 800070c:	2201      	movs	r2, #1
 800070e:	601a      	str	r2, [r3, #0]
				TimerForKeyPress2 = 200;
 8000710:	4b2d      	ldr	r3, [pc, #180]	; (80007c8 <getKeyInput+0x194>)
 8000712:	22c8      	movs	r2, #200	; 0xc8
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	e00b      	b.n	8000730 <getKeyInput+0xfc>
			}
		}
		else{
			TimerForKeyPress2--;
 8000718:	4b2b      	ldr	r3, [pc, #172]	; (80007c8 <getKeyInput+0x194>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	3b01      	subs	r3, #1
 800071e:	4a2a      	ldr	r2, [pc, #168]	; (80007c8 <getKeyInput+0x194>)
 8000720:	6013      	str	r3, [r2, #0]
			if (TimerForKeyPress2 <= 0){
 8000722:	4b29      	ldr	r3, [pc, #164]	; (80007c8 <getKeyInput+0x194>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	2b00      	cmp	r3, #0
 8000728:	dc02      	bgt.n	8000730 <getKeyInput+0xfc>
				Key2Reg[3] = NORMAL_STATE;
 800072a:	4b25      	ldr	r3, [pc, #148]	; (80007c0 <getKeyInput+0x18c>)
 800072c:	2201      	movs	r2, #1
 800072e:	60da      	str	r2, [r3, #12]
			}
		}
	}

	Key3Reg[0] = Key3Reg[1];
 8000730:	4b26      	ldr	r3, [pc, #152]	; (80007cc <getKeyInput+0x198>)
 8000732:	685b      	ldr	r3, [r3, #4]
 8000734:	4a25      	ldr	r2, [pc, #148]	; (80007cc <getKeyInput+0x198>)
 8000736:	6013      	str	r3, [r2, #0]
	Key3Reg[1] = Key3Reg[2];
 8000738:	4b24      	ldr	r3, [pc, #144]	; (80007cc <getKeyInput+0x198>)
 800073a:	689b      	ldr	r3, [r3, #8]
 800073c:	4a23      	ldr	r2, [pc, #140]	; (80007cc <getKeyInput+0x198>)
 800073e:	6053      	str	r3, [r2, #4]
	Key3Reg[2] = HAL_GPIO_ReadPin(B3_GPIO_Port, B3_Pin);
 8000740:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000744:	481b      	ldr	r0, [pc, #108]	; (80007b4 <getKeyInput+0x180>)
 8000746:	f001 f955 	bl	80019f4 <HAL_GPIO_ReadPin>
 800074a:	4603      	mov	r3, r0
 800074c:	461a      	mov	r2, r3
 800074e:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <getKeyInput+0x198>)
 8000750:	609a      	str	r2, [r3, #8]
	if ((Key3Reg[0] == Key3Reg[1]) && (Key3Reg[1] == Key3Reg[2])){
 8000752:	4b1e      	ldr	r3, [pc, #120]	; (80007cc <getKeyInput+0x198>)
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	4b1d      	ldr	r3, [pc, #116]	; (80007cc <getKeyInput+0x198>)
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	429a      	cmp	r2, r3
 800075c:	d126      	bne.n	80007ac <getKeyInput+0x178>
 800075e:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <getKeyInput+0x198>)
 8000760:	685a      	ldr	r2, [r3, #4]
 8000762:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <getKeyInput+0x198>)
 8000764:	689b      	ldr	r3, [r3, #8]
 8000766:	429a      	cmp	r2, r3
 8000768:	d120      	bne.n	80007ac <getKeyInput+0x178>
		if (Key3Reg[3] != Key3Reg[2]){
 800076a:	4b18      	ldr	r3, [pc, #96]	; (80007cc <getKeyInput+0x198>)
 800076c:	68da      	ldr	r2, [r3, #12]
 800076e:	4b17      	ldr	r3, [pc, #92]	; (80007cc <getKeyInput+0x198>)
 8000770:	689b      	ldr	r3, [r3, #8]
 8000772:	429a      	cmp	r2, r3
 8000774:	d00e      	beq.n	8000794 <getKeyInput+0x160>
			Key3Reg[3] = Key3Reg[2];
 8000776:	4b15      	ldr	r3, [pc, #84]	; (80007cc <getKeyInput+0x198>)
 8000778:	689b      	ldr	r3, [r3, #8]
 800077a:	4a14      	ldr	r2, [pc, #80]	; (80007cc <getKeyInput+0x198>)
 800077c:	60d3      	str	r3, [r2, #12]
			if (Key3Reg[2] == PRESSED_STATE){
 800077e:	4b13      	ldr	r3, [pc, #76]	; (80007cc <getKeyInput+0x198>)
 8000780:	689b      	ldr	r3, [r3, #8]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d112      	bne.n	80007ac <getKeyInput+0x178>
				button3_flag = 1;
 8000786:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <getKeyInput+0x19c>)
 8000788:	2201      	movs	r2, #1
 800078a:	601a      	str	r2, [r3, #0]
				TimerForKeyPress3 = 200;
 800078c:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <getKeyInput+0x1a0>)
 800078e:	22c8      	movs	r2, #200	; 0xc8
 8000790:	601a      	str	r2, [r3, #0]
				Key3Reg[3] = NORMAL_STATE;
			}
		}
	}

}
 8000792:	e00b      	b.n	80007ac <getKeyInput+0x178>
			TimerForKeyPress3--;
 8000794:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <getKeyInput+0x1a0>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	3b01      	subs	r3, #1
 800079a:	4a0e      	ldr	r2, [pc, #56]	; (80007d4 <getKeyInput+0x1a0>)
 800079c:	6013      	str	r3, [r2, #0]
			if (TimerForKeyPress3 <= 0){
 800079e:	4b0d      	ldr	r3, [pc, #52]	; (80007d4 <getKeyInput+0x1a0>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	dc02      	bgt.n	80007ac <getKeyInput+0x178>
				Key3Reg[3] = NORMAL_STATE;
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <getKeyInput+0x198>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	60da      	str	r2, [r3, #12]
}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000000 	.word	0x20000000
 80007b4:	40010800 	.word	0x40010800
 80007b8:	2000008c 	.word	0x2000008c
 80007bc:	20000010 	.word	0x20000010
 80007c0:	20000014 	.word	0x20000014
 80007c4:	20000090 	.word	0x20000090
 80007c8:	20000024 	.word	0x20000024
 80007cc:	20000028 	.word	0x20000028
 80007d0:	20000094 	.word	0x20000094
 80007d4:	20000038 	.word	0x20000038

080007d8 <fsm_automatic_run>:
#include "global.h"
#include "software_timer.h"
#include "traffic_light.h"
#include "7SEG_led.h"

void fsm_automatic_run(){
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
	for(int i = 0; i < 2; i++){
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	e0ad      	b.n	8000940 <fsm_automatic_run+0x168>
		switch(status[i]){
 80007e4:	4a5b      	ldr	r2, [pc, #364]	; (8000954 <fsm_automatic_run+0x17c>)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ec:	2b03      	cmp	r3, #3
 80007ee:	f200 809d 	bhi.w	800092c <fsm_automatic_run+0x154>
 80007f2:	a201      	add	r2, pc, #4	; (adr r2, 80007f8 <fsm_automatic_run+0x20>)
 80007f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007f8:	08000809 	.word	0x08000809
 80007fc:	08000867 	.word	0x08000867
 8000800:	080008a9 	.word	0x080008a9
 8000804:	080008eb 	.word	0x080008eb
		case INIT:
			if(i == 0){
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d104      	bne.n	8000818 <fsm_automatic_run+0x40>
				status[i] = AUTO_RED;
 800080e:	4a51      	ldr	r2, [pc, #324]	; (8000954 <fsm_automatic_run+0x17c>)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2101      	movs	r1, #1
 8000814:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}
			if(i == 1){
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2b01      	cmp	r3, #1
 800081c:	d104      	bne.n	8000828 <fsm_automatic_run+0x50>
				status[i] = AUTO_GREEN;
 800081e:	4a4d      	ldr	r2, [pc, #308]	; (8000954 <fsm_automatic_run+0x17c>)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2102      	movs	r1, #2
 8000824:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}
			setTimer(i, timerLed[status[i] - 1]);
 8000828:	4a4a      	ldr	r2, [pc, #296]	; (8000954 <fsm_automatic_run+0x17c>)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000830:	3b01      	subs	r3, #1
 8000832:	4a49      	ldr	r2, [pc, #292]	; (8000958 <fsm_automatic_run+0x180>)
 8000834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000838:	4619      	mov	r1, r3
 800083a:	6878      	ldr	r0, [r7, #4]
 800083c:	f000 fb9e 	bl	8000f7c <setTimer>
			updateBuffer7SEG(i, timerLed[status[i] - 1] / 100);
 8000840:	4a44      	ldr	r2, [pc, #272]	; (8000954 <fsm_automatic_run+0x17c>)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000848:	3b01      	subs	r3, #1
 800084a:	4a43      	ldr	r2, [pc, #268]	; (8000958 <fsm_automatic_run+0x180>)
 800084c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000850:	4a42      	ldr	r2, [pc, #264]	; (800095c <fsm_automatic_run+0x184>)
 8000852:	fb82 1203 	smull	r1, r2, r2, r3
 8000856:	1152      	asrs	r2, r2, #5
 8000858:	17db      	asrs	r3, r3, #31
 800085a:	1ad3      	subs	r3, r2, r3
 800085c:	4619      	mov	r1, r3
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f7ff fc74 	bl	800014c <updateBuffer7SEG>
			break;
 8000864:	e069      	b.n	800093a <fsm_automatic_run+0x162>
		case AUTO_RED:
			setRed(i);
 8000866:	6878      	ldr	r0, [r7, #4]
 8000868:	f000 fc82 	bl	8001170 <setRed>
			if(timer_flag[i] == 1){
 800086c:	4a3c      	ldr	r2, [pc, #240]	; (8000960 <fsm_automatic_run+0x188>)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d15b      	bne.n	8000930 <fsm_automatic_run+0x158>
				status[i] = AUTO_GREEN;
 8000878:	4a36      	ldr	r2, [pc, #216]	; (8000954 <fsm_automatic_run+0x17c>)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2102      	movs	r1, #2
 800087e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				setTimer(i, timerLed[1]);
 8000882:	4b35      	ldr	r3, [pc, #212]	; (8000958 <fsm_automatic_run+0x180>)
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	4619      	mov	r1, r3
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f000 fb77 	bl	8000f7c <setTimer>
				updateBuffer7SEG(i, timerLed[1] / 100);
 800088e:	4b32      	ldr	r3, [pc, #200]	; (8000958 <fsm_automatic_run+0x180>)
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	4a32      	ldr	r2, [pc, #200]	; (800095c <fsm_automatic_run+0x184>)
 8000894:	fb82 1203 	smull	r1, r2, r2, r3
 8000898:	1152      	asrs	r2, r2, #5
 800089a:	17db      	asrs	r3, r3, #31
 800089c:	1ad3      	subs	r3, r2, r3
 800089e:	4619      	mov	r1, r3
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f7ff fc53 	bl	800014c <updateBuffer7SEG>
			}
			break;
 80008a6:	e043      	b.n	8000930 <fsm_automatic_run+0x158>
		case AUTO_GREEN:
			setGreen(i);
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f000 fc95 	bl	80011d8 <setGreen>
			if(timer_flag[i] == 1){
 80008ae:	4a2c      	ldr	r2, [pc, #176]	; (8000960 <fsm_automatic_run+0x188>)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d13c      	bne.n	8000934 <fsm_automatic_run+0x15c>
				status[i] = AUTO_YELLOW;
 80008ba:	4a26      	ldr	r2, [pc, #152]	; (8000954 <fsm_automatic_run+0x17c>)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2103      	movs	r1, #3
 80008c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				setTimer(i, timerLed[2]);
 80008c4:	4b24      	ldr	r3, [pc, #144]	; (8000958 <fsm_automatic_run+0x180>)
 80008c6:	689b      	ldr	r3, [r3, #8]
 80008c8:	4619      	mov	r1, r3
 80008ca:	6878      	ldr	r0, [r7, #4]
 80008cc:	f000 fb56 	bl	8000f7c <setTimer>
				updateBuffer7SEG(i, timerLed[2] / 100);
 80008d0:	4b21      	ldr	r3, [pc, #132]	; (8000958 <fsm_automatic_run+0x180>)
 80008d2:	689b      	ldr	r3, [r3, #8]
 80008d4:	4a21      	ldr	r2, [pc, #132]	; (800095c <fsm_automatic_run+0x184>)
 80008d6:	fb82 1203 	smull	r1, r2, r2, r3
 80008da:	1152      	asrs	r2, r2, #5
 80008dc:	17db      	asrs	r3, r3, #31
 80008de:	1ad3      	subs	r3, r2, r3
 80008e0:	4619      	mov	r1, r3
 80008e2:	6878      	ldr	r0, [r7, #4]
 80008e4:	f7ff fc32 	bl	800014c <updateBuffer7SEG>
			}
			break;
 80008e8:	e024      	b.n	8000934 <fsm_automatic_run+0x15c>
		case AUTO_YELLOW:
			setYellow(i);
 80008ea:	6878      	ldr	r0, [r7, #4]
 80008ec:	f000 fca8 	bl	8001240 <setYellow>
			if(timer_flag[i] == 1){
 80008f0:	4a1b      	ldr	r2, [pc, #108]	; (8000960 <fsm_automatic_run+0x188>)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d11d      	bne.n	8000938 <fsm_automatic_run+0x160>
				status[i] = AUTO_RED;
 80008fc:	4a15      	ldr	r2, [pc, #84]	; (8000954 <fsm_automatic_run+0x17c>)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2101      	movs	r1, #1
 8000902:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				setTimer(i, timerLed[0]);
 8000906:	4b14      	ldr	r3, [pc, #80]	; (8000958 <fsm_automatic_run+0x180>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4619      	mov	r1, r3
 800090c:	6878      	ldr	r0, [r7, #4]
 800090e:	f000 fb35 	bl	8000f7c <setTimer>
				updateBuffer7SEG(i, timerLed[0] / 100);
 8000912:	4b11      	ldr	r3, [pc, #68]	; (8000958 <fsm_automatic_run+0x180>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a11      	ldr	r2, [pc, #68]	; (800095c <fsm_automatic_run+0x184>)
 8000918:	fb82 1203 	smull	r1, r2, r2, r3
 800091c:	1152      	asrs	r2, r2, #5
 800091e:	17db      	asrs	r3, r3, #31
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	4619      	mov	r1, r3
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f7ff fc11 	bl	800014c <updateBuffer7SEG>
			}
			break;
 800092a:	e005      	b.n	8000938 <fsm_automatic_run+0x160>
		default:
			break;
 800092c:	bf00      	nop
 800092e:	e004      	b.n	800093a <fsm_automatic_run+0x162>
			break;
 8000930:	bf00      	nop
 8000932:	e002      	b.n	800093a <fsm_automatic_run+0x162>
			break;
 8000934:	bf00      	nop
 8000936:	e000      	b.n	800093a <fsm_automatic_run+0x162>
			break;
 8000938:	bf00      	nop
	for(int i = 0; i < 2; i++){
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	3301      	adds	r3, #1
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2b01      	cmp	r3, #1
 8000944:	f77f af4e 	ble.w	80007e4 <fsm_automatic_run+0xc>
		}
	}
}
 8000948:	bf00      	nop
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	2000009c 	.word	0x2000009c
 8000958:	20000048 	.word	0x20000048
 800095c:	51eb851f 	.word	0x51eb851f
 8000960:	200000a4 	.word	0x200000a4

08000964 <fsm_manual_run>:
#include "fsm_manual.h"
#include "traffic_light.h"
#include "software_timer.h"
#include "global.h"

void fsm_manual_run(){
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
	for(int i = 0; i < 2; i++){
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	e040      	b.n	80009f2 <fsm_manual_run+0x8e>
		switch(status[i]){
 8000970:	4a24      	ldr	r2, [pc, #144]	; (8000a04 <fsm_manual_run+0xa0>)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000978:	2b0d      	cmp	r3, #13
 800097a:	d022      	beq.n	80009c2 <fsm_manual_run+0x5e>
 800097c:	2b0d      	cmp	r3, #13
 800097e:	dc2e      	bgt.n	80009de <fsm_manual_run+0x7a>
 8000980:	2b0b      	cmp	r3, #11
 8000982:	d002      	beq.n	800098a <fsm_manual_run+0x26>
 8000984:	2b0c      	cmp	r3, #12
 8000986:	d00e      	beq.n	80009a6 <fsm_manual_run+0x42>
				blinkYellow(i);
				setTimer(i, 25);
			}
			break;
		default:
			break;
 8000988:	e029      	b.n	80009de <fsm_manual_run+0x7a>
			if(timer_flag[i] == 1){
 800098a:	4a1f      	ldr	r2, [pc, #124]	; (8000a08 <fsm_manual_run+0xa4>)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000992:	2b01      	cmp	r3, #1
 8000994:	d125      	bne.n	80009e2 <fsm_manual_run+0x7e>
				blinkRed(i);
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f000 fc86 	bl	80012a8 <blinkRed>
				setTimer(i, 25);
 800099c:	2119      	movs	r1, #25
 800099e:	6878      	ldr	r0, [r7, #4]
 80009a0:	f000 faec 	bl	8000f7c <setTimer>
			break;
 80009a4:	e01d      	b.n	80009e2 <fsm_manual_run+0x7e>
			if(timer_flag[i] == 1){
 80009a6:	4a18      	ldr	r2, [pc, #96]	; (8000a08 <fsm_manual_run+0xa4>)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d119      	bne.n	80009e6 <fsm_manual_run+0x82>
				blinkGreen(i);
 80009b2:	6878      	ldr	r0, [r7, #4]
 80009b4:	f000 fcaa 	bl	800130c <blinkGreen>
				setTimer(i, 25);
 80009b8:	2119      	movs	r1, #25
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f000 fade 	bl	8000f7c <setTimer>
			break;
 80009c0:	e011      	b.n	80009e6 <fsm_manual_run+0x82>
			if(timer_flag[i] == 1){
 80009c2:	4a11      	ldr	r2, [pc, #68]	; (8000a08 <fsm_manual_run+0xa4>)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d10d      	bne.n	80009ea <fsm_manual_run+0x86>
				blinkYellow(i);
 80009ce:	6878      	ldr	r0, [r7, #4]
 80009d0:	f000 fcce 	bl	8001370 <blinkYellow>
				setTimer(i, 25);
 80009d4:	2119      	movs	r1, #25
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f000 fad0 	bl	8000f7c <setTimer>
			break;
 80009dc:	e005      	b.n	80009ea <fsm_manual_run+0x86>
			break;
 80009de:	bf00      	nop
 80009e0:	e004      	b.n	80009ec <fsm_manual_run+0x88>
			break;
 80009e2:	bf00      	nop
 80009e4:	e002      	b.n	80009ec <fsm_manual_run+0x88>
			break;
 80009e6:	bf00      	nop
 80009e8:	e000      	b.n	80009ec <fsm_manual_run+0x88>
			break;
 80009ea:	bf00      	nop
	for(int i = 0; i < 2; i++){
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	3301      	adds	r3, #1
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	ddbb      	ble.n	8000970 <fsm_manual_run+0xc>
		}
	}
}
 80009f8:	bf00      	nop
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	2000009c 	.word	0x2000009c
 8000a08:	200000a4 	.word	0x200000a4

08000a0c <fsm_setting_run>:
#include "traffic_light.h"

int led_index = 0;
int tmp[3] = {500, 300, 200};

void fsm_setting_run(){
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
	if(timer_flag[2] == 1){
 8000a12:	4ba8      	ldr	r3, [pc, #672]	; (8000cb4 <fsm_setting_run+0x2a8>)
 8000a14:	689b      	ldr	r3, [r3, #8]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d112      	bne.n	8000a40 <fsm_setting_run+0x34>
		update7SEG(led_index++);
 8000a1a:	4ba7      	ldr	r3, [pc, #668]	; (8000cb8 <fsm_setting_run+0x2ac>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	1c5a      	adds	r2, r3, #1
 8000a20:	49a5      	ldr	r1, [pc, #660]	; (8000cb8 <fsm_setting_run+0x2ac>)
 8000a22:	600a      	str	r2, [r1, #0]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fbbd 	bl	80001a4 <update7SEG>
		if(led_index >= 4) led_index = 0;
 8000a2a:	4ba3      	ldr	r3, [pc, #652]	; (8000cb8 <fsm_setting_run+0x2ac>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	2b03      	cmp	r3, #3
 8000a30:	dd02      	ble.n	8000a38 <fsm_setting_run+0x2c>
 8000a32:	4ba1      	ldr	r3, [pc, #644]	; (8000cb8 <fsm_setting_run+0x2ac>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
		setTimer(2, 25);
 8000a38:	2119      	movs	r1, #25
 8000a3a:	2002      	movs	r0, #2
 8000a3c:	f000 fa9e 	bl	8000f7c <setTimer>
	}
	if(status[0] < 10){
 8000a40:	4b9e      	ldr	r3, [pc, #632]	; (8000cbc <fsm_setting_run+0x2b0>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2b09      	cmp	r3, #9
 8000a46:	dc26      	bgt.n	8000a96 <fsm_setting_run+0x8a>
		if(timer_flag[3] == 1){
 8000a48:	4b9a      	ldr	r3, [pc, #616]	; (8000cb4 <fsm_setting_run+0x2a8>)
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d122      	bne.n	8000a96 <fsm_setting_run+0x8a>
			for(int i = 0; i < 2; i++){
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	e018      	b.n	8000a88 <fsm_setting_run+0x7c>
				updateBuffer7SEG(i, buffer7SEG_led[i*2]*10+buffer7SEG_led[i*2+1]-1);
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	005b      	lsls	r3, r3, #1
 8000a5a:	4a99      	ldr	r2, [pc, #612]	; (8000cc0 <fsm_setting_run+0x2b4>)
 8000a5c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a60:	4613      	mov	r3, r2
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	4413      	add	r3, r2
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	3301      	adds	r3, #1
 8000a70:	4a93      	ldr	r2, [pc, #588]	; (8000cc0 <fsm_setting_run+0x2b4>)
 8000a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a76:	440b      	add	r3, r1
 8000a78:	3b01      	subs	r3, #1
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	68f8      	ldr	r0, [r7, #12]
 8000a7e:	f7ff fb65 	bl	800014c <updateBuffer7SEG>
			for(int i = 0; i < 2; i++){
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	3301      	adds	r3, #1
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	dde3      	ble.n	8000a56 <fsm_setting_run+0x4a>
			}
			setTimer(3, 100);
 8000a8e:	2164      	movs	r1, #100	; 0x64
 8000a90:	2003      	movs	r0, #3
 8000a92:	f000 fa73 	bl	8000f7c <setTimer>
		}
	}
	if(status[0] > 10){
 8000a96:	4b89      	ldr	r3, [pc, #548]	; (8000cbc <fsm_setting_run+0x2b0>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	2b0a      	cmp	r3, #10
 8000a9c:	dd70      	ble.n	8000b80 <fsm_setting_run+0x174>
		if(isButton2Pressed()){
 8000a9e:	f7ff fda5 	bl	80005ec <isButton2Pressed>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d052      	beq.n	8000b4e <fsm_setting_run+0x142>
			switch(status[0]){
 8000aa8:	4b84      	ldr	r3, [pc, #528]	; (8000cbc <fsm_setting_run+0x2b0>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b0d      	cmp	r3, #13
 8000aae:	d036      	beq.n	8000b1e <fsm_setting_run+0x112>
 8000ab0:	2b0d      	cmp	r3, #13
 8000ab2:	dc4e      	bgt.n	8000b52 <fsm_setting_run+0x146>
 8000ab4:	2b0b      	cmp	r3, #11
 8000ab6:	d002      	beq.n	8000abe <fsm_setting_run+0xb2>
 8000ab8:	2b0c      	cmp	r3, #12
 8000aba:	d018      	beq.n	8000aee <fsm_setting_run+0xe2>
			case MANUAL_YELLOW:
				if(tmp[2] < 99*100) tmp[2] = tmp[2] + 100;
				updateBuffer7SEG(0, tmp[2] / 100);
				break;
			default:
				break;
 8000abc:	e049      	b.n	8000b52 <fsm_setting_run+0x146>
				if(tmp[0] < 99*100) tmp[0] = tmp[0] + 100;
 8000abe:	4b81      	ldr	r3, [pc, #516]	; (8000cc4 <fsm_setting_run+0x2b8>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f242 62ab 	movw	r2, #9899	; 0x26ab
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	dc04      	bgt.n	8000ad4 <fsm_setting_run+0xc8>
 8000aca:	4b7e      	ldr	r3, [pc, #504]	; (8000cc4 <fsm_setting_run+0x2b8>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	3364      	adds	r3, #100	; 0x64
 8000ad0:	4a7c      	ldr	r2, [pc, #496]	; (8000cc4 <fsm_setting_run+0x2b8>)
 8000ad2:	6013      	str	r3, [r2, #0]
				updateBuffer7SEG(0, tmp[0] / 100);
 8000ad4:	4b7b      	ldr	r3, [pc, #492]	; (8000cc4 <fsm_setting_run+0x2b8>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a7b      	ldr	r2, [pc, #492]	; (8000cc8 <fsm_setting_run+0x2bc>)
 8000ada:	fb82 1203 	smull	r1, r2, r2, r3
 8000ade:	1152      	asrs	r2, r2, #5
 8000ae0:	17db      	asrs	r3, r3, #31
 8000ae2:	1ad3      	subs	r3, r2, r3
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	2000      	movs	r0, #0
 8000ae8:	f7ff fb30 	bl	800014c <updateBuffer7SEG>
				break;
 8000aec:	e032      	b.n	8000b54 <fsm_setting_run+0x148>
				if(tmp[1] < 99*100) tmp[1] = tmp[1] + 100;
 8000aee:	4b75      	ldr	r3, [pc, #468]	; (8000cc4 <fsm_setting_run+0x2b8>)
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	f242 62ab 	movw	r2, #9899	; 0x26ab
 8000af6:	4293      	cmp	r3, r2
 8000af8:	dc04      	bgt.n	8000b04 <fsm_setting_run+0xf8>
 8000afa:	4b72      	ldr	r3, [pc, #456]	; (8000cc4 <fsm_setting_run+0x2b8>)
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	3364      	adds	r3, #100	; 0x64
 8000b00:	4a70      	ldr	r2, [pc, #448]	; (8000cc4 <fsm_setting_run+0x2b8>)
 8000b02:	6053      	str	r3, [r2, #4]
				updateBuffer7SEG(0, tmp[1] / 100);
 8000b04:	4b6f      	ldr	r3, [pc, #444]	; (8000cc4 <fsm_setting_run+0x2b8>)
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	4a6f      	ldr	r2, [pc, #444]	; (8000cc8 <fsm_setting_run+0x2bc>)
 8000b0a:	fb82 1203 	smull	r1, r2, r2, r3
 8000b0e:	1152      	asrs	r2, r2, #5
 8000b10:	17db      	asrs	r3, r3, #31
 8000b12:	1ad3      	subs	r3, r2, r3
 8000b14:	4619      	mov	r1, r3
 8000b16:	2000      	movs	r0, #0
 8000b18:	f7ff fb18 	bl	800014c <updateBuffer7SEG>
				break;
 8000b1c:	e01a      	b.n	8000b54 <fsm_setting_run+0x148>
				if(tmp[2] < 99*100) tmp[2] = tmp[2] + 100;
 8000b1e:	4b69      	ldr	r3, [pc, #420]	; (8000cc4 <fsm_setting_run+0x2b8>)
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	f242 62ab 	movw	r2, #9899	; 0x26ab
 8000b26:	4293      	cmp	r3, r2
 8000b28:	dc04      	bgt.n	8000b34 <fsm_setting_run+0x128>
 8000b2a:	4b66      	ldr	r3, [pc, #408]	; (8000cc4 <fsm_setting_run+0x2b8>)
 8000b2c:	689b      	ldr	r3, [r3, #8]
 8000b2e:	3364      	adds	r3, #100	; 0x64
 8000b30:	4a64      	ldr	r2, [pc, #400]	; (8000cc4 <fsm_setting_run+0x2b8>)
 8000b32:	6093      	str	r3, [r2, #8]
				updateBuffer7SEG(0, tmp[2] / 100);
 8000b34:	4b63      	ldr	r3, [pc, #396]	; (8000cc4 <fsm_setting_run+0x2b8>)
 8000b36:	689b      	ldr	r3, [r3, #8]
 8000b38:	4a63      	ldr	r2, [pc, #396]	; (8000cc8 <fsm_setting_run+0x2bc>)
 8000b3a:	fb82 1203 	smull	r1, r2, r2, r3
 8000b3e:	1152      	asrs	r2, r2, #5
 8000b40:	17db      	asrs	r3, r3, #31
 8000b42:	1ad3      	subs	r3, r2, r3
 8000b44:	4619      	mov	r1, r3
 8000b46:	2000      	movs	r0, #0
 8000b48:	f7ff fb00 	bl	800014c <updateBuffer7SEG>
				break;
 8000b4c:	e002      	b.n	8000b54 <fsm_setting_run+0x148>
			}
		}
 8000b4e:	bf00      	nop
 8000b50:	e000      	b.n	8000b54 <fsm_setting_run+0x148>
				break;
 8000b52:	bf00      	nop
		if(isButton3Pressed()){
 8000b54:	f7ff fd5c 	bl	8000610 <isButton3Pressed>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d010      	beq.n	8000b80 <fsm_setting_run+0x174>
			for(int i = 0; i < 3; i++){
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	e00a      	b.n	8000b7a <fsm_setting_run+0x16e>
				timerLed[i] = tmp[i];
 8000b64:	4a57      	ldr	r2, [pc, #348]	; (8000cc4 <fsm_setting_run+0x2b8>)
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b6c:	4957      	ldr	r1, [pc, #348]	; (8000ccc <fsm_setting_run+0x2c0>)
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(int i = 0; i < 3; i++){
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	3301      	adds	r3, #1
 8000b78:	60bb      	str	r3, [r7, #8]
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	2b02      	cmp	r3, #2
 8000b7e:	ddf1      	ble.n	8000b64 <fsm_setting_run+0x158>
			}
		}
	}
	if (isButton1Pressed()){
 8000b80:	f7ff fd22 	bl	80005c8 <isButton1Pressed>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	f000 80d1 	beq.w	8000d2e <fsm_setting_run+0x322>
		switch(status[0]){
 8000b8c:	4b4b      	ldr	r3, [pc, #300]	; (8000cbc <fsm_setting_run+0x2b0>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2b0d      	cmp	r3, #13
 8000b92:	f200 80ce 	bhi.w	8000d32 <fsm_setting_run+0x326>
 8000b96:	a201      	add	r2, pc, #4	; (adr r2, 8000b9c <fsm_setting_run+0x190>)
 8000b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b9c:	08000bd5 	.word	0x08000bd5
 8000ba0:	08000bd5 	.word	0x08000bd5
 8000ba4:	08000bd5 	.word	0x08000bd5
 8000ba8:	08000bd5 	.word	0x08000bd5
 8000bac:	08000d33 	.word	0x08000d33
 8000bb0:	08000d33 	.word	0x08000d33
 8000bb4:	08000d33 	.word	0x08000d33
 8000bb8:	08000d33 	.word	0x08000d33
 8000bbc:	08000d33 	.word	0x08000d33
 8000bc0:	08000d33 	.word	0x08000d33
 8000bc4:	08000d33 	.word	0x08000d33
 8000bc8:	08000c39 	.word	0x08000c39
 8000bcc:	08000c77 	.word	0x08000c77
 8000bd0:	08000cd1 	.word	0x08000cd1
		case 0:
		case 1:
		case 2:
		case 3:
			for(int i = 0; i < 3; i++){
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	e00a      	b.n	8000bf0 <fsm_setting_run+0x1e4>
				tmp[i] = timerLed[i];
 8000bda:	4a3c      	ldr	r2, [pc, #240]	; (8000ccc <fsm_setting_run+0x2c0>)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000be2:	4938      	ldr	r1, [pc, #224]	; (8000cc4 <fsm_setting_run+0x2b8>)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(int i = 0; i < 3; i++){
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	3301      	adds	r3, #1
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2b02      	cmp	r3, #2
 8000bf4:	ddf1      	ble.n	8000bda <fsm_setting_run+0x1ce>
			}
			status[0] = MANUAL_RED;
 8000bf6:	4b31      	ldr	r3, [pc, #196]	; (8000cbc <fsm_setting_run+0x2b0>)
 8000bf8:	220b      	movs	r2, #11
 8000bfa:	601a      	str	r2, [r3, #0]
			status[1] = MANUAL_RED;
 8000bfc:	4b2f      	ldr	r3, [pc, #188]	; (8000cbc <fsm_setting_run+0x2b0>)
 8000bfe:	220b      	movs	r2, #11
 8000c00:	605a      	str	r2, [r3, #4]
			setInit();
 8000c02:	f000 fa91 	bl	8001128 <setInit>
			updateBuffer7SEG(0, tmp[0] / 100);
 8000c06:	4b2f      	ldr	r3, [pc, #188]	; (8000cc4 <fsm_setting_run+0x2b8>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a2f      	ldr	r2, [pc, #188]	; (8000cc8 <fsm_setting_run+0x2bc>)
 8000c0c:	fb82 1203 	smull	r1, r2, r2, r3
 8000c10:	1152      	asrs	r2, r2, #5
 8000c12:	17db      	asrs	r3, r3, #31
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	4619      	mov	r1, r3
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f7ff fa97 	bl	800014c <updateBuffer7SEG>
			updateBuffer7SEG(1, 2);
 8000c1e:	2102      	movs	r1, #2
 8000c20:	2001      	movs	r0, #1
 8000c22:	f7ff fa93 	bl	800014c <updateBuffer7SEG>
			setTimer(0, 25);
 8000c26:	2119      	movs	r1, #25
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f000 f9a7 	bl	8000f7c <setTimer>
			setTimer(1, 25);
 8000c2e:	2119      	movs	r1, #25
 8000c30:	2001      	movs	r0, #1
 8000c32:	f000 f9a3 	bl	8000f7c <setTimer>
			break;
 8000c36:	e07d      	b.n	8000d34 <fsm_setting_run+0x328>
		case MANUAL_RED:
			status[0] = MANUAL_GREEN;
 8000c38:	4b20      	ldr	r3, [pc, #128]	; (8000cbc <fsm_setting_run+0x2b0>)
 8000c3a:	220c      	movs	r2, #12
 8000c3c:	601a      	str	r2, [r3, #0]
			status[1] = MANUAL_GREEN;
 8000c3e:	4b1f      	ldr	r3, [pc, #124]	; (8000cbc <fsm_setting_run+0x2b0>)
 8000c40:	220c      	movs	r2, #12
 8000c42:	605a      	str	r2, [r3, #4]
			updateBuffer7SEG(0, tmp[1] / 100);
 8000c44:	4b1f      	ldr	r3, [pc, #124]	; (8000cc4 <fsm_setting_run+0x2b8>)
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	4a1f      	ldr	r2, [pc, #124]	; (8000cc8 <fsm_setting_run+0x2bc>)
 8000c4a:	fb82 1203 	smull	r1, r2, r2, r3
 8000c4e:	1152      	asrs	r2, r2, #5
 8000c50:	17db      	asrs	r3, r3, #31
 8000c52:	1ad3      	subs	r3, r2, r3
 8000c54:	4619      	mov	r1, r3
 8000c56:	2000      	movs	r0, #0
 8000c58:	f7ff fa78 	bl	800014c <updateBuffer7SEG>
			updateBuffer7SEG(1, 3);
 8000c5c:	2103      	movs	r1, #3
 8000c5e:	2001      	movs	r0, #1
 8000c60:	f7ff fa74 	bl	800014c <updateBuffer7SEG>
			setTimer(0, 25);
 8000c64:	2119      	movs	r1, #25
 8000c66:	2000      	movs	r0, #0
 8000c68:	f000 f988 	bl	8000f7c <setTimer>
			setTimer(1, 25);
 8000c6c:	2119      	movs	r1, #25
 8000c6e:	2001      	movs	r0, #1
 8000c70:	f000 f984 	bl	8000f7c <setTimer>
			break;
 8000c74:	e05e      	b.n	8000d34 <fsm_setting_run+0x328>
		case MANUAL_GREEN:
			status[0] = MANUAL_YELLOW;
 8000c76:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <fsm_setting_run+0x2b0>)
 8000c78:	220d      	movs	r2, #13
 8000c7a:	601a      	str	r2, [r3, #0]
			status[1] = MANUAL_YELLOW;
 8000c7c:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <fsm_setting_run+0x2b0>)
 8000c7e:	220d      	movs	r2, #13
 8000c80:	605a      	str	r2, [r3, #4]
			updateBuffer7SEG(0, tmp[2] / 100);
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <fsm_setting_run+0x2b8>)
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	4a10      	ldr	r2, [pc, #64]	; (8000cc8 <fsm_setting_run+0x2bc>)
 8000c88:	fb82 1203 	smull	r1, r2, r2, r3
 8000c8c:	1152      	asrs	r2, r2, #5
 8000c8e:	17db      	asrs	r3, r3, #31
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	4619      	mov	r1, r3
 8000c94:	2000      	movs	r0, #0
 8000c96:	f7ff fa59 	bl	800014c <updateBuffer7SEG>
			updateBuffer7SEG(1, 4);
 8000c9a:	2104      	movs	r1, #4
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	f7ff fa55 	bl	800014c <updateBuffer7SEG>
			setTimer(0, 25);
 8000ca2:	2119      	movs	r1, #25
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	f000 f969 	bl	8000f7c <setTimer>
			setTimer(1, 25);
 8000caa:	2119      	movs	r1, #25
 8000cac:	2001      	movs	r0, #1
 8000cae:	f000 f965 	bl	8000f7c <setTimer>
			break;
 8000cb2:	e03f      	b.n	8000d34 <fsm_setting_run+0x328>
 8000cb4:	200000a4 	.word	0x200000a4
 8000cb8:	20000098 	.word	0x20000098
 8000cbc:	2000009c 	.word	0x2000009c
 8000cc0:	2000007c 	.word	0x2000007c
 8000cc4:	2000003c 	.word	0x2000003c
 8000cc8:	51eb851f 	.word	0x51eb851f
 8000ccc:	20000048 	.word	0x20000048
		case MANUAL_YELLOW:
			status[0] = AUTO_RED;
 8000cd0:	4b1a      	ldr	r3, [pc, #104]	; (8000d3c <fsm_setting_run+0x330>)
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	601a      	str	r2, [r3, #0]
			status[1] = AUTO_GREEN;
 8000cd6:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <fsm_setting_run+0x330>)
 8000cd8:	2202      	movs	r2, #2
 8000cda:	605a      	str	r2, [r3, #4]
			updateBuffer7SEG(0, timerLed[0] / 100);
 8000cdc:	4b18      	ldr	r3, [pc, #96]	; (8000d40 <fsm_setting_run+0x334>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a18      	ldr	r2, [pc, #96]	; (8000d44 <fsm_setting_run+0x338>)
 8000ce2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ce6:	1152      	asrs	r2, r2, #5
 8000ce8:	17db      	asrs	r3, r3, #31
 8000cea:	1ad3      	subs	r3, r2, r3
 8000cec:	4619      	mov	r1, r3
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f7ff fa2c 	bl	800014c <updateBuffer7SEG>
			updateBuffer7SEG(1, timerLed[1] / 100);
 8000cf4:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <fsm_setting_run+0x334>)
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	4a12      	ldr	r2, [pc, #72]	; (8000d44 <fsm_setting_run+0x338>)
 8000cfa:	fb82 1203 	smull	r1, r2, r2, r3
 8000cfe:	1152      	asrs	r2, r2, #5
 8000d00:	17db      	asrs	r3, r3, #31
 8000d02:	1ad3      	subs	r3, r2, r3
 8000d04:	4619      	mov	r1, r3
 8000d06:	2001      	movs	r0, #1
 8000d08:	f7ff fa20 	bl	800014c <updateBuffer7SEG>
			setTimer(0, timerLed[0]);
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <fsm_setting_run+0x334>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4619      	mov	r1, r3
 8000d12:	2000      	movs	r0, #0
 8000d14:	f000 f932 	bl	8000f7c <setTimer>
			setTimer(1, timerLed[1]);
 8000d18:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <fsm_setting_run+0x334>)
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	f000 f92c 	bl	8000f7c <setTimer>
			setTimer(3, 100);
 8000d24:	2164      	movs	r1, #100	; 0x64
 8000d26:	2003      	movs	r0, #3
 8000d28:	f000 f928 	bl	8000f7c <setTimer>
			break;
 8000d2c:	e002      	b.n	8000d34 <fsm_setting_run+0x328>
		default:
			break;
		}
	}
 8000d2e:	bf00      	nop
 8000d30:	e000      	b.n	8000d34 <fsm_setting_run+0x328>
			break;
 8000d32:	bf00      	nop
}
 8000d34:	bf00      	nop
 8000d36:	3710      	adds	r7, #16
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	2000009c 	.word	0x2000009c
 8000d40:	20000048 	.word	0x20000048
 8000d44:	51eb851f 	.word	0x51eb851f

08000d48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d4c:	f000 fb68 	bl	8001420 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d50:	f000 f818 	bl	8000d84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d54:	f000 f89e 	bl	8000e94 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000d58:	f000 f850 	bl	8000dfc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000d5c:	4808      	ldr	r0, [pc, #32]	; (8000d80 <main+0x38>)
 8000d5e:	f001 fabd 	bl	80022dc <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer(2, 25);
 8000d62:	2119      	movs	r1, #25
 8000d64:	2002      	movs	r0, #2
 8000d66:	f000 f909 	bl	8000f7c <setTimer>
  setTimer(3, 100);
 8000d6a:	2164      	movs	r1, #100	; 0x64
 8000d6c:	2003      	movs	r0, #3
 8000d6e:	f000 f905 	bl	8000f7c <setTimer>
  while (1)
  {
	  fsm_automatic_run();
 8000d72:	f7ff fd31 	bl	80007d8 <fsm_automatic_run>
	  fsm_manual_run();
 8000d76:	f7ff fdf5 	bl	8000964 <fsm_manual_run>
	  fsm_setting_run();
 8000d7a:	f7ff fe47 	bl	8000a0c <fsm_setting_run>
	  fsm_automatic_run();
 8000d7e:	e7f8      	b.n	8000d72 <main+0x2a>
 8000d80:	200000c4 	.word	0x200000c4

08000d84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b090      	sub	sp, #64	; 0x40
 8000d88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d8a:	f107 0318 	add.w	r3, r7, #24
 8000d8e:	2228      	movs	r2, #40	; 0x28
 8000d90:	2100      	movs	r1, #0
 8000d92:	4618      	mov	r0, r3
 8000d94:	f001 fe52 	bl	8002a3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	60da      	str	r2, [r3, #12]
 8000da4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000da6:	2302      	movs	r3, #2
 8000da8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000daa:	2301      	movs	r3, #1
 8000dac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dae:	2310      	movs	r3, #16
 8000db0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000db2:	2300      	movs	r3, #0
 8000db4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db6:	f107 0318 	add.w	r3, r7, #24
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 fe62 	bl	8001a84 <HAL_RCC_OscConfig>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000dc6:	f000 f8d3 	bl	8000f70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dca:	230f      	movs	r3, #15
 8000dcc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dde:	1d3b      	adds	r3, r7, #4
 8000de0:	2100      	movs	r1, #0
 8000de2:	4618      	mov	r0, r3
 8000de4:	f001 f8ce 	bl	8001f84 <HAL_RCC_ClockConfig>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000dee:	f000 f8bf 	bl	8000f70 <Error_Handler>
  }
}
 8000df2:	bf00      	nop
 8000df4:	3740      	adds	r7, #64	; 0x40
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
	...

08000dfc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e02:	f107 0308 	add.w	r3, r7, #8
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
 8000e0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e10:	463b      	mov	r3, r7
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e18:	4b1d      	ldr	r3, [pc, #116]	; (8000e90 <MX_TIM2_Init+0x94>)
 8000e1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e1e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000e20:	4b1b      	ldr	r3, [pc, #108]	; (8000e90 <MX_TIM2_Init+0x94>)
 8000e22:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000e26:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e28:	4b19      	ldr	r3, [pc, #100]	; (8000e90 <MX_TIM2_Init+0x94>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000e2e:	4b18      	ldr	r3, [pc, #96]	; (8000e90 <MX_TIM2_Init+0x94>)
 8000e30:	2209      	movs	r2, #9
 8000e32:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e34:	4b16      	ldr	r3, [pc, #88]	; (8000e90 <MX_TIM2_Init+0x94>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e3a:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <MX_TIM2_Init+0x94>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e40:	4813      	ldr	r0, [pc, #76]	; (8000e90 <MX_TIM2_Init+0x94>)
 8000e42:	f001 f9fb 	bl	800223c <HAL_TIM_Base_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e4c:	f000 f890 	bl	8000f70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e56:	f107 0308 	add.w	r3, r7, #8
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	480c      	ldr	r0, [pc, #48]	; (8000e90 <MX_TIM2_Init+0x94>)
 8000e5e:	f001 fb79 	bl	8002554 <HAL_TIM_ConfigClockSource>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e68:	f000 f882 	bl	8000f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e70:	2300      	movs	r3, #0
 8000e72:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e74:	463b      	mov	r3, r7
 8000e76:	4619      	mov	r1, r3
 8000e78:	4805      	ldr	r0, [pc, #20]	; (8000e90 <MX_TIM2_Init+0x94>)
 8000e7a:	f001 fd51 	bl	8002920 <HAL_TIMEx_MasterConfigSynchronization>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e84:	f000 f874 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e88:	bf00      	nop
 8000e8a:	3718      	adds	r7, #24
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	200000c4 	.word	0x200000c4

08000e94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9a:	f107 0308 	add.w	r3, r7, #8
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea8:	4b28      	ldr	r3, [pc, #160]	; (8000f4c <MX_GPIO_Init+0xb8>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	4a27      	ldr	r2, [pc, #156]	; (8000f4c <MX_GPIO_Init+0xb8>)
 8000eae:	f043 0304 	orr.w	r3, r3, #4
 8000eb2:	6193      	str	r3, [r2, #24]
 8000eb4:	4b25      	ldr	r3, [pc, #148]	; (8000f4c <MX_GPIO_Init+0xb8>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	f003 0304 	and.w	r3, r3, #4
 8000ebc:	607b      	str	r3, [r7, #4]
 8000ebe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec0:	4b22      	ldr	r3, [pc, #136]	; (8000f4c <MX_GPIO_Init+0xb8>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	4a21      	ldr	r2, [pc, #132]	; (8000f4c <MX_GPIO_Init+0xb8>)
 8000ec6:	f043 0308 	orr.w	r3, r3, #8
 8000eca:	6193      	str	r3, [r2, #24]
 8000ecc:	4b1f      	ldr	r3, [pc, #124]	; (8000f4c <MX_GPIO_Init+0xb8>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	f003 0308 	and.w	r3, r3, #8
 8000ed4:	603b      	str	r3, [r7, #0]
 8000ed6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8000ed8:	2200      	movs	r2, #0
 8000eda:	21fc      	movs	r1, #252	; 0xfc
 8000edc:	481c      	ldr	r0, [pc, #112]	; (8000f50 <MX_GPIO_Init+0xbc>)
 8000ede:	f000 fda0 	bl	8001a22 <HAL_GPIO_WritePin>
                          |LED5_Pin|LED6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|EN4_Pin
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8000ee8:	481a      	ldr	r0, [pc, #104]	; (8000f54 <MX_GPIO_Init+0xc0>)
 8000eea:	f000 fd9a 	bl	8001a22 <HAL_GPIO_WritePin>
                          |SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin
                          |EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
                           LED5_Pin LED6_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8000eee:	23fc      	movs	r3, #252	; 0xfc
 8000ef0:	60bb      	str	r3, [r7, #8]
                          |LED5_Pin|LED6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efa:	2302      	movs	r3, #2
 8000efc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efe:	f107 0308 	add.w	r3, r7, #8
 8000f02:	4619      	mov	r1, r3
 8000f04:	4812      	ldr	r0, [pc, #72]	; (8000f50 <MX_GPIO_Init+0xbc>)
 8000f06:	f000 fbfb 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin EN4_Pin
                           SEG3_Pin SEG4_Pin SEG5_Pin SEG6_Pin
                           EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|EN4_Pin
 8000f0a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000f0e:	60bb      	str	r3, [r7, #8]
                          |SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin
                          |EN1_Pin|EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f10:	2301      	movs	r3, #1
 8000f12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1c:	f107 0308 	add.w	r3, r7, #8
 8000f20:	4619      	mov	r1, r3
 8000f22:	480c      	ldr	r0, [pc, #48]	; (8000f54 <MX_GPIO_Init+0xc0>)
 8000f24:	f000 fbec 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin|B3_Pin;
 8000f28:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000f2c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f32:	2301      	movs	r3, #1
 8000f34:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f36:	f107 0308 	add.w	r3, r7, #8
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4804      	ldr	r0, [pc, #16]	; (8000f50 <MX_GPIO_Init+0xbc>)
 8000f3e:	f000 fbdf 	bl	8001700 <HAL_GPIO_Init>

}
 8000f42:	bf00      	nop
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	40010800 	.word	0x40010800
 8000f54:	40010c00 	.word	0x40010c00

08000f58 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
	timerRun();
 8000f60:	f000 f824 	bl	8000fac <timerRun>
	getKeyInput();
 8000f64:	f7ff fb66 	bl	8000634 <getKeyInput>
}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f74:	b672      	cpsid	i
}
 8000f76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <Error_Handler+0x8>
	...

08000f7c <setTimer>:

int timer_flag[4] = {0,0,0,0};
int timer_counter[4] = {0,0,0,0};


void setTimer(int index, int duration){
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
	timer_flag[index] = 0;
 8000f86:	4a07      	ldr	r2, [pc, #28]	; (8000fa4 <setTimer+0x28>)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_counter[index] = duration;
 8000f90:	4905      	ldr	r1, [pc, #20]	; (8000fa8 <setTimer+0x2c>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	683a      	ldr	r2, [r7, #0]
 8000f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr
 8000fa4:	200000a4 	.word	0x200000a4
 8000fa8:	200000b4 	.word	0x200000b4

08000fac <timerRun>:


void timerRun(){
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
	for(int i = 0; i < NUMBER_TIMER; i++){
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	e01c      	b.n	8000ff2 <timerRun+0x46>
		if(timer_counter[i] > 0){
 8000fb8:	4a12      	ldr	r2, [pc, #72]	; (8001004 <timerRun+0x58>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	dd13      	ble.n	8000fec <timerRun+0x40>
			timer_counter[i]--;
 8000fc4:	4a0f      	ldr	r2, [pc, #60]	; (8001004 <timerRun+0x58>)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fcc:	1e5a      	subs	r2, r3, #1
 8000fce:	490d      	ldr	r1, [pc, #52]	; (8001004 <timerRun+0x58>)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <= 0){
 8000fd6:	4a0b      	ldr	r2, [pc, #44]	; (8001004 <timerRun+0x58>)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	dc04      	bgt.n	8000fec <timerRun+0x40>
				timer_flag[i] = 1;
 8000fe2:	4a09      	ldr	r2, [pc, #36]	; (8001008 <timerRun+0x5c>)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < NUMBER_TIMER; i++){
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	607b      	str	r3, [r7, #4]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2b03      	cmp	r3, #3
 8000ff6:	dddf      	ble.n	8000fb8 <timerRun+0xc>
			}
		}
	}
}
 8000ff8:	bf00      	nop
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr
 8001004:	200000b4 	.word	0x200000b4
 8001008:	200000a4 	.word	0x200000a4

0800100c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001012:	4b15      	ldr	r3, [pc, #84]	; (8001068 <HAL_MspInit+0x5c>)
 8001014:	699b      	ldr	r3, [r3, #24]
 8001016:	4a14      	ldr	r2, [pc, #80]	; (8001068 <HAL_MspInit+0x5c>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	6193      	str	r3, [r2, #24]
 800101e:	4b12      	ldr	r3, [pc, #72]	; (8001068 <HAL_MspInit+0x5c>)
 8001020:	699b      	ldr	r3, [r3, #24]
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800102a:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <HAL_MspInit+0x5c>)
 800102c:	69db      	ldr	r3, [r3, #28]
 800102e:	4a0e      	ldr	r2, [pc, #56]	; (8001068 <HAL_MspInit+0x5c>)
 8001030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001034:	61d3      	str	r3, [r2, #28]
 8001036:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <HAL_MspInit+0x5c>)
 8001038:	69db      	ldr	r3, [r3, #28]
 800103a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001042:	4b0a      	ldr	r3, [pc, #40]	; (800106c <HAL_MspInit+0x60>)
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	4a04      	ldr	r2, [pc, #16]	; (800106c <HAL_MspInit+0x60>)
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800105e:	bf00      	nop
 8001060:	3714      	adds	r7, #20
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr
 8001068:	40021000 	.word	0x40021000
 800106c:	40010000 	.word	0x40010000

08001070 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001080:	d113      	bne.n	80010aa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001082:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <HAL_TIM_Base_MspInit+0x44>)
 8001084:	69db      	ldr	r3, [r3, #28]
 8001086:	4a0b      	ldr	r2, [pc, #44]	; (80010b4 <HAL_TIM_Base_MspInit+0x44>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	61d3      	str	r3, [r2, #28]
 800108e:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <HAL_TIM_Base_MspInit+0x44>)
 8001090:	69db      	ldr	r3, [r3, #28]
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800109a:	2200      	movs	r2, #0
 800109c:	2100      	movs	r1, #0
 800109e:	201c      	movs	r0, #28
 80010a0:	f000 faf7 	bl	8001692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010a4:	201c      	movs	r0, #28
 80010a6:	f000 fb10 	bl	80016ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010aa:	bf00      	nop
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40021000 	.word	0x40021000

080010b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010bc:	e7fe      	b.n	80010bc <NMI_Handler+0x4>

080010be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c2:	e7fe      	b.n	80010c2 <HardFault_Handler+0x4>

080010c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <MemManage_Handler+0x4>

080010ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ce:	e7fe      	b.n	80010ce <BusFault_Handler+0x4>

080010d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <UsageFault_Handler+0x4>

080010d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr

080010e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr

080010ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc80      	pop	{r7}
 80010f8:	4770      	bx	lr

080010fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010fe:	f000 f9d5 	bl	80014ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800110c:	4802      	ldr	r0, [pc, #8]	; (8001118 <TIM2_IRQHandler+0x10>)
 800110e:	f001 f931 	bl	8002374 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	200000c4 	.word	0x200000c4

0800111c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr

08001128 <setInit>:
 */

#include "traffic_light.h"
#include "main.h"

void setInit(){
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 800112c:	2200      	movs	r2, #0
 800112e:	2104      	movs	r1, #4
 8001130:	480e      	ldr	r0, [pc, #56]	; (800116c <setInit+0x44>)
 8001132:	f000 fc76 	bl	8001a22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 8001136:	2200      	movs	r2, #0
 8001138:	2108      	movs	r1, #8
 800113a:	480c      	ldr	r0, [pc, #48]	; (800116c <setInit+0x44>)
 800113c:	f000 fc71 	bl	8001a22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 8001140:	2200      	movs	r2, #0
 8001142:	2110      	movs	r1, #16
 8001144:	4809      	ldr	r0, [pc, #36]	; (800116c <setInit+0x44>)
 8001146:	f000 fc6c 	bl	8001a22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, RESET);
 800114a:	2200      	movs	r2, #0
 800114c:	2120      	movs	r1, #32
 800114e:	4807      	ldr	r0, [pc, #28]	; (800116c <setInit+0x44>)
 8001150:	f000 fc67 	bl	8001a22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, RESET);
 8001154:	2200      	movs	r2, #0
 8001156:	2140      	movs	r1, #64	; 0x40
 8001158:	4804      	ldr	r0, [pc, #16]	; (800116c <setInit+0x44>)
 800115a:	f000 fc62 	bl	8001a22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, RESET);
 800115e:	2200      	movs	r2, #0
 8001160:	2180      	movs	r1, #128	; 0x80
 8001162:	4802      	ldr	r0, [pc, #8]	; (800116c <setInit+0x44>)
 8001164:	f000 fc5d 	bl	8001a22 <HAL_GPIO_WritePin>
}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40010800 	.word	0x40010800

08001170 <setRed>:

void setRed(int index){
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, 0x4<<(index*3), SET);
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	4613      	mov	r3, r2
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	4413      	add	r3, r2
 8001180:	2204      	movs	r2, #4
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	b29b      	uxth	r3, r3
 8001188:	2201      	movs	r2, #1
 800118a:	4619      	mov	r1, r3
 800118c:	4811      	ldr	r0, [pc, #68]	; (80011d4 <setRed+0x64>)
 800118e:	f000 fc48 	bl	8001a22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, 0x4<<(index*3+1), RESET);
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	4613      	mov	r3, r2
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	4413      	add	r3, r2
 800119a:	3301      	adds	r3, #1
 800119c:	2204      	movs	r2, #4
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	2200      	movs	r2, #0
 80011a6:	4619      	mov	r1, r3
 80011a8:	480a      	ldr	r0, [pc, #40]	; (80011d4 <setRed+0x64>)
 80011aa:	f000 fc3a 	bl	8001a22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, 0x4<<(index*3+2), RESET);
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	4613      	mov	r3, r2
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	4413      	add	r3, r2
 80011b6:	3302      	adds	r3, #2
 80011b8:	2204      	movs	r2, #4
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	b29b      	uxth	r3, r3
 80011c0:	2200      	movs	r2, #0
 80011c2:	4619      	mov	r1, r3
 80011c4:	4803      	ldr	r0, [pc, #12]	; (80011d4 <setRed+0x64>)
 80011c6:	f000 fc2c 	bl	8001a22 <HAL_GPIO_WritePin>
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40010800 	.word	0x40010800

080011d8 <setGreen>:


void setGreen(int index){
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, 0x4<<(index*3), RESET);
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	4613      	mov	r3, r2
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	4413      	add	r3, r2
 80011e8:	2204      	movs	r2, #4
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	2200      	movs	r2, #0
 80011f2:	4619      	mov	r1, r3
 80011f4:	4811      	ldr	r0, [pc, #68]	; (800123c <setGreen+0x64>)
 80011f6:	f000 fc14 	bl	8001a22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, 0x4<<(index*3+1), RESET);
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	4613      	mov	r3, r2
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	4413      	add	r3, r2
 8001202:	3301      	adds	r3, #1
 8001204:	2204      	movs	r2, #4
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	b29b      	uxth	r3, r3
 800120c:	2200      	movs	r2, #0
 800120e:	4619      	mov	r1, r3
 8001210:	480a      	ldr	r0, [pc, #40]	; (800123c <setGreen+0x64>)
 8001212:	f000 fc06 	bl	8001a22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, 0x4<<(index*3+2), SET);
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	4613      	mov	r3, r2
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	4413      	add	r3, r2
 800121e:	3302      	adds	r3, #2
 8001220:	2204      	movs	r2, #4
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	b29b      	uxth	r3, r3
 8001228:	2201      	movs	r2, #1
 800122a:	4619      	mov	r1, r3
 800122c:	4803      	ldr	r0, [pc, #12]	; (800123c <setGreen+0x64>)
 800122e:	f000 fbf8 	bl	8001a22 <HAL_GPIO_WritePin>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40010800 	.word	0x40010800

08001240 <setYellow>:

void setYellow(int index){
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, 0x4<<(index*3), RESET);
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	4613      	mov	r3, r2
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	4413      	add	r3, r2
 8001250:	2204      	movs	r2, #4
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	b29b      	uxth	r3, r3
 8001258:	2200      	movs	r2, #0
 800125a:	4619      	mov	r1, r3
 800125c:	4811      	ldr	r0, [pc, #68]	; (80012a4 <setYellow+0x64>)
 800125e:	f000 fbe0 	bl	8001a22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, 0x4<<(index*3+1), SET);
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	4613      	mov	r3, r2
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	4413      	add	r3, r2
 800126a:	3301      	adds	r3, #1
 800126c:	2204      	movs	r2, #4
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	b29b      	uxth	r3, r3
 8001274:	2201      	movs	r2, #1
 8001276:	4619      	mov	r1, r3
 8001278:	480a      	ldr	r0, [pc, #40]	; (80012a4 <setYellow+0x64>)
 800127a:	f000 fbd2 	bl	8001a22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, 0x4<<(index*3+2), RESET);
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	4613      	mov	r3, r2
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	4413      	add	r3, r2
 8001286:	3302      	adds	r3, #2
 8001288:	2204      	movs	r2, #4
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	b29b      	uxth	r3, r3
 8001290:	2200      	movs	r2, #0
 8001292:	4619      	mov	r1, r3
 8001294:	4803      	ldr	r0, [pc, #12]	; (80012a4 <setYellow+0x64>)
 8001296:	f000 fbc4 	bl	8001a22 <HAL_GPIO_WritePin>
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40010800 	.word	0x40010800

080012a8 <blinkRed>:


void blinkRed(int index){
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOA, 0x4<<(index*3));
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	4613      	mov	r3, r2
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	4413      	add	r3, r2
 80012b8:	2204      	movs	r2, #4
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	b29b      	uxth	r3, r3
 80012c0:	4619      	mov	r1, r3
 80012c2:	4811      	ldr	r0, [pc, #68]	; (8001308 <blinkRed+0x60>)
 80012c4:	f000 fbc5 	bl	8001a52 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(GPIOA, 0x4<<(index*3+1), RESET);
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	4613      	mov	r3, r2
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	4413      	add	r3, r2
 80012d0:	3301      	adds	r3, #1
 80012d2:	2204      	movs	r2, #4
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	b29b      	uxth	r3, r3
 80012da:	2200      	movs	r2, #0
 80012dc:	4619      	mov	r1, r3
 80012de:	480a      	ldr	r0, [pc, #40]	; (8001308 <blinkRed+0x60>)
 80012e0:	f000 fb9f 	bl	8001a22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, 0x4<<(index*3+2), RESET);
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	4613      	mov	r3, r2
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	4413      	add	r3, r2
 80012ec:	3302      	adds	r3, #2
 80012ee:	2204      	movs	r2, #4
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	2200      	movs	r2, #0
 80012f8:	4619      	mov	r1, r3
 80012fa:	4803      	ldr	r0, [pc, #12]	; (8001308 <blinkRed+0x60>)
 80012fc:	f000 fb91 	bl	8001a22 <HAL_GPIO_WritePin>
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40010800 	.word	0x40010800

0800130c <blinkGreen>:

void blinkGreen(int index){
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, 0x4<<(index*3), RESET);
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	4613      	mov	r3, r2
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	4413      	add	r3, r2
 800131c:	2204      	movs	r2, #4
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	b29b      	uxth	r3, r3
 8001324:	2200      	movs	r2, #0
 8001326:	4619      	mov	r1, r3
 8001328:	4810      	ldr	r0, [pc, #64]	; (800136c <blinkGreen+0x60>)
 800132a:	f000 fb7a 	bl	8001a22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, 0x4<<(index*3+1), RESET);
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	4613      	mov	r3, r2
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	4413      	add	r3, r2
 8001336:	3301      	adds	r3, #1
 8001338:	2204      	movs	r2, #4
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	b29b      	uxth	r3, r3
 8001340:	2200      	movs	r2, #0
 8001342:	4619      	mov	r1, r3
 8001344:	4809      	ldr	r0, [pc, #36]	; (800136c <blinkGreen+0x60>)
 8001346:	f000 fb6c 	bl	8001a22 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(GPIOA, 0x4<<(index*3+2));
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	4613      	mov	r3, r2
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	4413      	add	r3, r2
 8001352:	3302      	adds	r3, #2
 8001354:	2204      	movs	r2, #4
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	b29b      	uxth	r3, r3
 800135c:	4619      	mov	r1, r3
 800135e:	4803      	ldr	r0, [pc, #12]	; (800136c <blinkGreen+0x60>)
 8001360:	f000 fb77 	bl	8001a52 <HAL_GPIO_TogglePin>
}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40010800 	.word	0x40010800

08001370 <blinkYellow>:

void blinkYellow(int index){
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, 0x4<<(index*3), RESET);
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	4613      	mov	r3, r2
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	4413      	add	r3, r2
 8001380:	2204      	movs	r2, #4
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	b29b      	uxth	r3, r3
 8001388:	2200      	movs	r2, #0
 800138a:	4619      	mov	r1, r3
 800138c:	4810      	ldr	r0, [pc, #64]	; (80013d0 <blinkYellow+0x60>)
 800138e:	f000 fb48 	bl	8001a22 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(GPIOA, 0x4<<(index*3+1));
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	4613      	mov	r3, r2
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	4413      	add	r3, r2
 800139a:	3301      	adds	r3, #1
 800139c:	2204      	movs	r2, #4
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	4619      	mov	r1, r3
 80013a6:	480a      	ldr	r0, [pc, #40]	; (80013d0 <blinkYellow+0x60>)
 80013a8:	f000 fb53 	bl	8001a52 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(GPIOA, 0x4<<(index*3+2), RESET);
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	4613      	mov	r3, r2
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	4413      	add	r3, r2
 80013b4:	3302      	adds	r3, #2
 80013b6:	2204      	movs	r2, #4
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	b29b      	uxth	r3, r3
 80013be:	2200      	movs	r2, #0
 80013c0:	4619      	mov	r1, r3
 80013c2:	4803      	ldr	r0, [pc, #12]	; (80013d0 <blinkYellow+0x60>)
 80013c4:	f000 fb2d 	bl	8001a22 <HAL_GPIO_WritePin>
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40010800 	.word	0x40010800

080013d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013d4:	f7ff fea2 	bl	800111c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013d8:	480b      	ldr	r0, [pc, #44]	; (8001408 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80013da:	490c      	ldr	r1, [pc, #48]	; (800140c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80013dc:	4a0c      	ldr	r2, [pc, #48]	; (8001410 <LoopFillZerobss+0x16>)
  movs r3, #0
 80013de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e0:	e002      	b.n	80013e8 <LoopCopyDataInit>

080013e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013e6:	3304      	adds	r3, #4

080013e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013ec:	d3f9      	bcc.n	80013e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ee:	4a09      	ldr	r2, [pc, #36]	; (8001414 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80013f0:	4c09      	ldr	r4, [pc, #36]	; (8001418 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f4:	e001      	b.n	80013fa <LoopFillZerobss>

080013f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f8:	3204      	adds	r2, #4

080013fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013fc:	d3fb      	bcc.n	80013f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013fe:	f001 faf9 	bl	80029f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001402:	f7ff fca1 	bl	8000d48 <main>
  bx lr
 8001406:	4770      	bx	lr
  ldr r0, =_sdata
 8001408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800140c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001410:	08002a90 	.word	0x08002a90
  ldr r2, =_sbss
 8001414:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001418:	20000110 	.word	0x20000110

0800141c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800141c:	e7fe      	b.n	800141c <ADC1_2_IRQHandler>
	...

08001420 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001424:	4b08      	ldr	r3, [pc, #32]	; (8001448 <HAL_Init+0x28>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a07      	ldr	r2, [pc, #28]	; (8001448 <HAL_Init+0x28>)
 800142a:	f043 0310 	orr.w	r3, r3, #16
 800142e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001430:	2003      	movs	r0, #3
 8001432:	f000 f923 	bl	800167c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001436:	200f      	movs	r0, #15
 8001438:	f000 f808 	bl	800144c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800143c:	f7ff fde6 	bl	800100c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40022000 	.word	0x40022000

0800144c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001454:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <HAL_InitTick+0x54>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <HAL_InitTick+0x58>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	4619      	mov	r1, r3
 800145e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001462:	fbb3 f3f1 	udiv	r3, r3, r1
 8001466:	fbb2 f3f3 	udiv	r3, r2, r3
 800146a:	4618      	mov	r0, r3
 800146c:	f000 f93b 	bl	80016e6 <HAL_SYSTICK_Config>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e00e      	b.n	8001498 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2b0f      	cmp	r3, #15
 800147e:	d80a      	bhi.n	8001496 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001480:	2200      	movs	r2, #0
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	f04f 30ff 	mov.w	r0, #4294967295
 8001488:	f000 f903 	bl	8001692 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800148c:	4a06      	ldr	r2, [pc, #24]	; (80014a8 <HAL_InitTick+0x5c>)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001492:	2300      	movs	r3, #0
 8001494:	e000      	b.n	8001498 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
}
 8001498:	4618      	mov	r0, r3
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000054 	.word	0x20000054
 80014a4:	2000005c 	.word	0x2000005c
 80014a8:	20000058 	.word	0x20000058

080014ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b0:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <HAL_IncTick+0x1c>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b05      	ldr	r3, [pc, #20]	; (80014cc <HAL_IncTick+0x20>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4413      	add	r3, r2
 80014bc:	4a03      	ldr	r2, [pc, #12]	; (80014cc <HAL_IncTick+0x20>)
 80014be:	6013      	str	r3, [r2, #0]
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr
 80014c8:	2000005c 	.word	0x2000005c
 80014cc:	2000010c 	.word	0x2000010c

080014d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return uwTick;
 80014d4:	4b02      	ldr	r3, [pc, #8]	; (80014e0 <HAL_GetTick+0x10>)
 80014d6:	681b      	ldr	r3, [r3, #0]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr
 80014e0:	2000010c 	.word	0x2000010c

080014e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001500:	4013      	ands	r3, r2
 8001502:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800150c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001516:	4a04      	ldr	r2, [pc, #16]	; (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	60d3      	str	r3, [r2, #12]
}
 800151c:	bf00      	nop
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001530:	4b04      	ldr	r3, [pc, #16]	; (8001544 <__NVIC_GetPriorityGrouping+0x18>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	0a1b      	lsrs	r3, r3, #8
 8001536:	f003 0307 	and.w	r3, r3, #7
}
 800153a:	4618      	mov	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	2b00      	cmp	r3, #0
 8001558:	db0b      	blt.n	8001572 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	f003 021f 	and.w	r2, r3, #31
 8001560:	4906      	ldr	r1, [pc, #24]	; (800157c <__NVIC_EnableIRQ+0x34>)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	095b      	lsrs	r3, r3, #5
 8001568:	2001      	movs	r0, #1
 800156a:	fa00 f202 	lsl.w	r2, r0, r2
 800156e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr
 800157c:	e000e100 	.word	0xe000e100

08001580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	6039      	str	r1, [r7, #0]
 800158a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800158c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001590:	2b00      	cmp	r3, #0
 8001592:	db0a      	blt.n	80015aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	b2da      	uxtb	r2, r3
 8001598:	490c      	ldr	r1, [pc, #48]	; (80015cc <__NVIC_SetPriority+0x4c>)
 800159a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159e:	0112      	lsls	r2, r2, #4
 80015a0:	b2d2      	uxtb	r2, r2
 80015a2:	440b      	add	r3, r1
 80015a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a8:	e00a      	b.n	80015c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	4908      	ldr	r1, [pc, #32]	; (80015d0 <__NVIC_SetPriority+0x50>)
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	f003 030f 	and.w	r3, r3, #15
 80015b6:	3b04      	subs	r3, #4
 80015b8:	0112      	lsls	r2, r2, #4
 80015ba:	b2d2      	uxtb	r2, r2
 80015bc:	440b      	add	r3, r1
 80015be:	761a      	strb	r2, [r3, #24]
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	e000e100 	.word	0xe000e100
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b089      	sub	sp, #36	; 0x24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	f1c3 0307 	rsb	r3, r3, #7
 80015ee:	2b04      	cmp	r3, #4
 80015f0:	bf28      	it	cs
 80015f2:	2304      	movcs	r3, #4
 80015f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3304      	adds	r3, #4
 80015fa:	2b06      	cmp	r3, #6
 80015fc:	d902      	bls.n	8001604 <NVIC_EncodePriority+0x30>
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	3b03      	subs	r3, #3
 8001602:	e000      	b.n	8001606 <NVIC_EncodePriority+0x32>
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001608:	f04f 32ff 	mov.w	r2, #4294967295
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	43da      	mvns	r2, r3
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	401a      	ands	r2, r3
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800161c:	f04f 31ff 	mov.w	r1, #4294967295
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	fa01 f303 	lsl.w	r3, r1, r3
 8001626:	43d9      	mvns	r1, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800162c:	4313      	orrs	r3, r2
         );
}
 800162e:	4618      	mov	r0, r3
 8001630:	3724      	adds	r7, #36	; 0x24
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr

08001638 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3b01      	subs	r3, #1
 8001644:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001648:	d301      	bcc.n	800164e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800164a:	2301      	movs	r3, #1
 800164c:	e00f      	b.n	800166e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800164e:	4a0a      	ldr	r2, [pc, #40]	; (8001678 <SysTick_Config+0x40>)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3b01      	subs	r3, #1
 8001654:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001656:	210f      	movs	r1, #15
 8001658:	f04f 30ff 	mov.w	r0, #4294967295
 800165c:	f7ff ff90 	bl	8001580 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001660:	4b05      	ldr	r3, [pc, #20]	; (8001678 <SysTick_Config+0x40>)
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001666:	4b04      	ldr	r3, [pc, #16]	; (8001678 <SysTick_Config+0x40>)
 8001668:	2207      	movs	r2, #7
 800166a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	e000e010 	.word	0xe000e010

0800167c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff ff2d 	bl	80014e4 <__NVIC_SetPriorityGrouping>
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001692:	b580      	push	{r7, lr}
 8001694:	b086      	sub	sp, #24
 8001696:	af00      	add	r7, sp, #0
 8001698:	4603      	mov	r3, r0
 800169a:	60b9      	str	r1, [r7, #8]
 800169c:	607a      	str	r2, [r7, #4]
 800169e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016a4:	f7ff ff42 	bl	800152c <__NVIC_GetPriorityGrouping>
 80016a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	68b9      	ldr	r1, [r7, #8]
 80016ae:	6978      	ldr	r0, [r7, #20]
 80016b0:	f7ff ff90 	bl	80015d4 <NVIC_EncodePriority>
 80016b4:	4602      	mov	r2, r0
 80016b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ba:	4611      	mov	r1, r2
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff ff5f 	bl	8001580 <__NVIC_SetPriority>
}
 80016c2:	bf00      	nop
 80016c4:	3718      	adds	r7, #24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b082      	sub	sp, #8
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	4603      	mov	r3, r0
 80016d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff ff35 	bl	8001548 <__NVIC_EnableIRQ>
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7ff ffa2 	bl	8001638 <SysTick_Config>
 80016f4:	4603      	mov	r3, r0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
	...

08001700 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001700:	b480      	push	{r7}
 8001702:	b08b      	sub	sp, #44	; 0x2c
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800170a:	2300      	movs	r3, #0
 800170c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800170e:	2300      	movs	r3, #0
 8001710:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001712:	e148      	b.n	80019a6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001714:	2201      	movs	r2, #1
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	69fa      	ldr	r2, [r7, #28]
 8001724:	4013      	ands	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	429a      	cmp	r2, r3
 800172e:	f040 8137 	bne.w	80019a0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	4aa3      	ldr	r2, [pc, #652]	; (80019c4 <HAL_GPIO_Init+0x2c4>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d05e      	beq.n	80017fa <HAL_GPIO_Init+0xfa>
 800173c:	4aa1      	ldr	r2, [pc, #644]	; (80019c4 <HAL_GPIO_Init+0x2c4>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d875      	bhi.n	800182e <HAL_GPIO_Init+0x12e>
 8001742:	4aa1      	ldr	r2, [pc, #644]	; (80019c8 <HAL_GPIO_Init+0x2c8>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d058      	beq.n	80017fa <HAL_GPIO_Init+0xfa>
 8001748:	4a9f      	ldr	r2, [pc, #636]	; (80019c8 <HAL_GPIO_Init+0x2c8>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d86f      	bhi.n	800182e <HAL_GPIO_Init+0x12e>
 800174e:	4a9f      	ldr	r2, [pc, #636]	; (80019cc <HAL_GPIO_Init+0x2cc>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d052      	beq.n	80017fa <HAL_GPIO_Init+0xfa>
 8001754:	4a9d      	ldr	r2, [pc, #628]	; (80019cc <HAL_GPIO_Init+0x2cc>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d869      	bhi.n	800182e <HAL_GPIO_Init+0x12e>
 800175a:	4a9d      	ldr	r2, [pc, #628]	; (80019d0 <HAL_GPIO_Init+0x2d0>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d04c      	beq.n	80017fa <HAL_GPIO_Init+0xfa>
 8001760:	4a9b      	ldr	r2, [pc, #620]	; (80019d0 <HAL_GPIO_Init+0x2d0>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d863      	bhi.n	800182e <HAL_GPIO_Init+0x12e>
 8001766:	4a9b      	ldr	r2, [pc, #620]	; (80019d4 <HAL_GPIO_Init+0x2d4>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d046      	beq.n	80017fa <HAL_GPIO_Init+0xfa>
 800176c:	4a99      	ldr	r2, [pc, #612]	; (80019d4 <HAL_GPIO_Init+0x2d4>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d85d      	bhi.n	800182e <HAL_GPIO_Init+0x12e>
 8001772:	2b12      	cmp	r3, #18
 8001774:	d82a      	bhi.n	80017cc <HAL_GPIO_Init+0xcc>
 8001776:	2b12      	cmp	r3, #18
 8001778:	d859      	bhi.n	800182e <HAL_GPIO_Init+0x12e>
 800177a:	a201      	add	r2, pc, #4	; (adr r2, 8001780 <HAL_GPIO_Init+0x80>)
 800177c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001780:	080017fb 	.word	0x080017fb
 8001784:	080017d5 	.word	0x080017d5
 8001788:	080017e7 	.word	0x080017e7
 800178c:	08001829 	.word	0x08001829
 8001790:	0800182f 	.word	0x0800182f
 8001794:	0800182f 	.word	0x0800182f
 8001798:	0800182f 	.word	0x0800182f
 800179c:	0800182f 	.word	0x0800182f
 80017a0:	0800182f 	.word	0x0800182f
 80017a4:	0800182f 	.word	0x0800182f
 80017a8:	0800182f 	.word	0x0800182f
 80017ac:	0800182f 	.word	0x0800182f
 80017b0:	0800182f 	.word	0x0800182f
 80017b4:	0800182f 	.word	0x0800182f
 80017b8:	0800182f 	.word	0x0800182f
 80017bc:	0800182f 	.word	0x0800182f
 80017c0:	0800182f 	.word	0x0800182f
 80017c4:	080017dd 	.word	0x080017dd
 80017c8:	080017f1 	.word	0x080017f1
 80017cc:	4a82      	ldr	r2, [pc, #520]	; (80019d8 <HAL_GPIO_Init+0x2d8>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d013      	beq.n	80017fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017d2:	e02c      	b.n	800182e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	623b      	str	r3, [r7, #32]
          break;
 80017da:	e029      	b.n	8001830 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	3304      	adds	r3, #4
 80017e2:	623b      	str	r3, [r7, #32]
          break;
 80017e4:	e024      	b.n	8001830 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	3308      	adds	r3, #8
 80017ec:	623b      	str	r3, [r7, #32]
          break;
 80017ee:	e01f      	b.n	8001830 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	330c      	adds	r3, #12
 80017f6:	623b      	str	r3, [r7, #32]
          break;
 80017f8:	e01a      	b.n	8001830 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d102      	bne.n	8001808 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001802:	2304      	movs	r3, #4
 8001804:	623b      	str	r3, [r7, #32]
          break;
 8001806:	e013      	b.n	8001830 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d105      	bne.n	800181c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001810:	2308      	movs	r3, #8
 8001812:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	69fa      	ldr	r2, [r7, #28]
 8001818:	611a      	str	r2, [r3, #16]
          break;
 800181a:	e009      	b.n	8001830 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800181c:	2308      	movs	r3, #8
 800181e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	69fa      	ldr	r2, [r7, #28]
 8001824:	615a      	str	r2, [r3, #20]
          break;
 8001826:	e003      	b.n	8001830 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001828:	2300      	movs	r3, #0
 800182a:	623b      	str	r3, [r7, #32]
          break;
 800182c:	e000      	b.n	8001830 <HAL_GPIO_Init+0x130>
          break;
 800182e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	2bff      	cmp	r3, #255	; 0xff
 8001834:	d801      	bhi.n	800183a <HAL_GPIO_Init+0x13a>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	e001      	b.n	800183e <HAL_GPIO_Init+0x13e>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	3304      	adds	r3, #4
 800183e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	2bff      	cmp	r3, #255	; 0xff
 8001844:	d802      	bhi.n	800184c <HAL_GPIO_Init+0x14c>
 8001846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	e002      	b.n	8001852 <HAL_GPIO_Init+0x152>
 800184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184e:	3b08      	subs	r3, #8
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	210f      	movs	r1, #15
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	fa01 f303 	lsl.w	r3, r1, r3
 8001860:	43db      	mvns	r3, r3
 8001862:	401a      	ands	r2, r3
 8001864:	6a39      	ldr	r1, [r7, #32]
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	fa01 f303 	lsl.w	r3, r1, r3
 800186c:	431a      	orrs	r2, r3
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	f000 8090 	beq.w	80019a0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001880:	4b56      	ldr	r3, [pc, #344]	; (80019dc <HAL_GPIO_Init+0x2dc>)
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	4a55      	ldr	r2, [pc, #340]	; (80019dc <HAL_GPIO_Init+0x2dc>)
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	6193      	str	r3, [r2, #24]
 800188c:	4b53      	ldr	r3, [pc, #332]	; (80019dc <HAL_GPIO_Init+0x2dc>)
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	60bb      	str	r3, [r7, #8]
 8001896:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001898:	4a51      	ldr	r2, [pc, #324]	; (80019e0 <HAL_GPIO_Init+0x2e0>)
 800189a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189c:	089b      	lsrs	r3, r3, #2
 800189e:	3302      	adds	r3, #2
 80018a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	f003 0303 	and.w	r3, r3, #3
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	220f      	movs	r2, #15
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	4013      	ands	r3, r2
 80018ba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a49      	ldr	r2, [pc, #292]	; (80019e4 <HAL_GPIO_Init+0x2e4>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d00d      	beq.n	80018e0 <HAL_GPIO_Init+0x1e0>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a48      	ldr	r2, [pc, #288]	; (80019e8 <HAL_GPIO_Init+0x2e8>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d007      	beq.n	80018dc <HAL_GPIO_Init+0x1dc>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a47      	ldr	r2, [pc, #284]	; (80019ec <HAL_GPIO_Init+0x2ec>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d101      	bne.n	80018d8 <HAL_GPIO_Init+0x1d8>
 80018d4:	2302      	movs	r3, #2
 80018d6:	e004      	b.n	80018e2 <HAL_GPIO_Init+0x1e2>
 80018d8:	2303      	movs	r3, #3
 80018da:	e002      	b.n	80018e2 <HAL_GPIO_Init+0x1e2>
 80018dc:	2301      	movs	r3, #1
 80018de:	e000      	b.n	80018e2 <HAL_GPIO_Init+0x1e2>
 80018e0:	2300      	movs	r3, #0
 80018e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018e4:	f002 0203 	and.w	r2, r2, #3
 80018e8:	0092      	lsls	r2, r2, #2
 80018ea:	4093      	lsls	r3, r2
 80018ec:	68fa      	ldr	r2, [r7, #12]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018f2:	493b      	ldr	r1, [pc, #236]	; (80019e0 <HAL_GPIO_Init+0x2e0>)
 80018f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f6:	089b      	lsrs	r3, r3, #2
 80018f8:	3302      	adds	r3, #2
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d006      	beq.n	800191a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800190c:	4b38      	ldr	r3, [pc, #224]	; (80019f0 <HAL_GPIO_Init+0x2f0>)
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	4937      	ldr	r1, [pc, #220]	; (80019f0 <HAL_GPIO_Init+0x2f0>)
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	4313      	orrs	r3, r2
 8001916:	608b      	str	r3, [r1, #8]
 8001918:	e006      	b.n	8001928 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800191a:	4b35      	ldr	r3, [pc, #212]	; (80019f0 <HAL_GPIO_Init+0x2f0>)
 800191c:	689a      	ldr	r2, [r3, #8]
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	43db      	mvns	r3, r3
 8001922:	4933      	ldr	r1, [pc, #204]	; (80019f0 <HAL_GPIO_Init+0x2f0>)
 8001924:	4013      	ands	r3, r2
 8001926:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d006      	beq.n	8001942 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001934:	4b2e      	ldr	r3, [pc, #184]	; (80019f0 <HAL_GPIO_Init+0x2f0>)
 8001936:	68da      	ldr	r2, [r3, #12]
 8001938:	492d      	ldr	r1, [pc, #180]	; (80019f0 <HAL_GPIO_Init+0x2f0>)
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	4313      	orrs	r3, r2
 800193e:	60cb      	str	r3, [r1, #12]
 8001940:	e006      	b.n	8001950 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001942:	4b2b      	ldr	r3, [pc, #172]	; (80019f0 <HAL_GPIO_Init+0x2f0>)
 8001944:	68da      	ldr	r2, [r3, #12]
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	43db      	mvns	r3, r3
 800194a:	4929      	ldr	r1, [pc, #164]	; (80019f0 <HAL_GPIO_Init+0x2f0>)
 800194c:	4013      	ands	r3, r2
 800194e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d006      	beq.n	800196a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800195c:	4b24      	ldr	r3, [pc, #144]	; (80019f0 <HAL_GPIO_Init+0x2f0>)
 800195e:	685a      	ldr	r2, [r3, #4]
 8001960:	4923      	ldr	r1, [pc, #140]	; (80019f0 <HAL_GPIO_Init+0x2f0>)
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	4313      	orrs	r3, r2
 8001966:	604b      	str	r3, [r1, #4]
 8001968:	e006      	b.n	8001978 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800196a:	4b21      	ldr	r3, [pc, #132]	; (80019f0 <HAL_GPIO_Init+0x2f0>)
 800196c:	685a      	ldr	r2, [r3, #4]
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	43db      	mvns	r3, r3
 8001972:	491f      	ldr	r1, [pc, #124]	; (80019f0 <HAL_GPIO_Init+0x2f0>)
 8001974:	4013      	ands	r3, r2
 8001976:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d006      	beq.n	8001992 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001984:	4b1a      	ldr	r3, [pc, #104]	; (80019f0 <HAL_GPIO_Init+0x2f0>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	4919      	ldr	r1, [pc, #100]	; (80019f0 <HAL_GPIO_Init+0x2f0>)
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	4313      	orrs	r3, r2
 800198e:	600b      	str	r3, [r1, #0]
 8001990:	e006      	b.n	80019a0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001992:	4b17      	ldr	r3, [pc, #92]	; (80019f0 <HAL_GPIO_Init+0x2f0>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	43db      	mvns	r3, r3
 800199a:	4915      	ldr	r1, [pc, #84]	; (80019f0 <HAL_GPIO_Init+0x2f0>)
 800199c:	4013      	ands	r3, r2
 800199e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80019a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a2:	3301      	adds	r3, #1
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	fa22 f303 	lsr.w	r3, r2, r3
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f47f aeaf 	bne.w	8001714 <HAL_GPIO_Init+0x14>
  }
}
 80019b6:	bf00      	nop
 80019b8:	bf00      	nop
 80019ba:	372c      	adds	r7, #44	; 0x2c
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	10320000 	.word	0x10320000
 80019c8:	10310000 	.word	0x10310000
 80019cc:	10220000 	.word	0x10220000
 80019d0:	10210000 	.word	0x10210000
 80019d4:	10120000 	.word	0x10120000
 80019d8:	10110000 	.word	0x10110000
 80019dc:	40021000 	.word	0x40021000
 80019e0:	40010000 	.word	0x40010000
 80019e4:	40010800 	.word	0x40010800
 80019e8:	40010c00 	.word	0x40010c00
 80019ec:	40011000 	.word	0x40011000
 80019f0:	40010400 	.word	0x40010400

080019f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	460b      	mov	r3, r1
 80019fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	887b      	ldrh	r3, [r7, #2]
 8001a06:	4013      	ands	r3, r2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d002      	beq.n	8001a12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	73fb      	strb	r3, [r7, #15]
 8001a10:	e001      	b.n	8001a16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a12:	2300      	movs	r3, #0
 8001a14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc80      	pop	{r7}
 8001a20:	4770      	bx	lr

08001a22 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b083      	sub	sp, #12
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	807b      	strh	r3, [r7, #2]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a32:	787b      	ldrb	r3, [r7, #1]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d003      	beq.n	8001a40 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a38:	887a      	ldrh	r2, [r7, #2]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a3e:	e003      	b.n	8001a48 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a40:	887b      	ldrh	r3, [r7, #2]
 8001a42:	041a      	lsls	r2, r3, #16
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	611a      	str	r2, [r3, #16]
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bc80      	pop	{r7}
 8001a50:	4770      	bx	lr

08001a52 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b085      	sub	sp, #20
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a64:	887a      	ldrh	r2, [r7, #2]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	041a      	lsls	r2, r3, #16
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	43d9      	mvns	r1, r3
 8001a70:	887b      	ldrh	r3, [r7, #2]
 8001a72:	400b      	ands	r3, r1
 8001a74:	431a      	orrs	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	611a      	str	r2, [r3, #16]
}
 8001a7a:	bf00      	nop
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr

08001a84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e26c      	b.n	8001f70 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	f000 8087 	beq.w	8001bb2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001aa4:	4b92      	ldr	r3, [pc, #584]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 030c 	and.w	r3, r3, #12
 8001aac:	2b04      	cmp	r3, #4
 8001aae:	d00c      	beq.n	8001aca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ab0:	4b8f      	ldr	r3, [pc, #572]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 030c 	and.w	r3, r3, #12
 8001ab8:	2b08      	cmp	r3, #8
 8001aba:	d112      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x5e>
 8001abc:	4b8c      	ldr	r3, [pc, #560]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ac8:	d10b      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aca:	4b89      	ldr	r3, [pc, #548]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d06c      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x12c>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d168      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e246      	b.n	8001f70 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aea:	d106      	bne.n	8001afa <HAL_RCC_OscConfig+0x76>
 8001aec:	4b80      	ldr	r3, [pc, #512]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a7f      	ldr	r2, [pc, #508]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001af2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af6:	6013      	str	r3, [r2, #0]
 8001af8:	e02e      	b.n	8001b58 <HAL_RCC_OscConfig+0xd4>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d10c      	bne.n	8001b1c <HAL_RCC_OscConfig+0x98>
 8001b02:	4b7b      	ldr	r3, [pc, #492]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a7a      	ldr	r2, [pc, #488]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001b08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	4b78      	ldr	r3, [pc, #480]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a77      	ldr	r2, [pc, #476]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	e01d      	b.n	8001b58 <HAL_RCC_OscConfig+0xd4>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b24:	d10c      	bne.n	8001b40 <HAL_RCC_OscConfig+0xbc>
 8001b26:	4b72      	ldr	r3, [pc, #456]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a71      	ldr	r2, [pc, #452]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001b2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b30:	6013      	str	r3, [r2, #0]
 8001b32:	4b6f      	ldr	r3, [pc, #444]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a6e      	ldr	r2, [pc, #440]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b3c:	6013      	str	r3, [r2, #0]
 8001b3e:	e00b      	b.n	8001b58 <HAL_RCC_OscConfig+0xd4>
 8001b40:	4b6b      	ldr	r3, [pc, #428]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a6a      	ldr	r2, [pc, #424]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001b46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b4a:	6013      	str	r3, [r2, #0]
 8001b4c:	4b68      	ldr	r3, [pc, #416]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a67      	ldr	r2, [pc, #412]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001b52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b56:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d013      	beq.n	8001b88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b60:	f7ff fcb6 	bl	80014d0 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b68:	f7ff fcb2 	bl	80014d0 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b64      	cmp	r3, #100	; 0x64
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e1fa      	b.n	8001f70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7a:	4b5d      	ldr	r3, [pc, #372]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0f0      	beq.n	8001b68 <HAL_RCC_OscConfig+0xe4>
 8001b86:	e014      	b.n	8001bb2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b88:	f7ff fca2 	bl	80014d0 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b90:	f7ff fc9e 	bl	80014d0 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b64      	cmp	r3, #100	; 0x64
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e1e6      	b.n	8001f70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ba2:	4b53      	ldr	r3, [pc, #332]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1f0      	bne.n	8001b90 <HAL_RCC_OscConfig+0x10c>
 8001bae:	e000      	b.n	8001bb2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d063      	beq.n	8001c86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bbe:	4b4c      	ldr	r3, [pc, #304]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f003 030c 	and.w	r3, r3, #12
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d00b      	beq.n	8001be2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bca:	4b49      	ldr	r3, [pc, #292]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f003 030c 	and.w	r3, r3, #12
 8001bd2:	2b08      	cmp	r3, #8
 8001bd4:	d11c      	bne.n	8001c10 <HAL_RCC_OscConfig+0x18c>
 8001bd6:	4b46      	ldr	r3, [pc, #280]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d116      	bne.n	8001c10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001be2:	4b43      	ldr	r3, [pc, #268]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d005      	beq.n	8001bfa <HAL_RCC_OscConfig+0x176>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d001      	beq.n	8001bfa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e1ba      	b.n	8001f70 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bfa:	4b3d      	ldr	r3, [pc, #244]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	4939      	ldr	r1, [pc, #228]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c0e:	e03a      	b.n	8001c86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d020      	beq.n	8001c5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c18:	4b36      	ldr	r3, [pc, #216]	; (8001cf4 <HAL_RCC_OscConfig+0x270>)
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1e:	f7ff fc57 	bl	80014d0 <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c24:	e008      	b.n	8001c38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c26:	f7ff fc53 	bl	80014d0 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e19b      	b.n	8001f70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c38:	4b2d      	ldr	r3, [pc, #180]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d0f0      	beq.n	8001c26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c44:	4b2a      	ldr	r3, [pc, #168]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	4927      	ldr	r1, [pc, #156]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	600b      	str	r3, [r1, #0]
 8001c58:	e015      	b.n	8001c86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c5a:	4b26      	ldr	r3, [pc, #152]	; (8001cf4 <HAL_RCC_OscConfig+0x270>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c60:	f7ff fc36 	bl	80014d0 <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c68:	f7ff fc32 	bl	80014d0 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e17a      	b.n	8001f70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c7a:	4b1d      	ldr	r3, [pc, #116]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1f0      	bne.n	8001c68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d03a      	beq.n	8001d08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d019      	beq.n	8001cce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c9a:	4b17      	ldr	r3, [pc, #92]	; (8001cf8 <HAL_RCC_OscConfig+0x274>)
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca0:	f7ff fc16 	bl	80014d0 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ca8:	f7ff fc12 	bl	80014d0 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e15a      	b.n	8001f70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cba:	4b0d      	ldr	r3, [pc, #52]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0f0      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cc6:	2001      	movs	r0, #1
 8001cc8:	f000 fa9a 	bl	8002200 <RCC_Delay>
 8001ccc:	e01c      	b.n	8001d08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cce:	4b0a      	ldr	r3, [pc, #40]	; (8001cf8 <HAL_RCC_OscConfig+0x274>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd4:	f7ff fbfc 	bl	80014d0 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cda:	e00f      	b.n	8001cfc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cdc:	f7ff fbf8 	bl	80014d0 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d908      	bls.n	8001cfc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e140      	b.n	8001f70 <HAL_RCC_OscConfig+0x4ec>
 8001cee:	bf00      	nop
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	42420000 	.word	0x42420000
 8001cf8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cfc:	4b9e      	ldr	r3, [pc, #632]	; (8001f78 <HAL_RCC_OscConfig+0x4f4>)
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1e9      	bne.n	8001cdc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0304 	and.w	r3, r3, #4
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	f000 80a6 	beq.w	8001e62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d16:	2300      	movs	r3, #0
 8001d18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d1a:	4b97      	ldr	r3, [pc, #604]	; (8001f78 <HAL_RCC_OscConfig+0x4f4>)
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d10d      	bne.n	8001d42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d26:	4b94      	ldr	r3, [pc, #592]	; (8001f78 <HAL_RCC_OscConfig+0x4f4>)
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	4a93      	ldr	r2, [pc, #588]	; (8001f78 <HAL_RCC_OscConfig+0x4f4>)
 8001d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d30:	61d3      	str	r3, [r2, #28]
 8001d32:	4b91      	ldr	r3, [pc, #580]	; (8001f78 <HAL_RCC_OscConfig+0x4f4>)
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3a:	60bb      	str	r3, [r7, #8]
 8001d3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d42:	4b8e      	ldr	r3, [pc, #568]	; (8001f7c <HAL_RCC_OscConfig+0x4f8>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d118      	bne.n	8001d80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d4e:	4b8b      	ldr	r3, [pc, #556]	; (8001f7c <HAL_RCC_OscConfig+0x4f8>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a8a      	ldr	r2, [pc, #552]	; (8001f7c <HAL_RCC_OscConfig+0x4f8>)
 8001d54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d5a:	f7ff fbb9 	bl	80014d0 <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d60:	e008      	b.n	8001d74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d62:	f7ff fbb5 	bl	80014d0 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b64      	cmp	r3, #100	; 0x64
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e0fd      	b.n	8001f70 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d74:	4b81      	ldr	r3, [pc, #516]	; (8001f7c <HAL_RCC_OscConfig+0x4f8>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0f0      	beq.n	8001d62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d106      	bne.n	8001d96 <HAL_RCC_OscConfig+0x312>
 8001d88:	4b7b      	ldr	r3, [pc, #492]	; (8001f78 <HAL_RCC_OscConfig+0x4f4>)
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	4a7a      	ldr	r2, [pc, #488]	; (8001f78 <HAL_RCC_OscConfig+0x4f4>)
 8001d8e:	f043 0301 	orr.w	r3, r3, #1
 8001d92:	6213      	str	r3, [r2, #32]
 8001d94:	e02d      	b.n	8001df2 <HAL_RCC_OscConfig+0x36e>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d10c      	bne.n	8001db8 <HAL_RCC_OscConfig+0x334>
 8001d9e:	4b76      	ldr	r3, [pc, #472]	; (8001f78 <HAL_RCC_OscConfig+0x4f4>)
 8001da0:	6a1b      	ldr	r3, [r3, #32]
 8001da2:	4a75      	ldr	r2, [pc, #468]	; (8001f78 <HAL_RCC_OscConfig+0x4f4>)
 8001da4:	f023 0301 	bic.w	r3, r3, #1
 8001da8:	6213      	str	r3, [r2, #32]
 8001daa:	4b73      	ldr	r3, [pc, #460]	; (8001f78 <HAL_RCC_OscConfig+0x4f4>)
 8001dac:	6a1b      	ldr	r3, [r3, #32]
 8001dae:	4a72      	ldr	r2, [pc, #456]	; (8001f78 <HAL_RCC_OscConfig+0x4f4>)
 8001db0:	f023 0304 	bic.w	r3, r3, #4
 8001db4:	6213      	str	r3, [r2, #32]
 8001db6:	e01c      	b.n	8001df2 <HAL_RCC_OscConfig+0x36e>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	2b05      	cmp	r3, #5
 8001dbe:	d10c      	bne.n	8001dda <HAL_RCC_OscConfig+0x356>
 8001dc0:	4b6d      	ldr	r3, [pc, #436]	; (8001f78 <HAL_RCC_OscConfig+0x4f4>)
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	4a6c      	ldr	r2, [pc, #432]	; (8001f78 <HAL_RCC_OscConfig+0x4f4>)
 8001dc6:	f043 0304 	orr.w	r3, r3, #4
 8001dca:	6213      	str	r3, [r2, #32]
 8001dcc:	4b6a      	ldr	r3, [pc, #424]	; (8001f78 <HAL_RCC_OscConfig+0x4f4>)
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	4a69      	ldr	r2, [pc, #420]	; (8001f78 <HAL_RCC_OscConfig+0x4f4>)
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	6213      	str	r3, [r2, #32]
 8001dd8:	e00b      	b.n	8001df2 <HAL_RCC_OscConfig+0x36e>
 8001dda:	4b67      	ldr	r3, [pc, #412]	; (8001f78 <HAL_RCC_OscConfig+0x4f4>)
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
 8001dde:	4a66      	ldr	r2, [pc, #408]	; (8001f78 <HAL_RCC_OscConfig+0x4f4>)
 8001de0:	f023 0301 	bic.w	r3, r3, #1
 8001de4:	6213      	str	r3, [r2, #32]
 8001de6:	4b64      	ldr	r3, [pc, #400]	; (8001f78 <HAL_RCC_OscConfig+0x4f4>)
 8001de8:	6a1b      	ldr	r3, [r3, #32]
 8001dea:	4a63      	ldr	r2, [pc, #396]	; (8001f78 <HAL_RCC_OscConfig+0x4f4>)
 8001dec:	f023 0304 	bic.w	r3, r3, #4
 8001df0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d015      	beq.n	8001e26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dfa:	f7ff fb69 	bl	80014d0 <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e00:	e00a      	b.n	8001e18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e02:	f7ff fb65 	bl	80014d0 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e0ab      	b.n	8001f70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e18:	4b57      	ldr	r3, [pc, #348]	; (8001f78 <HAL_RCC_OscConfig+0x4f4>)
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d0ee      	beq.n	8001e02 <HAL_RCC_OscConfig+0x37e>
 8001e24:	e014      	b.n	8001e50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e26:	f7ff fb53 	bl	80014d0 <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e2c:	e00a      	b.n	8001e44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e2e:	f7ff fb4f 	bl	80014d0 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e095      	b.n	8001f70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e44:	4b4c      	ldr	r3, [pc, #304]	; (8001f78 <HAL_RCC_OscConfig+0x4f4>)
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1ee      	bne.n	8001e2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e50:	7dfb      	ldrb	r3, [r7, #23]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d105      	bne.n	8001e62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e56:	4b48      	ldr	r3, [pc, #288]	; (8001f78 <HAL_RCC_OscConfig+0x4f4>)
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	4a47      	ldr	r2, [pc, #284]	; (8001f78 <HAL_RCC_OscConfig+0x4f4>)
 8001e5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f000 8081 	beq.w	8001f6e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e6c:	4b42      	ldr	r3, [pc, #264]	; (8001f78 <HAL_RCC_OscConfig+0x4f4>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 030c 	and.w	r3, r3, #12
 8001e74:	2b08      	cmp	r3, #8
 8001e76:	d061      	beq.n	8001f3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	69db      	ldr	r3, [r3, #28]
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d146      	bne.n	8001f0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e80:	4b3f      	ldr	r3, [pc, #252]	; (8001f80 <HAL_RCC_OscConfig+0x4fc>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e86:	f7ff fb23 	bl	80014d0 <HAL_GetTick>
 8001e8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e8c:	e008      	b.n	8001ea0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e8e:	f7ff fb1f 	bl	80014d0 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e067      	b.n	8001f70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ea0:	4b35      	ldr	r3, [pc, #212]	; (8001f78 <HAL_RCC_OscConfig+0x4f4>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1f0      	bne.n	8001e8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb4:	d108      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001eb6:	4b30      	ldr	r3, [pc, #192]	; (8001f78 <HAL_RCC_OscConfig+0x4f4>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	492d      	ldr	r1, [pc, #180]	; (8001f78 <HAL_RCC_OscConfig+0x4f4>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ec8:	4b2b      	ldr	r3, [pc, #172]	; (8001f78 <HAL_RCC_OscConfig+0x4f4>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a19      	ldr	r1, [r3, #32]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed8:	430b      	orrs	r3, r1
 8001eda:	4927      	ldr	r1, [pc, #156]	; (8001f78 <HAL_RCC_OscConfig+0x4f4>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ee0:	4b27      	ldr	r3, [pc, #156]	; (8001f80 <HAL_RCC_OscConfig+0x4fc>)
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee6:	f7ff faf3 	bl	80014d0 <HAL_GetTick>
 8001eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eec:	e008      	b.n	8001f00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eee:	f7ff faef 	bl	80014d0 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e037      	b.n	8001f70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f00:	4b1d      	ldr	r3, [pc, #116]	; (8001f78 <HAL_RCC_OscConfig+0x4f4>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d0f0      	beq.n	8001eee <HAL_RCC_OscConfig+0x46a>
 8001f0c:	e02f      	b.n	8001f6e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f0e:	4b1c      	ldr	r3, [pc, #112]	; (8001f80 <HAL_RCC_OscConfig+0x4fc>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f14:	f7ff fadc 	bl	80014d0 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f1c:	f7ff fad8 	bl	80014d0 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e020      	b.n	8001f70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f2e:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <HAL_RCC_OscConfig+0x4f4>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1f0      	bne.n	8001f1c <HAL_RCC_OscConfig+0x498>
 8001f3a:	e018      	b.n	8001f6e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	69db      	ldr	r3, [r3, #28]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d101      	bne.n	8001f48 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e013      	b.n	8001f70 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f48:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <HAL_RCC_OscConfig+0x4f4>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d106      	bne.n	8001f6a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d001      	beq.n	8001f6e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e000      	b.n	8001f70 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3718      	adds	r7, #24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	40007000 	.word	0x40007000
 8001f80:	42420060 	.word	0x42420060

08001f84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e0d0      	b.n	800213a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f98:	4b6a      	ldr	r3, [pc, #424]	; (8002144 <HAL_RCC_ClockConfig+0x1c0>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d910      	bls.n	8001fc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa6:	4b67      	ldr	r3, [pc, #412]	; (8002144 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f023 0207 	bic.w	r2, r3, #7
 8001fae:	4965      	ldr	r1, [pc, #404]	; (8002144 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb6:	4b63      	ldr	r3, [pc, #396]	; (8002144 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d001      	beq.n	8001fc8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e0b8      	b.n	800213a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d020      	beq.n	8002016 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d005      	beq.n	8001fec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fe0:	4b59      	ldr	r3, [pc, #356]	; (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	4a58      	ldr	r2, [pc, #352]	; (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0308 	and.w	r3, r3, #8
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d005      	beq.n	8002004 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ff8:	4b53      	ldr	r3, [pc, #332]	; (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	4a52      	ldr	r2, [pc, #328]	; (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002002:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002004:	4b50      	ldr	r3, [pc, #320]	; (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	494d      	ldr	r1, [pc, #308]	; (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 8002012:	4313      	orrs	r3, r2
 8002014:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b00      	cmp	r3, #0
 8002020:	d040      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d107      	bne.n	800203a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800202a:	4b47      	ldr	r3, [pc, #284]	; (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d115      	bne.n	8002062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e07f      	b.n	800213a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b02      	cmp	r3, #2
 8002040:	d107      	bne.n	8002052 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002042:	4b41      	ldr	r3, [pc, #260]	; (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d109      	bne.n	8002062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e073      	b.n	800213a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002052:	4b3d      	ldr	r3, [pc, #244]	; (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e06b      	b.n	800213a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002062:	4b39      	ldr	r3, [pc, #228]	; (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f023 0203 	bic.w	r2, r3, #3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	4936      	ldr	r1, [pc, #216]	; (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 8002070:	4313      	orrs	r3, r2
 8002072:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002074:	f7ff fa2c 	bl	80014d0 <HAL_GetTick>
 8002078:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800207a:	e00a      	b.n	8002092 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800207c:	f7ff fa28 	bl	80014d0 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	f241 3288 	movw	r2, #5000	; 0x1388
 800208a:	4293      	cmp	r3, r2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e053      	b.n	800213a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002092:	4b2d      	ldr	r3, [pc, #180]	; (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f003 020c 	and.w	r2, r3, #12
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d1eb      	bne.n	800207c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020a4:	4b27      	ldr	r3, [pc, #156]	; (8002144 <HAL_RCC_ClockConfig+0x1c0>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0307 	and.w	r3, r3, #7
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d210      	bcs.n	80020d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020b2:	4b24      	ldr	r3, [pc, #144]	; (8002144 <HAL_RCC_ClockConfig+0x1c0>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f023 0207 	bic.w	r2, r3, #7
 80020ba:	4922      	ldr	r1, [pc, #136]	; (8002144 <HAL_RCC_ClockConfig+0x1c0>)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	4313      	orrs	r3, r2
 80020c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020c2:	4b20      	ldr	r3, [pc, #128]	; (8002144 <HAL_RCC_ClockConfig+0x1c0>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d001      	beq.n	80020d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e032      	b.n	800213a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d008      	beq.n	80020f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020e0:	4b19      	ldr	r3, [pc, #100]	; (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	4916      	ldr	r1, [pc, #88]	; (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0308 	and.w	r3, r3, #8
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d009      	beq.n	8002112 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020fe:	4b12      	ldr	r3, [pc, #72]	; (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	490e      	ldr	r1, [pc, #56]	; (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 800210e:	4313      	orrs	r3, r2
 8002110:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002112:	f000 f821 	bl	8002158 <HAL_RCC_GetSysClockFreq>
 8002116:	4602      	mov	r2, r0
 8002118:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	091b      	lsrs	r3, r3, #4
 800211e:	f003 030f 	and.w	r3, r3, #15
 8002122:	490a      	ldr	r1, [pc, #40]	; (800214c <HAL_RCC_ClockConfig+0x1c8>)
 8002124:	5ccb      	ldrb	r3, [r1, r3]
 8002126:	fa22 f303 	lsr.w	r3, r2, r3
 800212a:	4a09      	ldr	r2, [pc, #36]	; (8002150 <HAL_RCC_ClockConfig+0x1cc>)
 800212c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800212e:	4b09      	ldr	r3, [pc, #36]	; (8002154 <HAL_RCC_ClockConfig+0x1d0>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff f98a 	bl	800144c <HAL_InitTick>

  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40022000 	.word	0x40022000
 8002148:	40021000 	.word	0x40021000
 800214c:	08002a64 	.word	0x08002a64
 8002150:	20000054 	.word	0x20000054
 8002154:	20000058 	.word	0x20000058

08002158 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002158:	b480      	push	{r7}
 800215a:	b087      	sub	sp, #28
 800215c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800215e:	2300      	movs	r3, #0
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	2300      	movs	r3, #0
 8002164:	60bb      	str	r3, [r7, #8]
 8002166:	2300      	movs	r3, #0
 8002168:	617b      	str	r3, [r7, #20]
 800216a:	2300      	movs	r3, #0
 800216c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800216e:	2300      	movs	r3, #0
 8002170:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002172:	4b1e      	ldr	r3, [pc, #120]	; (80021ec <HAL_RCC_GetSysClockFreq+0x94>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f003 030c 	and.w	r3, r3, #12
 800217e:	2b04      	cmp	r3, #4
 8002180:	d002      	beq.n	8002188 <HAL_RCC_GetSysClockFreq+0x30>
 8002182:	2b08      	cmp	r3, #8
 8002184:	d003      	beq.n	800218e <HAL_RCC_GetSysClockFreq+0x36>
 8002186:	e027      	b.n	80021d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002188:	4b19      	ldr	r3, [pc, #100]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800218a:	613b      	str	r3, [r7, #16]
      break;
 800218c:	e027      	b.n	80021de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	0c9b      	lsrs	r3, r3, #18
 8002192:	f003 030f 	and.w	r3, r3, #15
 8002196:	4a17      	ldr	r2, [pc, #92]	; (80021f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002198:	5cd3      	ldrb	r3, [r2, r3]
 800219a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d010      	beq.n	80021c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021a6:	4b11      	ldr	r3, [pc, #68]	; (80021ec <HAL_RCC_GetSysClockFreq+0x94>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	0c5b      	lsrs	r3, r3, #17
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	4a11      	ldr	r2, [pc, #68]	; (80021f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80021b2:	5cd3      	ldrb	r3, [r2, r3]
 80021b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a0d      	ldr	r2, [pc, #52]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80021ba:	fb02 f203 	mul.w	r2, r2, r3
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c4:	617b      	str	r3, [r7, #20]
 80021c6:	e004      	b.n	80021d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a0c      	ldr	r2, [pc, #48]	; (80021fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80021cc:	fb02 f303 	mul.w	r3, r2, r3
 80021d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	613b      	str	r3, [r7, #16]
      break;
 80021d6:	e002      	b.n	80021de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021d8:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80021da:	613b      	str	r3, [r7, #16]
      break;
 80021dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021de:	693b      	ldr	r3, [r7, #16]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	371c      	adds	r7, #28
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	40021000 	.word	0x40021000
 80021f0:	007a1200 	.word	0x007a1200
 80021f4:	08002a74 	.word	0x08002a74
 80021f8:	08002a84 	.word	0x08002a84
 80021fc:	003d0900 	.word	0x003d0900

08002200 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002208:	4b0a      	ldr	r3, [pc, #40]	; (8002234 <RCC_Delay+0x34>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a0a      	ldr	r2, [pc, #40]	; (8002238 <RCC_Delay+0x38>)
 800220e:	fba2 2303 	umull	r2, r3, r2, r3
 8002212:	0a5b      	lsrs	r3, r3, #9
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	fb02 f303 	mul.w	r3, r2, r3
 800221a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800221c:	bf00      	nop
  }
  while (Delay --);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	1e5a      	subs	r2, r3, #1
 8002222:	60fa      	str	r2, [r7, #12]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1f9      	bne.n	800221c <RCC_Delay+0x1c>
}
 8002228:	bf00      	nop
 800222a:	bf00      	nop
 800222c:	3714      	adds	r7, #20
 800222e:	46bd      	mov	sp, r7
 8002230:	bc80      	pop	{r7}
 8002232:	4770      	bx	lr
 8002234:	20000054 	.word	0x20000054
 8002238:	10624dd3 	.word	0x10624dd3

0800223c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e041      	b.n	80022d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d106      	bne.n	8002268 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f7fe ff04 	bl	8001070 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2202      	movs	r2, #2
 800226c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3304      	adds	r3, #4
 8002278:	4619      	mov	r1, r3
 800227a:	4610      	mov	r0, r2
 800227c:	f000 fa56 	bl	800272c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
	...

080022dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d001      	beq.n	80022f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e035      	b.n	8002360 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2202      	movs	r2, #2
 80022f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68da      	ldr	r2, [r3, #12]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0201 	orr.w	r2, r2, #1
 800230a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a16      	ldr	r2, [pc, #88]	; (800236c <HAL_TIM_Base_Start_IT+0x90>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d009      	beq.n	800232a <HAL_TIM_Base_Start_IT+0x4e>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800231e:	d004      	beq.n	800232a <HAL_TIM_Base_Start_IT+0x4e>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a12      	ldr	r2, [pc, #72]	; (8002370 <HAL_TIM_Base_Start_IT+0x94>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d111      	bne.n	800234e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2b06      	cmp	r3, #6
 800233a:	d010      	beq.n	800235e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f042 0201 	orr.w	r2, r2, #1
 800234a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800234c:	e007      	b.n	800235e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f042 0201 	orr.w	r2, r2, #1
 800235c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	bc80      	pop	{r7}
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	40012c00 	.word	0x40012c00
 8002370:	40000400 	.word	0x40000400

08002374 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d020      	beq.n	80023d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d01b      	beq.n	80023d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f06f 0202 	mvn.w	r2, #2
 80023a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2201      	movs	r2, #1
 80023ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	f003 0303 	and.w	r3, r3, #3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 f998 	bl	80026f4 <HAL_TIM_IC_CaptureCallback>
 80023c4:	e005      	b.n	80023d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f98b 	bl	80026e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f000 f99a 	bl	8002706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	f003 0304 	and.w	r3, r3, #4
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d020      	beq.n	8002424 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d01b      	beq.n	8002424 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f06f 0204 	mvn.w	r2, #4
 80023f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2202      	movs	r2, #2
 80023fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 f972 	bl	80026f4 <HAL_TIM_IC_CaptureCallback>
 8002410:	e005      	b.n	800241e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f965 	bl	80026e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 f974 	bl	8002706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	2b00      	cmp	r3, #0
 800242c:	d020      	beq.n	8002470 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f003 0308 	and.w	r3, r3, #8
 8002434:	2b00      	cmp	r3, #0
 8002436:	d01b      	beq.n	8002470 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f06f 0208 	mvn.w	r2, #8
 8002440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2204      	movs	r2, #4
 8002446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 f94c 	bl	80026f4 <HAL_TIM_IC_CaptureCallback>
 800245c:	e005      	b.n	800246a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 f93f 	bl	80026e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 f94e 	bl	8002706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	f003 0310 	and.w	r3, r3, #16
 8002476:	2b00      	cmp	r3, #0
 8002478:	d020      	beq.n	80024bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f003 0310 	and.w	r3, r3, #16
 8002480:	2b00      	cmp	r3, #0
 8002482:	d01b      	beq.n	80024bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f06f 0210 	mvn.w	r2, #16
 800248c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2208      	movs	r2, #8
 8002492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 f926 	bl	80026f4 <HAL_TIM_IC_CaptureCallback>
 80024a8:	e005      	b.n	80024b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 f919 	bl	80026e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 f928 	bl	8002706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00c      	beq.n	80024e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d007      	beq.n	80024e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f06f 0201 	mvn.w	r2, #1
 80024d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7fe fd3c 	bl	8000f58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00c      	beq.n	8002504 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d007      	beq.n	8002504 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 fa6f 	bl	80029e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00c      	beq.n	8002528 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002514:	2b00      	cmp	r3, #0
 8002516:	d007      	beq.n	8002528 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f8f8 	bl	8002718 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	f003 0320 	and.w	r3, r3, #32
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00c      	beq.n	800254c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f003 0320 	and.w	r3, r3, #32
 8002538:	2b00      	cmp	r3, #0
 800253a:	d007      	beq.n	800254c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f06f 0220 	mvn.w	r2, #32
 8002544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 fa42 	bl	80029d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800254c:	bf00      	nop
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800255e:	2300      	movs	r3, #0
 8002560:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002568:	2b01      	cmp	r3, #1
 800256a:	d101      	bne.n	8002570 <HAL_TIM_ConfigClockSource+0x1c>
 800256c:	2302      	movs	r3, #2
 800256e:	e0b4      	b.n	80026da <HAL_TIM_ConfigClockSource+0x186>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2202      	movs	r2, #2
 800257c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800258e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002596:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68ba      	ldr	r2, [r7, #8]
 800259e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025a8:	d03e      	beq.n	8002628 <HAL_TIM_ConfigClockSource+0xd4>
 80025aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025ae:	f200 8087 	bhi.w	80026c0 <HAL_TIM_ConfigClockSource+0x16c>
 80025b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025b6:	f000 8086 	beq.w	80026c6 <HAL_TIM_ConfigClockSource+0x172>
 80025ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025be:	d87f      	bhi.n	80026c0 <HAL_TIM_ConfigClockSource+0x16c>
 80025c0:	2b70      	cmp	r3, #112	; 0x70
 80025c2:	d01a      	beq.n	80025fa <HAL_TIM_ConfigClockSource+0xa6>
 80025c4:	2b70      	cmp	r3, #112	; 0x70
 80025c6:	d87b      	bhi.n	80026c0 <HAL_TIM_ConfigClockSource+0x16c>
 80025c8:	2b60      	cmp	r3, #96	; 0x60
 80025ca:	d050      	beq.n	800266e <HAL_TIM_ConfigClockSource+0x11a>
 80025cc:	2b60      	cmp	r3, #96	; 0x60
 80025ce:	d877      	bhi.n	80026c0 <HAL_TIM_ConfigClockSource+0x16c>
 80025d0:	2b50      	cmp	r3, #80	; 0x50
 80025d2:	d03c      	beq.n	800264e <HAL_TIM_ConfigClockSource+0xfa>
 80025d4:	2b50      	cmp	r3, #80	; 0x50
 80025d6:	d873      	bhi.n	80026c0 <HAL_TIM_ConfigClockSource+0x16c>
 80025d8:	2b40      	cmp	r3, #64	; 0x40
 80025da:	d058      	beq.n	800268e <HAL_TIM_ConfigClockSource+0x13a>
 80025dc:	2b40      	cmp	r3, #64	; 0x40
 80025de:	d86f      	bhi.n	80026c0 <HAL_TIM_ConfigClockSource+0x16c>
 80025e0:	2b30      	cmp	r3, #48	; 0x30
 80025e2:	d064      	beq.n	80026ae <HAL_TIM_ConfigClockSource+0x15a>
 80025e4:	2b30      	cmp	r3, #48	; 0x30
 80025e6:	d86b      	bhi.n	80026c0 <HAL_TIM_ConfigClockSource+0x16c>
 80025e8:	2b20      	cmp	r3, #32
 80025ea:	d060      	beq.n	80026ae <HAL_TIM_ConfigClockSource+0x15a>
 80025ec:	2b20      	cmp	r3, #32
 80025ee:	d867      	bhi.n	80026c0 <HAL_TIM_ConfigClockSource+0x16c>
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d05c      	beq.n	80026ae <HAL_TIM_ConfigClockSource+0x15a>
 80025f4:	2b10      	cmp	r3, #16
 80025f6:	d05a      	beq.n	80026ae <HAL_TIM_ConfigClockSource+0x15a>
 80025f8:	e062      	b.n	80026c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6818      	ldr	r0, [r3, #0]
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	6899      	ldr	r1, [r3, #8]
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685a      	ldr	r2, [r3, #4]
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	f000 f96a 	bl	80028e2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800261c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68ba      	ldr	r2, [r7, #8]
 8002624:	609a      	str	r2, [r3, #8]
      break;
 8002626:	e04f      	b.n	80026c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6818      	ldr	r0, [r3, #0]
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	6899      	ldr	r1, [r3, #8]
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	f000 f953 	bl	80028e2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	689a      	ldr	r2, [r3, #8]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800264a:	609a      	str	r2, [r3, #8]
      break;
 800264c:	e03c      	b.n	80026c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6818      	ldr	r0, [r3, #0]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	6859      	ldr	r1, [r3, #4]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	461a      	mov	r2, r3
 800265c:	f000 f8ca 	bl	80027f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2150      	movs	r1, #80	; 0x50
 8002666:	4618      	mov	r0, r3
 8002668:	f000 f921 	bl	80028ae <TIM_ITRx_SetConfig>
      break;
 800266c:	e02c      	b.n	80026c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6818      	ldr	r0, [r3, #0]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	6859      	ldr	r1, [r3, #4]
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	461a      	mov	r2, r3
 800267c:	f000 f8e8 	bl	8002850 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2160      	movs	r1, #96	; 0x60
 8002686:	4618      	mov	r0, r3
 8002688:	f000 f911 	bl	80028ae <TIM_ITRx_SetConfig>
      break;
 800268c:	e01c      	b.n	80026c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6818      	ldr	r0, [r3, #0]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	6859      	ldr	r1, [r3, #4]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	461a      	mov	r2, r3
 800269c:	f000 f8aa 	bl	80027f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2140      	movs	r1, #64	; 0x40
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 f901 	bl	80028ae <TIM_ITRx_SetConfig>
      break;
 80026ac:	e00c      	b.n	80026c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4619      	mov	r1, r3
 80026b8:	4610      	mov	r0, r2
 80026ba:	f000 f8f8 	bl	80028ae <TIM_ITRx_SetConfig>
      break;
 80026be:	e003      	b.n	80026c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	73fb      	strb	r3, [r7, #15]
      break;
 80026c4:	e000      	b.n	80026c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80026c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr

080026f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	bc80      	pop	{r7}
 8002704:	4770      	bx	lr

08002706 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr

08002718 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	bc80      	pop	{r7}
 8002728:	4770      	bx	lr
	...

0800272c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a2b      	ldr	r2, [pc, #172]	; (80027ec <TIM_Base_SetConfig+0xc0>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d007      	beq.n	8002754 <TIM_Base_SetConfig+0x28>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800274a:	d003      	beq.n	8002754 <TIM_Base_SetConfig+0x28>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a28      	ldr	r2, [pc, #160]	; (80027f0 <TIM_Base_SetConfig+0xc4>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d108      	bne.n	8002766 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800275a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	4313      	orrs	r3, r2
 8002764:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a20      	ldr	r2, [pc, #128]	; (80027ec <TIM_Base_SetConfig+0xc0>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d007      	beq.n	800277e <TIM_Base_SetConfig+0x52>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002774:	d003      	beq.n	800277e <TIM_Base_SetConfig+0x52>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a1d      	ldr	r2, [pc, #116]	; (80027f0 <TIM_Base_SetConfig+0xc4>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d108      	bne.n	8002790 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002784:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	4313      	orrs	r3, r2
 800278e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	4313      	orrs	r3, r2
 800279c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a0d      	ldr	r2, [pc, #52]	; (80027ec <TIM_Base_SetConfig+0xc0>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d103      	bne.n	80027c4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	691a      	ldr	r2, [r3, #16]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d005      	beq.n	80027e2 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	f023 0201 	bic.w	r2, r3, #1
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	611a      	str	r2, [r3, #16]
  }
}
 80027e2:	bf00      	nop
 80027e4:	3714      	adds	r7, #20
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr
 80027ec:	40012c00 	.word	0x40012c00
 80027f0:	40000400 	.word	0x40000400

080027f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b087      	sub	sp, #28
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6a1b      	ldr	r3, [r3, #32]
 8002804:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	f023 0201 	bic.w	r2, r3, #1
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800281e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	011b      	lsls	r3, r3, #4
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	4313      	orrs	r3, r2
 8002828:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	f023 030a 	bic.w	r3, r3, #10
 8002830:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	4313      	orrs	r3, r2
 8002838:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	621a      	str	r2, [r3, #32]
}
 8002846:	bf00      	nop
 8002848:	371c      	adds	r7, #28
 800284a:	46bd      	mov	sp, r7
 800284c:	bc80      	pop	{r7}
 800284e:	4770      	bx	lr

08002850 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002850:	b480      	push	{r7}
 8002852:	b087      	sub	sp, #28
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	f023 0210 	bic.w	r2, r3, #16
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800287a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	031b      	lsls	r3, r3, #12
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	4313      	orrs	r3, r2
 8002884:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800288c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	011b      	lsls	r3, r3, #4
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	4313      	orrs	r3, r2
 8002896:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	621a      	str	r2, [r3, #32]
}
 80028a4:	bf00      	nop
 80028a6:	371c      	adds	r7, #28
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bc80      	pop	{r7}
 80028ac:	4770      	bx	lr

080028ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b085      	sub	sp, #20
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
 80028b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	f043 0307 	orr.w	r3, r3, #7
 80028d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	609a      	str	r2, [r3, #8]
}
 80028d8:	bf00      	nop
 80028da:	3714      	adds	r7, #20
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr

080028e2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b087      	sub	sp, #28
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	60f8      	str	r0, [r7, #12]
 80028ea:	60b9      	str	r1, [r7, #8]
 80028ec:	607a      	str	r2, [r7, #4]
 80028ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028fc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	021a      	lsls	r2, r3, #8
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	431a      	orrs	r2, r3
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	4313      	orrs	r3, r2
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	4313      	orrs	r3, r2
 800290e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	609a      	str	r2, [r3, #8]
}
 8002916:	bf00      	nop
 8002918:	371c      	adds	r7, #28
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr

08002920 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002930:	2b01      	cmp	r3, #1
 8002932:	d101      	bne.n	8002938 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002934:	2302      	movs	r3, #2
 8002936:	e041      	b.n	80029bc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2202      	movs	r2, #2
 8002944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800295e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	4313      	orrs	r3, r2
 8002968:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a14      	ldr	r2, [pc, #80]	; (80029c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d009      	beq.n	8002990 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002984:	d004      	beq.n	8002990 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a10      	ldr	r2, [pc, #64]	; (80029cc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d10c      	bne.n	80029aa <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002996:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	68ba      	ldr	r2, [r7, #8]
 800299e:	4313      	orrs	r3, r2
 80029a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68ba      	ldr	r2, [r7, #8]
 80029a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bc80      	pop	{r7}
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	40012c00 	.word	0x40012c00
 80029cc:	40000400 	.word	0x40000400

080029d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	bc80      	pop	{r7}
 80029e0:	4770      	bx	lr

080029e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b083      	sub	sp, #12
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr

080029f4 <__libc_init_array>:
 80029f4:	b570      	push	{r4, r5, r6, lr}
 80029f6:	2600      	movs	r6, #0
 80029f8:	4d0c      	ldr	r5, [pc, #48]	; (8002a2c <__libc_init_array+0x38>)
 80029fa:	4c0d      	ldr	r4, [pc, #52]	; (8002a30 <__libc_init_array+0x3c>)
 80029fc:	1b64      	subs	r4, r4, r5
 80029fe:	10a4      	asrs	r4, r4, #2
 8002a00:	42a6      	cmp	r6, r4
 8002a02:	d109      	bne.n	8002a18 <__libc_init_array+0x24>
 8002a04:	f000 f822 	bl	8002a4c <_init>
 8002a08:	2600      	movs	r6, #0
 8002a0a:	4d0a      	ldr	r5, [pc, #40]	; (8002a34 <__libc_init_array+0x40>)
 8002a0c:	4c0a      	ldr	r4, [pc, #40]	; (8002a38 <__libc_init_array+0x44>)
 8002a0e:	1b64      	subs	r4, r4, r5
 8002a10:	10a4      	asrs	r4, r4, #2
 8002a12:	42a6      	cmp	r6, r4
 8002a14:	d105      	bne.n	8002a22 <__libc_init_array+0x2e>
 8002a16:	bd70      	pop	{r4, r5, r6, pc}
 8002a18:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a1c:	4798      	blx	r3
 8002a1e:	3601      	adds	r6, #1
 8002a20:	e7ee      	b.n	8002a00 <__libc_init_array+0xc>
 8002a22:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a26:	4798      	blx	r3
 8002a28:	3601      	adds	r6, #1
 8002a2a:	e7f2      	b.n	8002a12 <__libc_init_array+0x1e>
 8002a2c:	08002a88 	.word	0x08002a88
 8002a30:	08002a88 	.word	0x08002a88
 8002a34:	08002a88 	.word	0x08002a88
 8002a38:	08002a8c 	.word	0x08002a8c

08002a3c <memset>:
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	4402      	add	r2, r0
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d100      	bne.n	8002a46 <memset+0xa>
 8002a44:	4770      	bx	lr
 8002a46:	f803 1b01 	strb.w	r1, [r3], #1
 8002a4a:	e7f9      	b.n	8002a40 <memset+0x4>

08002a4c <_init>:
 8002a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a4e:	bf00      	nop
 8002a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a52:	bc08      	pop	{r3}
 8002a54:	469e      	mov	lr, r3
 8002a56:	4770      	bx	lr

08002a58 <_fini>:
 8002a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a5a:	bf00      	nop
 8002a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a5e:	bc08      	pop	{r3}
 8002a60:	469e      	mov	lr, r3
 8002a62:	4770      	bx	lr
