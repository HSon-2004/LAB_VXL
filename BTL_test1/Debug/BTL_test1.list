
BTL_test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006048  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08006154  08006154  00016154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061b8  080061b8  000200c4  2**0
                  CONTENTS
  4 .ARM          00000000  080061b8  080061b8  000200c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080061b8  080061b8  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061b8  080061b8  000161b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061bc  080061bc  000161bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  080061c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  200000c4  08006284  000200c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  08006284  000202b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001532f  00000000  00000000  000200ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d79  00000000  00000000  0003541c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a0  00000000  00000000  00038198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f68  00000000  00000000  00039238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001984c  00000000  00000000  0003a1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015576  00000000  00000000  000539ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dc5c  00000000  00000000  00068f62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f6bbe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047c0  00000000  00000000  000f6c14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000c4 	.word	0x200000c4
 8000128:	00000000 	.word	0x00000000
 800012c:	0800613c 	.word	0x0800613c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000c8 	.word	0x200000c8
 8000148:	0800613c 	.word	0x0800613c

0800014c <isButton1Pressed>:
int TimerForKeyPress3 = 200;
int button1_flag = 0;
int button2_flag = 0;
int button3_flag = 0;

int isButton1Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button1_flag ==1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	200000e0 	.word	0x200000e0

08000170 <isButton2Pressed>:

int isButton2Pressed(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button2_flag == 1){
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton2Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton2Pressed+0x16>
		button2_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton2Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton2Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	200000e4 	.word	0x200000e4

08000194 <isButton3Pressed>:

int isButton3Pressed(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(button3_flag == 1){
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton3Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton3Pressed+0x16>
		button3_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton3Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton3Pressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	200000e8 	.word	0x200000e8

080001b8 <getKeyInput>:

void getKeyInput(){
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	Key1Reg[0] = Key1Reg[1];
 80001bc:	4b5c      	ldr	r3, [pc, #368]	; (8000330 <getKeyInput+0x178>)
 80001be:	685b      	ldr	r3, [r3, #4]
 80001c0:	4a5b      	ldr	r2, [pc, #364]	; (8000330 <getKeyInput+0x178>)
 80001c2:	6013      	str	r3, [r2, #0]
	Key1Reg[1] = Key1Reg[2];
 80001c4:	4b5a      	ldr	r3, [pc, #360]	; (8000330 <getKeyInput+0x178>)
 80001c6:	689b      	ldr	r3, [r3, #8]
 80001c8:	4a59      	ldr	r2, [pc, #356]	; (8000330 <getKeyInput+0x178>)
 80001ca:	6053      	str	r3, [r2, #4]
	Key1Reg[2] = HAL_GPIO_ReadPin(A1_GPIO_Port, A1_Pin);
 80001cc:	2102      	movs	r1, #2
 80001ce:	4859      	ldr	r0, [pc, #356]	; (8000334 <getKeyInput+0x17c>)
 80001d0:	f002 f846 	bl	8002260 <HAL_GPIO_ReadPin>
 80001d4:	4603      	mov	r3, r0
 80001d6:	461a      	mov	r2, r3
 80001d8:	4b55      	ldr	r3, [pc, #340]	; (8000330 <getKeyInput+0x178>)
 80001da:	609a      	str	r2, [r3, #8]
	if ((Key1Reg[0] == Key1Reg[1]) && (Key1Reg[1] == Key1Reg[2])){
 80001dc:	4b54      	ldr	r3, [pc, #336]	; (8000330 <getKeyInput+0x178>)
 80001de:	681a      	ldr	r2, [r3, #0]
 80001e0:	4b53      	ldr	r3, [pc, #332]	; (8000330 <getKeyInput+0x178>)
 80001e2:	685b      	ldr	r3, [r3, #4]
 80001e4:	429a      	cmp	r2, r3
 80001e6:	d126      	bne.n	8000236 <getKeyInput+0x7e>
 80001e8:	4b51      	ldr	r3, [pc, #324]	; (8000330 <getKeyInput+0x178>)
 80001ea:	685a      	ldr	r2, [r3, #4]
 80001ec:	4b50      	ldr	r3, [pc, #320]	; (8000330 <getKeyInput+0x178>)
 80001ee:	689b      	ldr	r3, [r3, #8]
 80001f0:	429a      	cmp	r2, r3
 80001f2:	d120      	bne.n	8000236 <getKeyInput+0x7e>
		if (Key1Reg[3] != Key1Reg[2]){
 80001f4:	4b4e      	ldr	r3, [pc, #312]	; (8000330 <getKeyInput+0x178>)
 80001f6:	68da      	ldr	r2, [r3, #12]
 80001f8:	4b4d      	ldr	r3, [pc, #308]	; (8000330 <getKeyInput+0x178>)
 80001fa:	689b      	ldr	r3, [r3, #8]
 80001fc:	429a      	cmp	r2, r3
 80001fe:	d00e      	beq.n	800021e <getKeyInput+0x66>
			Key1Reg[3] = Key1Reg[2];
 8000200:	4b4b      	ldr	r3, [pc, #300]	; (8000330 <getKeyInput+0x178>)
 8000202:	689b      	ldr	r3, [r3, #8]
 8000204:	4a4a      	ldr	r2, [pc, #296]	; (8000330 <getKeyInput+0x178>)
 8000206:	60d3      	str	r3, [r2, #12]
			if (Key1Reg[2] == PRESSED_STATE){
 8000208:	4b49      	ldr	r3, [pc, #292]	; (8000330 <getKeyInput+0x178>)
 800020a:	689b      	ldr	r3, [r3, #8]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d112      	bne.n	8000236 <getKeyInput+0x7e>
				button1_flag = 1;
 8000210:	4b49      	ldr	r3, [pc, #292]	; (8000338 <getKeyInput+0x180>)
 8000212:	2201      	movs	r2, #1
 8000214:	601a      	str	r2, [r3, #0]
				TimerForKeyPress1 = 200;
 8000216:	4b49      	ldr	r3, [pc, #292]	; (800033c <getKeyInput+0x184>)
 8000218:	22c8      	movs	r2, #200	; 0xc8
 800021a:	601a      	str	r2, [r3, #0]
 800021c:	e00b      	b.n	8000236 <getKeyInput+0x7e>
			}
		}
		else{
			TimerForKeyPress1--;
 800021e:	4b47      	ldr	r3, [pc, #284]	; (800033c <getKeyInput+0x184>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	3b01      	subs	r3, #1
 8000224:	4a45      	ldr	r2, [pc, #276]	; (800033c <getKeyInput+0x184>)
 8000226:	6013      	str	r3, [r2, #0]
			if (TimerForKeyPress1 <= 0){
 8000228:	4b44      	ldr	r3, [pc, #272]	; (800033c <getKeyInput+0x184>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	2b00      	cmp	r3, #0
 800022e:	dc02      	bgt.n	8000236 <getKeyInput+0x7e>
				Key1Reg[3] = NORMAL_STATE;
 8000230:	4b3f      	ldr	r3, [pc, #252]	; (8000330 <getKeyInput+0x178>)
 8000232:	2201      	movs	r2, #1
 8000234:	60da      	str	r2, [r3, #12]
			}
		}
	}

	Key2Reg[0] = Key2Reg[1];
 8000236:	4b42      	ldr	r3, [pc, #264]	; (8000340 <getKeyInput+0x188>)
 8000238:	685b      	ldr	r3, [r3, #4]
 800023a:	4a41      	ldr	r2, [pc, #260]	; (8000340 <getKeyInput+0x188>)
 800023c:	6013      	str	r3, [r2, #0]
	Key2Reg[1] = Key2Reg[2];
 800023e:	4b40      	ldr	r3, [pc, #256]	; (8000340 <getKeyInput+0x188>)
 8000240:	689b      	ldr	r3, [r3, #8]
 8000242:	4a3f      	ldr	r2, [pc, #252]	; (8000340 <getKeyInput+0x188>)
 8000244:	6053      	str	r3, [r2, #4]
	Key2Reg[2] = HAL_GPIO_ReadPin(A2_GPIO_Port, A2_Pin);
 8000246:	2110      	movs	r1, #16
 8000248:	483a      	ldr	r0, [pc, #232]	; (8000334 <getKeyInput+0x17c>)
 800024a:	f002 f809 	bl	8002260 <HAL_GPIO_ReadPin>
 800024e:	4603      	mov	r3, r0
 8000250:	461a      	mov	r2, r3
 8000252:	4b3b      	ldr	r3, [pc, #236]	; (8000340 <getKeyInput+0x188>)
 8000254:	609a      	str	r2, [r3, #8]
	if ((Key2Reg[0] == Key2Reg[1]) && (Key2Reg[1] == Key2Reg[2])){
 8000256:	4b3a      	ldr	r3, [pc, #232]	; (8000340 <getKeyInput+0x188>)
 8000258:	681a      	ldr	r2, [r3, #0]
 800025a:	4b39      	ldr	r3, [pc, #228]	; (8000340 <getKeyInput+0x188>)
 800025c:	685b      	ldr	r3, [r3, #4]
 800025e:	429a      	cmp	r2, r3
 8000260:	d126      	bne.n	80002b0 <getKeyInput+0xf8>
 8000262:	4b37      	ldr	r3, [pc, #220]	; (8000340 <getKeyInput+0x188>)
 8000264:	685a      	ldr	r2, [r3, #4]
 8000266:	4b36      	ldr	r3, [pc, #216]	; (8000340 <getKeyInput+0x188>)
 8000268:	689b      	ldr	r3, [r3, #8]
 800026a:	429a      	cmp	r2, r3
 800026c:	d120      	bne.n	80002b0 <getKeyInput+0xf8>
		if (Key2Reg[3] != Key2Reg[2]){
 800026e:	4b34      	ldr	r3, [pc, #208]	; (8000340 <getKeyInput+0x188>)
 8000270:	68da      	ldr	r2, [r3, #12]
 8000272:	4b33      	ldr	r3, [pc, #204]	; (8000340 <getKeyInput+0x188>)
 8000274:	689b      	ldr	r3, [r3, #8]
 8000276:	429a      	cmp	r2, r3
 8000278:	d00e      	beq.n	8000298 <getKeyInput+0xe0>
			Key2Reg[3] = Key2Reg[2];
 800027a:	4b31      	ldr	r3, [pc, #196]	; (8000340 <getKeyInput+0x188>)
 800027c:	689b      	ldr	r3, [r3, #8]
 800027e:	4a30      	ldr	r2, [pc, #192]	; (8000340 <getKeyInput+0x188>)
 8000280:	60d3      	str	r3, [r2, #12]
			if (Key2Reg[2] == PRESSED_STATE){
 8000282:	4b2f      	ldr	r3, [pc, #188]	; (8000340 <getKeyInput+0x188>)
 8000284:	689b      	ldr	r3, [r3, #8]
 8000286:	2b00      	cmp	r3, #0
 8000288:	d112      	bne.n	80002b0 <getKeyInput+0xf8>
				button2_flag = 1;
 800028a:	4b2e      	ldr	r3, [pc, #184]	; (8000344 <getKeyInput+0x18c>)
 800028c:	2201      	movs	r2, #1
 800028e:	601a      	str	r2, [r3, #0]
				TimerForKeyPress2 = 200;
 8000290:	4b2d      	ldr	r3, [pc, #180]	; (8000348 <getKeyInput+0x190>)
 8000292:	22c8      	movs	r2, #200	; 0xc8
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	e00b      	b.n	80002b0 <getKeyInput+0xf8>
			}
		}
		else{
			TimerForKeyPress2--;
 8000298:	4b2b      	ldr	r3, [pc, #172]	; (8000348 <getKeyInput+0x190>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	3b01      	subs	r3, #1
 800029e:	4a2a      	ldr	r2, [pc, #168]	; (8000348 <getKeyInput+0x190>)
 80002a0:	6013      	str	r3, [r2, #0]
			if (TimerForKeyPress2 <= 0){
 80002a2:	4b29      	ldr	r3, [pc, #164]	; (8000348 <getKeyInput+0x190>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	dc02      	bgt.n	80002b0 <getKeyInput+0xf8>
				Key2Reg[3] = NORMAL_STATE;
 80002aa:	4b25      	ldr	r3, [pc, #148]	; (8000340 <getKeyInput+0x188>)
 80002ac:	2201      	movs	r2, #1
 80002ae:	60da      	str	r2, [r3, #12]
			}
		}
	}

	Key3Reg[0] = Key3Reg[1];
 80002b0:	4b26      	ldr	r3, [pc, #152]	; (800034c <getKeyInput+0x194>)
 80002b2:	685b      	ldr	r3, [r3, #4]
 80002b4:	4a25      	ldr	r2, [pc, #148]	; (800034c <getKeyInput+0x194>)
 80002b6:	6013      	str	r3, [r2, #0]
	Key3Reg[1] = Key3Reg[2];
 80002b8:	4b24      	ldr	r3, [pc, #144]	; (800034c <getKeyInput+0x194>)
 80002ba:	689b      	ldr	r3, [r3, #8]
 80002bc:	4a23      	ldr	r2, [pc, #140]	; (800034c <getKeyInput+0x194>)
 80002be:	6053      	str	r3, [r2, #4]
	Key3Reg[2] = HAL_GPIO_ReadPin(A3_GPIO_Port, A3_Pin);
 80002c0:	2101      	movs	r1, #1
 80002c2:	4823      	ldr	r0, [pc, #140]	; (8000350 <getKeyInput+0x198>)
 80002c4:	f001 ffcc 	bl	8002260 <HAL_GPIO_ReadPin>
 80002c8:	4603      	mov	r3, r0
 80002ca:	461a      	mov	r2, r3
 80002cc:	4b1f      	ldr	r3, [pc, #124]	; (800034c <getKeyInput+0x194>)
 80002ce:	609a      	str	r2, [r3, #8]
	if ((Key3Reg[0] == Key3Reg[1]) && (Key3Reg[1] == Key3Reg[2])){
 80002d0:	4b1e      	ldr	r3, [pc, #120]	; (800034c <getKeyInput+0x194>)
 80002d2:	681a      	ldr	r2, [r3, #0]
 80002d4:	4b1d      	ldr	r3, [pc, #116]	; (800034c <getKeyInput+0x194>)
 80002d6:	685b      	ldr	r3, [r3, #4]
 80002d8:	429a      	cmp	r2, r3
 80002da:	d126      	bne.n	800032a <getKeyInput+0x172>
 80002dc:	4b1b      	ldr	r3, [pc, #108]	; (800034c <getKeyInput+0x194>)
 80002de:	685a      	ldr	r2, [r3, #4]
 80002e0:	4b1a      	ldr	r3, [pc, #104]	; (800034c <getKeyInput+0x194>)
 80002e2:	689b      	ldr	r3, [r3, #8]
 80002e4:	429a      	cmp	r2, r3
 80002e6:	d120      	bne.n	800032a <getKeyInput+0x172>
		if (Key3Reg[3] != Key3Reg[2]){
 80002e8:	4b18      	ldr	r3, [pc, #96]	; (800034c <getKeyInput+0x194>)
 80002ea:	68da      	ldr	r2, [r3, #12]
 80002ec:	4b17      	ldr	r3, [pc, #92]	; (800034c <getKeyInput+0x194>)
 80002ee:	689b      	ldr	r3, [r3, #8]
 80002f0:	429a      	cmp	r2, r3
 80002f2:	d00e      	beq.n	8000312 <getKeyInput+0x15a>
			Key3Reg[3] = Key3Reg[2];
 80002f4:	4b15      	ldr	r3, [pc, #84]	; (800034c <getKeyInput+0x194>)
 80002f6:	689b      	ldr	r3, [r3, #8]
 80002f8:	4a14      	ldr	r2, [pc, #80]	; (800034c <getKeyInput+0x194>)
 80002fa:	60d3      	str	r3, [r2, #12]
			if (Key3Reg[2] == PRESSED_STATE){
 80002fc:	4b13      	ldr	r3, [pc, #76]	; (800034c <getKeyInput+0x194>)
 80002fe:	689b      	ldr	r3, [r3, #8]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d112      	bne.n	800032a <getKeyInput+0x172>
				button3_flag = 1;
 8000304:	4b13      	ldr	r3, [pc, #76]	; (8000354 <getKeyInput+0x19c>)
 8000306:	2201      	movs	r2, #1
 8000308:	601a      	str	r2, [r3, #0]
				TimerForKeyPress3 = 200;
 800030a:	4b13      	ldr	r3, [pc, #76]	; (8000358 <getKeyInput+0x1a0>)
 800030c:	22c8      	movs	r2, #200	; 0xc8
 800030e:	601a      	str	r2, [r3, #0]
				Key3Reg[3] = NORMAL_STATE;
			}
		}
	}

}
 8000310:	e00b      	b.n	800032a <getKeyInput+0x172>
			TimerForKeyPress3--;
 8000312:	4b11      	ldr	r3, [pc, #68]	; (8000358 <getKeyInput+0x1a0>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	3b01      	subs	r3, #1
 8000318:	4a0f      	ldr	r2, [pc, #60]	; (8000358 <getKeyInput+0x1a0>)
 800031a:	6013      	str	r3, [r2, #0]
			if (TimerForKeyPress3 <= 0){
 800031c:	4b0e      	ldr	r3, [pc, #56]	; (8000358 <getKeyInput+0x1a0>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	2b00      	cmp	r3, #0
 8000322:	dc02      	bgt.n	800032a <getKeyInput+0x172>
				Key3Reg[3] = NORMAL_STATE;
 8000324:	4b09      	ldr	r3, [pc, #36]	; (800034c <getKeyInput+0x194>)
 8000326:	2201      	movs	r2, #1
 8000328:	60da      	str	r2, [r3, #12]
}
 800032a:	bf00      	nop
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	20000000 	.word	0x20000000
 8000334:	40010800 	.word	0x40010800
 8000338:	200000e0 	.word	0x200000e0
 800033c:	20000010 	.word	0x20000010
 8000340:	20000014 	.word	0x20000014
 8000344:	200000e4 	.word	0x200000e4
 8000348:	20000024 	.word	0x20000024
 800034c:	20000028 	.word	0x20000028
 8000350:	40010c00 	.word	0x40010c00
 8000354:	200000e8 	.word	0x200000e8
 8000358:	20000038 	.word	0x20000038

0800035c <fsm_automatic_run0>:
#include "traffic_light.h"
#include "i2c_lcd.h"
#include "lcd_display.h"
#include "scheduler.h"

void fsm_automatic_run0(){
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
	switch(status[0]){
 8000360:	4b3d      	ldr	r3, [pc, #244]	; (8000458 <fsm_automatic_run0+0xfc>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	2b03      	cmp	r3, #3
 8000366:	d873      	bhi.n	8000450 <fsm_automatic_run0+0xf4>
 8000368:	a201      	add	r2, pc, #4	; (adr r2, 8000370 <fsm_automatic_run0+0x14>)
 800036a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800036e:	bf00      	nop
 8000370:	08000381 	.word	0x08000381
 8000374:	080003b5 	.word	0x080003b5
 8000378:	080003e9 	.word	0x080003e9
 800037c:	0800041d 	.word	0x0800041d
	case INIT:
		status[0] = AUTO_RED;
 8000380:	4b35      	ldr	r3, [pc, #212]	; (8000458 <fsm_automatic_run0+0xfc>)
 8000382:	2201      	movs	r2, #1
 8000384:	601a      	str	r2, [r3, #0]
		setRed(0);
 8000386:	2000      	movs	r0, #0
 8000388:	f001 f970 	bl	800166c <setRed>
		//setBuffer7SEG(0, timerLed[0] / 1000);
		setBufferLCD(1, timerLed[0] / 1000);
 800038c:	4b33      	ldr	r3, [pc, #204]	; (800045c <fsm_automatic_run0+0x100>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a33      	ldr	r2, [pc, #204]	; (8000460 <fsm_automatic_run0+0x104>)
 8000392:	fb82 1203 	smull	r1, r2, r2, r3
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	17db      	asrs	r3, r3, #31
 800039a:	1ad3      	subs	r3, r2, r3
 800039c:	4619      	mov	r1, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	f000 fb16 	bl	80009d0 <setBufferLCD>
		SCH_Add_Task(fsm_automatic_run0, timerLed[0], 0);
 80003a4:	4b2d      	ldr	r3, [pc, #180]	; (800045c <fsm_automatic_run0+0x100>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	2200      	movs	r2, #0
 80003aa:	4619      	mov	r1, r3
 80003ac:	482d      	ldr	r0, [pc, #180]	; (8000464 <fsm_automatic_run0+0x108>)
 80003ae:	f000 fd5b 	bl	8000e68 <SCH_Add_Task>
		break;
 80003b2:	e04e      	b.n	8000452 <fsm_automatic_run0+0xf6>
	case AUTO_RED:
		status[0] = AUTO_GREEN;
 80003b4:	4b28      	ldr	r3, [pc, #160]	; (8000458 <fsm_automatic_run0+0xfc>)
 80003b6:	2202      	movs	r2, #2
 80003b8:	601a      	str	r2, [r3, #0]
		setGreen(0);
 80003ba:	2000      	movs	r0, #0
 80003bc:	f001 f8d6 	bl	800156c <setGreen>
		//setBuffer7SEG(0, timerLed[1] / 1000);
		setBufferLCD(1, timerLed[1] / 1000);
 80003c0:	4b26      	ldr	r3, [pc, #152]	; (800045c <fsm_automatic_run0+0x100>)
 80003c2:	685b      	ldr	r3, [r3, #4]
 80003c4:	4a26      	ldr	r2, [pc, #152]	; (8000460 <fsm_automatic_run0+0x104>)
 80003c6:	fb82 1203 	smull	r1, r2, r2, r3
 80003ca:	1192      	asrs	r2, r2, #6
 80003cc:	17db      	asrs	r3, r3, #31
 80003ce:	1ad3      	subs	r3, r2, r3
 80003d0:	4619      	mov	r1, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	f000 fafc 	bl	80009d0 <setBufferLCD>
		SCH_Add_Task(fsm_automatic_run0, timerLed[1], 0);
 80003d8:	4b20      	ldr	r3, [pc, #128]	; (800045c <fsm_automatic_run0+0x100>)
 80003da:	685b      	ldr	r3, [r3, #4]
 80003dc:	2200      	movs	r2, #0
 80003de:	4619      	mov	r1, r3
 80003e0:	4820      	ldr	r0, [pc, #128]	; (8000464 <fsm_automatic_run0+0x108>)
 80003e2:	f000 fd41 	bl	8000e68 <SCH_Add_Task>
		break;
 80003e6:	e034      	b.n	8000452 <fsm_automatic_run0+0xf6>
	case AUTO_GREEN:
		status[0] = AUTO_YELLOW;
 80003e8:	4b1b      	ldr	r3, [pc, #108]	; (8000458 <fsm_automatic_run0+0xfc>)
 80003ea:	2203      	movs	r2, #3
 80003ec:	601a      	str	r2, [r3, #0]
		setYellow(0);
 80003ee:	2000      	movs	r0, #0
 80003f0:	f001 f8fc 	bl	80015ec <setYellow>
		//setBuffer7SEG(0, timerLed[2] / 1000);
		setBufferLCD(1, timerLed[2] / 1000);
 80003f4:	4b19      	ldr	r3, [pc, #100]	; (800045c <fsm_automatic_run0+0x100>)
 80003f6:	689b      	ldr	r3, [r3, #8]
 80003f8:	4a19      	ldr	r2, [pc, #100]	; (8000460 <fsm_automatic_run0+0x104>)
 80003fa:	fb82 1203 	smull	r1, r2, r2, r3
 80003fe:	1192      	asrs	r2, r2, #6
 8000400:	17db      	asrs	r3, r3, #31
 8000402:	1ad3      	subs	r3, r2, r3
 8000404:	4619      	mov	r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	f000 fae2 	bl	80009d0 <setBufferLCD>
		SCH_Add_Task(fsm_automatic_run0, timerLed[2], 0);
 800040c:	4b13      	ldr	r3, [pc, #76]	; (800045c <fsm_automatic_run0+0x100>)
 800040e:	689b      	ldr	r3, [r3, #8]
 8000410:	2200      	movs	r2, #0
 8000412:	4619      	mov	r1, r3
 8000414:	4813      	ldr	r0, [pc, #76]	; (8000464 <fsm_automatic_run0+0x108>)
 8000416:	f000 fd27 	bl	8000e68 <SCH_Add_Task>
		break;
 800041a:	e01a      	b.n	8000452 <fsm_automatic_run0+0xf6>
	case AUTO_YELLOW:
		status[0] = AUTO_RED;
 800041c:	4b0e      	ldr	r3, [pc, #56]	; (8000458 <fsm_automatic_run0+0xfc>)
 800041e:	2201      	movs	r2, #1
 8000420:	601a      	str	r2, [r3, #0]
		setRed(0);
 8000422:	2000      	movs	r0, #0
 8000424:	f001 f922 	bl	800166c <setRed>
		//setBuffer7SEG(0, timerLed[0] / 1000);
		setBufferLCD(1, timerLed[0] / 1000);
 8000428:	4b0c      	ldr	r3, [pc, #48]	; (800045c <fsm_automatic_run0+0x100>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a0c      	ldr	r2, [pc, #48]	; (8000460 <fsm_automatic_run0+0x104>)
 800042e:	fb82 1203 	smull	r1, r2, r2, r3
 8000432:	1192      	asrs	r2, r2, #6
 8000434:	17db      	asrs	r3, r3, #31
 8000436:	1ad3      	subs	r3, r2, r3
 8000438:	4619      	mov	r1, r3
 800043a:	2001      	movs	r0, #1
 800043c:	f000 fac8 	bl	80009d0 <setBufferLCD>
		SCH_Add_Task(fsm_automatic_run0, timerLed[0], 0);
 8000440:	4b06      	ldr	r3, [pc, #24]	; (800045c <fsm_automatic_run0+0x100>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	2200      	movs	r2, #0
 8000446:	4619      	mov	r1, r3
 8000448:	4806      	ldr	r0, [pc, #24]	; (8000464 <fsm_automatic_run0+0x108>)
 800044a:	f000 fd0d 	bl	8000e68 <SCH_Add_Task>
		break;
 800044e:	e000      	b.n	8000452 <fsm_automatic_run0+0xf6>
	default:
		break;
 8000450:	bf00      	nop
	}
}
 8000452:	bf00      	nop
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	200000ec 	.word	0x200000ec
 800045c:	20000048 	.word	0x20000048
 8000460:	10624dd3 	.word	0x10624dd3
 8000464:	0800035d 	.word	0x0800035d

08000468 <fsm_automatic_run1>:

void fsm_automatic_run1(){
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
	switch(status[1]){
 800046c:	4b3d      	ldr	r3, [pc, #244]	; (8000564 <fsm_automatic_run1+0xfc>)
 800046e:	685b      	ldr	r3, [r3, #4]
 8000470:	2b03      	cmp	r3, #3
 8000472:	d873      	bhi.n	800055c <fsm_automatic_run1+0xf4>
 8000474:	a201      	add	r2, pc, #4	; (adr r2, 800047c <fsm_automatic_run1+0x14>)
 8000476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800047a:	bf00      	nop
 800047c:	0800048d 	.word	0x0800048d
 8000480:	080004c1 	.word	0x080004c1
 8000484:	080004f5 	.word	0x080004f5
 8000488:	08000529 	.word	0x08000529
	case INIT:
		status[1] = AUTO_GREEN;
 800048c:	4b35      	ldr	r3, [pc, #212]	; (8000564 <fsm_automatic_run1+0xfc>)
 800048e:	2202      	movs	r2, #2
 8000490:	605a      	str	r2, [r3, #4]
		setGreen(1);
 8000492:	2001      	movs	r0, #1
 8000494:	f001 f86a 	bl	800156c <setGreen>
		//setBuffer7SEG(0, timerLed[0] / 1000);
		setBufferLCD(2, timerLed[1] / 1000);
 8000498:	4b33      	ldr	r3, [pc, #204]	; (8000568 <fsm_automatic_run1+0x100>)
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	4a33      	ldr	r2, [pc, #204]	; (800056c <fsm_automatic_run1+0x104>)
 800049e:	fb82 1203 	smull	r1, r2, r2, r3
 80004a2:	1192      	asrs	r2, r2, #6
 80004a4:	17db      	asrs	r3, r3, #31
 80004a6:	1ad3      	subs	r3, r2, r3
 80004a8:	4619      	mov	r1, r3
 80004aa:	2002      	movs	r0, #2
 80004ac:	f000 fa90 	bl	80009d0 <setBufferLCD>
		SCH_Add_Task(fsm_automatic_run1, timerLed[1], 0);
 80004b0:	4b2d      	ldr	r3, [pc, #180]	; (8000568 <fsm_automatic_run1+0x100>)
 80004b2:	685b      	ldr	r3, [r3, #4]
 80004b4:	2200      	movs	r2, #0
 80004b6:	4619      	mov	r1, r3
 80004b8:	482d      	ldr	r0, [pc, #180]	; (8000570 <fsm_automatic_run1+0x108>)
 80004ba:	f000 fcd5 	bl	8000e68 <SCH_Add_Task>
		break;
 80004be:	e04e      	b.n	800055e <fsm_automatic_run1+0xf6>
	case AUTO_RED:
		status[1] = AUTO_GREEN;
 80004c0:	4b28      	ldr	r3, [pc, #160]	; (8000564 <fsm_automatic_run1+0xfc>)
 80004c2:	2202      	movs	r2, #2
 80004c4:	605a      	str	r2, [r3, #4]
		setGreen(1);
 80004c6:	2001      	movs	r0, #1
 80004c8:	f001 f850 	bl	800156c <setGreen>
		//setBuffer7SEG(0, timerLed[1] / 1000);
		setBufferLCD(2, timerLed[1] / 1000);
 80004cc:	4b26      	ldr	r3, [pc, #152]	; (8000568 <fsm_automatic_run1+0x100>)
 80004ce:	685b      	ldr	r3, [r3, #4]
 80004d0:	4a26      	ldr	r2, [pc, #152]	; (800056c <fsm_automatic_run1+0x104>)
 80004d2:	fb82 1203 	smull	r1, r2, r2, r3
 80004d6:	1192      	asrs	r2, r2, #6
 80004d8:	17db      	asrs	r3, r3, #31
 80004da:	1ad3      	subs	r3, r2, r3
 80004dc:	4619      	mov	r1, r3
 80004de:	2002      	movs	r0, #2
 80004e0:	f000 fa76 	bl	80009d0 <setBufferLCD>
		SCH_Add_Task(fsm_automatic_run1, timerLed[1], 0);
 80004e4:	4b20      	ldr	r3, [pc, #128]	; (8000568 <fsm_automatic_run1+0x100>)
 80004e6:	685b      	ldr	r3, [r3, #4]
 80004e8:	2200      	movs	r2, #0
 80004ea:	4619      	mov	r1, r3
 80004ec:	4820      	ldr	r0, [pc, #128]	; (8000570 <fsm_automatic_run1+0x108>)
 80004ee:	f000 fcbb 	bl	8000e68 <SCH_Add_Task>
		break;
 80004f2:	e034      	b.n	800055e <fsm_automatic_run1+0xf6>
	case AUTO_GREEN:
		status[1] = AUTO_YELLOW;
 80004f4:	4b1b      	ldr	r3, [pc, #108]	; (8000564 <fsm_automatic_run1+0xfc>)
 80004f6:	2203      	movs	r2, #3
 80004f8:	605a      	str	r2, [r3, #4]
		setYellow(1);
 80004fa:	2001      	movs	r0, #1
 80004fc:	f001 f876 	bl	80015ec <setYellow>
		//setBuffer7SEG(0, timerLed[2] / 1000);
		setBufferLCD(2, timerLed[2] / 1000);
 8000500:	4b19      	ldr	r3, [pc, #100]	; (8000568 <fsm_automatic_run1+0x100>)
 8000502:	689b      	ldr	r3, [r3, #8]
 8000504:	4a19      	ldr	r2, [pc, #100]	; (800056c <fsm_automatic_run1+0x104>)
 8000506:	fb82 1203 	smull	r1, r2, r2, r3
 800050a:	1192      	asrs	r2, r2, #6
 800050c:	17db      	asrs	r3, r3, #31
 800050e:	1ad3      	subs	r3, r2, r3
 8000510:	4619      	mov	r1, r3
 8000512:	2002      	movs	r0, #2
 8000514:	f000 fa5c 	bl	80009d0 <setBufferLCD>
		SCH_Add_Task(fsm_automatic_run1, timerLed[2], 0);
 8000518:	4b13      	ldr	r3, [pc, #76]	; (8000568 <fsm_automatic_run1+0x100>)
 800051a:	689b      	ldr	r3, [r3, #8]
 800051c:	2200      	movs	r2, #0
 800051e:	4619      	mov	r1, r3
 8000520:	4813      	ldr	r0, [pc, #76]	; (8000570 <fsm_automatic_run1+0x108>)
 8000522:	f000 fca1 	bl	8000e68 <SCH_Add_Task>
		break;
 8000526:	e01a      	b.n	800055e <fsm_automatic_run1+0xf6>
	case AUTO_YELLOW:
		status[1] = AUTO_RED;
 8000528:	4b0e      	ldr	r3, [pc, #56]	; (8000564 <fsm_automatic_run1+0xfc>)
 800052a:	2201      	movs	r2, #1
 800052c:	605a      	str	r2, [r3, #4]
		setRed(1);
 800052e:	2001      	movs	r0, #1
 8000530:	f001 f89c 	bl	800166c <setRed>
		//setBuffer7SEG(0, timerLed[0] / 1000);
		setBufferLCD(2, timerLed[0] / 1000);
 8000534:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <fsm_automatic_run1+0x100>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a0c      	ldr	r2, [pc, #48]	; (800056c <fsm_automatic_run1+0x104>)
 800053a:	fb82 1203 	smull	r1, r2, r2, r3
 800053e:	1192      	asrs	r2, r2, #6
 8000540:	17db      	asrs	r3, r3, #31
 8000542:	1ad3      	subs	r3, r2, r3
 8000544:	4619      	mov	r1, r3
 8000546:	2002      	movs	r0, #2
 8000548:	f000 fa42 	bl	80009d0 <setBufferLCD>
		SCH_Add_Task(fsm_automatic_run1, timerLed[0], 0);
 800054c:	4b06      	ldr	r3, [pc, #24]	; (8000568 <fsm_automatic_run1+0x100>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	2200      	movs	r2, #0
 8000552:	4619      	mov	r1, r3
 8000554:	4806      	ldr	r0, [pc, #24]	; (8000570 <fsm_automatic_run1+0x108>)
 8000556:	f000 fc87 	bl	8000e68 <SCH_Add_Task>
		break;
 800055a:	e000      	b.n	800055e <fsm_automatic_run1+0xf6>
	default:
		break;
 800055c:	bf00      	nop
	}
}
 800055e:	bf00      	nop
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	200000ec 	.word	0x200000ec
 8000568:	20000048 	.word	0x20000048
 800056c:	10624dd3 	.word	0x10624dd3
 8000570:	08000469 	.word	0x08000469

08000574 <fsm_manual_run>:
#include "fsm_manual.h"
#include "traffic_light.h"
#include "global.h"
#include "scheduler.h"

void fsm_manual_run(){
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	switch (status[0]){
 8000578:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <fsm_manual_run+0x34>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	2b0d      	cmp	r3, #13
 800057e:	d00c      	beq.n	800059a <fsm_manual_run+0x26>
 8000580:	2b0d      	cmp	r3, #13
 8000582:	dc0d      	bgt.n	80005a0 <fsm_manual_run+0x2c>
 8000584:	2b0b      	cmp	r3, #11
 8000586:	d002      	beq.n	800058e <fsm_manual_run+0x1a>
 8000588:	2b0c      	cmp	r3, #12
 800058a:	d003      	beq.n	8000594 <fsm_manual_run+0x20>
		break;
	case MANUAL_YELLOW:
		blinkYellow();
		break;
	default:
		break;
 800058c:	e008      	b.n	80005a0 <fsm_manual_run+0x2c>
		blinkRed();
 800058e:	f001 f8df 	bl	8001750 <blinkRed>
		break;
 8000592:	e006      	b.n	80005a2 <fsm_manual_run+0x2e>
		blinkGreen();
 8000594:	f001 f8aa 	bl	80016ec <blinkGreen>
		break;
 8000598:	e003      	b.n	80005a2 <fsm_manual_run+0x2e>
		blinkYellow();
 800059a:	f001 f907 	bl	80017ac <blinkYellow>
		break;
 800059e:	e000      	b.n	80005a2 <fsm_manual_run+0x2e>
		break;
 80005a0:	bf00      	nop
	}
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	200000ec 	.word	0x200000ec

080005ac <fsm_setting_run>:
#include "fsm_automatic.h"
#include "fsm_manual.h"

int tmp[3] = {5000, 3000, 2000};

void fsm_setting_run(){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
	if(status[0] > 10){
 80005b2:	4b87      	ldr	r3, [pc, #540]	; (80007d0 <fsm_setting_run+0x224>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b0a      	cmp	r3, #10
 80005b8:	dd70      	ble.n	800069c <fsm_setting_run+0xf0>
		if(isButton2Pressed()){
 80005ba:	f7ff fdd9 	bl	8000170 <isButton2Pressed>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d052      	beq.n	800066a <fsm_setting_run+0xbe>
			switch(status[0]){
 80005c4:	4b82      	ldr	r3, [pc, #520]	; (80007d0 <fsm_setting_run+0x224>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b0d      	cmp	r3, #13
 80005ca:	d036      	beq.n	800063a <fsm_setting_run+0x8e>
 80005cc:	2b0d      	cmp	r3, #13
 80005ce:	dc4e      	bgt.n	800066e <fsm_setting_run+0xc2>
 80005d0:	2b0b      	cmp	r3, #11
 80005d2:	d002      	beq.n	80005da <fsm_setting_run+0x2e>
 80005d4:	2b0c      	cmp	r3, #12
 80005d6:	d018      	beq.n	800060a <fsm_setting_run+0x5e>
				if(tmp[2] < 99*1000) tmp[2] = tmp[2] + 1000;
				//setBuffer7SEG(0, tmp[2] / 1000);
				setBufferLCD(1, timerLed[2] / 1000);
				break;
			default:
				break;
 80005d8:	e049      	b.n	800066e <fsm_setting_run+0xc2>
				if(tmp[0] < 99*1000) tmp[0] = tmp[0] + 1000;
 80005da:	4b7e      	ldr	r3, [pc, #504]	; (80007d4 <fsm_setting_run+0x228>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a7e      	ldr	r2, [pc, #504]	; (80007d8 <fsm_setting_run+0x22c>)
 80005e0:	4293      	cmp	r3, r2
 80005e2:	dc05      	bgt.n	80005f0 <fsm_setting_run+0x44>
 80005e4:	4b7b      	ldr	r3, [pc, #492]	; (80007d4 <fsm_setting_run+0x228>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80005ec:	4a79      	ldr	r2, [pc, #484]	; (80007d4 <fsm_setting_run+0x228>)
 80005ee:	6013      	str	r3, [r2, #0]
				setBufferLCD(1, tmp[0] / 1000);
 80005f0:	4b78      	ldr	r3, [pc, #480]	; (80007d4 <fsm_setting_run+0x228>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a79      	ldr	r2, [pc, #484]	; (80007dc <fsm_setting_run+0x230>)
 80005f6:	fb82 1203 	smull	r1, r2, r2, r3
 80005fa:	1192      	asrs	r2, r2, #6
 80005fc:	17db      	asrs	r3, r3, #31
 80005fe:	1ad3      	subs	r3, r2, r3
 8000600:	4619      	mov	r1, r3
 8000602:	2001      	movs	r0, #1
 8000604:	f000 f9e4 	bl	80009d0 <setBufferLCD>
				break;
 8000608:	e032      	b.n	8000670 <fsm_setting_run+0xc4>
				if(tmp[1] < 99*1000) tmp[1] = tmp[1] + 1000;
 800060a:	4b72      	ldr	r3, [pc, #456]	; (80007d4 <fsm_setting_run+0x228>)
 800060c:	685b      	ldr	r3, [r3, #4]
 800060e:	4a72      	ldr	r2, [pc, #456]	; (80007d8 <fsm_setting_run+0x22c>)
 8000610:	4293      	cmp	r3, r2
 8000612:	dc05      	bgt.n	8000620 <fsm_setting_run+0x74>
 8000614:	4b6f      	ldr	r3, [pc, #444]	; (80007d4 <fsm_setting_run+0x228>)
 8000616:	685b      	ldr	r3, [r3, #4]
 8000618:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800061c:	4a6d      	ldr	r2, [pc, #436]	; (80007d4 <fsm_setting_run+0x228>)
 800061e:	6053      	str	r3, [r2, #4]
				setBufferLCD(1, tmp[1] / 1000);
 8000620:	4b6c      	ldr	r3, [pc, #432]	; (80007d4 <fsm_setting_run+0x228>)
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	4a6d      	ldr	r2, [pc, #436]	; (80007dc <fsm_setting_run+0x230>)
 8000626:	fb82 1203 	smull	r1, r2, r2, r3
 800062a:	1192      	asrs	r2, r2, #6
 800062c:	17db      	asrs	r3, r3, #31
 800062e:	1ad3      	subs	r3, r2, r3
 8000630:	4619      	mov	r1, r3
 8000632:	2001      	movs	r0, #1
 8000634:	f000 f9cc 	bl	80009d0 <setBufferLCD>
				break;
 8000638:	e01a      	b.n	8000670 <fsm_setting_run+0xc4>
				if(tmp[2] < 99*1000) tmp[2] = tmp[2] + 1000;
 800063a:	4b66      	ldr	r3, [pc, #408]	; (80007d4 <fsm_setting_run+0x228>)
 800063c:	689b      	ldr	r3, [r3, #8]
 800063e:	4a66      	ldr	r2, [pc, #408]	; (80007d8 <fsm_setting_run+0x22c>)
 8000640:	4293      	cmp	r3, r2
 8000642:	dc05      	bgt.n	8000650 <fsm_setting_run+0xa4>
 8000644:	4b63      	ldr	r3, [pc, #396]	; (80007d4 <fsm_setting_run+0x228>)
 8000646:	689b      	ldr	r3, [r3, #8]
 8000648:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800064c:	4a61      	ldr	r2, [pc, #388]	; (80007d4 <fsm_setting_run+0x228>)
 800064e:	6093      	str	r3, [r2, #8]
				setBufferLCD(1, timerLed[2] / 1000);
 8000650:	4b63      	ldr	r3, [pc, #396]	; (80007e0 <fsm_setting_run+0x234>)
 8000652:	689b      	ldr	r3, [r3, #8]
 8000654:	4a61      	ldr	r2, [pc, #388]	; (80007dc <fsm_setting_run+0x230>)
 8000656:	fb82 1203 	smull	r1, r2, r2, r3
 800065a:	1192      	asrs	r2, r2, #6
 800065c:	17db      	asrs	r3, r3, #31
 800065e:	1ad3      	subs	r3, r2, r3
 8000660:	4619      	mov	r1, r3
 8000662:	2001      	movs	r0, #1
 8000664:	f000 f9b4 	bl	80009d0 <setBufferLCD>
				break;
 8000668:	e002      	b.n	8000670 <fsm_setting_run+0xc4>
			}
		}
 800066a:	bf00      	nop
 800066c:	e000      	b.n	8000670 <fsm_setting_run+0xc4>
				break;
 800066e:	bf00      	nop
		if(isButton3Pressed()){
 8000670:	f7ff fd90 	bl	8000194 <isButton3Pressed>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d010      	beq.n	800069c <fsm_setting_run+0xf0>
			for(int i = 0; i < 3; i++){
 800067a:	2300      	movs	r3, #0
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	e00a      	b.n	8000696 <fsm_setting_run+0xea>
				timerLed[i] = tmp[i];
 8000680:	4a54      	ldr	r2, [pc, #336]	; (80007d4 <fsm_setting_run+0x228>)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000688:	4955      	ldr	r1, [pc, #340]	; (80007e0 <fsm_setting_run+0x234>)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(int i = 0; i < 3; i++){
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	3301      	adds	r3, #1
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2b02      	cmp	r3, #2
 800069a:	ddf1      	ble.n	8000680 <fsm_setting_run+0xd4>
			}
		}
	}
	if (isButton1Pressed()){
 800069c:	f7ff fd56 	bl	800014c <isButton1Pressed>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	f000 808f 	beq.w	80007c6 <fsm_setting_run+0x21a>
		if (status[0] > 10){
 80006a8:	4b49      	ldr	r3, [pc, #292]	; (80007d0 <fsm_setting_run+0x224>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b0a      	cmp	r3, #10
 80006ae:	dd4d      	ble.n	800074c <fsm_setting_run+0x1a0>
			switch (status[0]){
 80006b0:	4b47      	ldr	r3, [pc, #284]	; (80007d0 <fsm_setting_run+0x224>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2b0d      	cmp	r3, #13
 80006b6:	d035      	beq.n	8000724 <fsm_setting_run+0x178>
 80006b8:	2b0d      	cmp	r3, #13
 80006ba:	f300 8083 	bgt.w	80007c4 <fsm_setting_run+0x218>
 80006be:	2b0b      	cmp	r3, #11
 80006c0:	d002      	beq.n	80006c8 <fsm_setting_run+0x11c>
 80006c2:	2b0c      	cmp	r3, #12
 80006c4:	d017      	beq.n	80006f6 <fsm_setting_run+0x14a>
				fsm_automatic_run1();
				//SCH_Add_Task(updateBuffer7SEG, 1000, 1000);
				SCH_Add_Task(updateBufferLCD, 0, 1000);
				break;
			default:
				break;
 80006c6:	e07d      	b.n	80007c4 <fsm_setting_run+0x218>
				status[0] = MANUAL_GREEN;
 80006c8:	4b41      	ldr	r3, [pc, #260]	; (80007d0 <fsm_setting_run+0x224>)
 80006ca:	220c      	movs	r2, #12
 80006cc:	601a      	str	r2, [r3, #0]
				status[1] = MANUAL_GREEN;
 80006ce:	4b40      	ldr	r3, [pc, #256]	; (80007d0 <fsm_setting_run+0x224>)
 80006d0:	220c      	movs	r2, #12
 80006d2:	605a      	str	r2, [r3, #4]
				setBufferLCD(1, tmp[1] / 1000);
 80006d4:	4b3f      	ldr	r3, [pc, #252]	; (80007d4 <fsm_setting_run+0x228>)
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	4a40      	ldr	r2, [pc, #256]	; (80007dc <fsm_setting_run+0x230>)
 80006da:	fb82 1203 	smull	r1, r2, r2, r3
 80006de:	1192      	asrs	r2, r2, #6
 80006e0:	17db      	asrs	r3, r3, #31
 80006e2:	1ad3      	subs	r3, r2, r3
 80006e4:	4619      	mov	r1, r3
 80006e6:	2001      	movs	r0, #1
 80006e8:	f000 f972 	bl	80009d0 <setBufferLCD>
				setBufferLCD(2, 3);
 80006ec:	2103      	movs	r1, #3
 80006ee:	2002      	movs	r0, #2
 80006f0:	f000 f96e 	bl	80009d0 <setBufferLCD>
				break;
 80006f4:	e067      	b.n	80007c6 <fsm_setting_run+0x21a>
				status[0] = MANUAL_YELLOW;
 80006f6:	4b36      	ldr	r3, [pc, #216]	; (80007d0 <fsm_setting_run+0x224>)
 80006f8:	220d      	movs	r2, #13
 80006fa:	601a      	str	r2, [r3, #0]
				status[1] = MANUAL_YELLOW;
 80006fc:	4b34      	ldr	r3, [pc, #208]	; (80007d0 <fsm_setting_run+0x224>)
 80006fe:	220d      	movs	r2, #13
 8000700:	605a      	str	r2, [r3, #4]
				setBufferLCD(1, timerLed[2] / 1000);
 8000702:	4b37      	ldr	r3, [pc, #220]	; (80007e0 <fsm_setting_run+0x234>)
 8000704:	689b      	ldr	r3, [r3, #8]
 8000706:	4a35      	ldr	r2, [pc, #212]	; (80007dc <fsm_setting_run+0x230>)
 8000708:	fb82 1203 	smull	r1, r2, r2, r3
 800070c:	1192      	asrs	r2, r2, #6
 800070e:	17db      	asrs	r3, r3, #31
 8000710:	1ad3      	subs	r3, r2, r3
 8000712:	4619      	mov	r1, r3
 8000714:	2001      	movs	r0, #1
 8000716:	f000 f95b 	bl	80009d0 <setBufferLCD>
				setBufferLCD(2, 4);
 800071a:	2104      	movs	r1, #4
 800071c:	2002      	movs	r0, #2
 800071e:	f000 f957 	bl	80009d0 <setBufferLCD>
				break;
 8000722:	e050      	b.n	80007c6 <fsm_setting_run+0x21a>
				status[0] = INIT;
 8000724:	4b2a      	ldr	r3, [pc, #168]	; (80007d0 <fsm_setting_run+0x224>)
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
				status[1] = INIT;
 800072a:	4b29      	ldr	r3, [pc, #164]	; (80007d0 <fsm_setting_run+0x224>)
 800072c:	2200      	movs	r2, #0
 800072e:	605a      	str	r2, [r3, #4]
				SCH_Delete(fsm_manual_run);
 8000730:	482c      	ldr	r0, [pc, #176]	; (80007e4 <fsm_setting_run+0x238>)
 8000732:	f000 fc8f 	bl	8001054 <SCH_Delete>
				fsm_automatic_run0();
 8000736:	f7ff fe11 	bl	800035c <fsm_automatic_run0>
				fsm_automatic_run1();
 800073a:	f7ff fe95 	bl	8000468 <fsm_automatic_run1>
				SCH_Add_Task(updateBufferLCD, 0, 1000);
 800073e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000742:	2100      	movs	r1, #0
 8000744:	4828      	ldr	r0, [pc, #160]	; (80007e8 <fsm_setting_run+0x23c>)
 8000746:	f000 fb8f 	bl	8000e68 <SCH_Add_Task>
				break;
 800074a:	e03c      	b.n	80007c6 <fsm_setting_run+0x21a>
			}
		}
		else if (status[0] < 10 ){
 800074c:	4b20      	ldr	r3, [pc, #128]	; (80007d0 <fsm_setting_run+0x224>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2b09      	cmp	r3, #9
 8000752:	dc38      	bgt.n	80007c6 <fsm_setting_run+0x21a>
			for (int i = 0; i < 3; i++){
 8000754:	2300      	movs	r3, #0
 8000756:	603b      	str	r3, [r7, #0]
 8000758:	e00a      	b.n	8000770 <fsm_setting_run+0x1c4>
				tmp[i] = timerLed[i];
 800075a:	4a21      	ldr	r2, [pc, #132]	; (80007e0 <fsm_setting_run+0x234>)
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000762:	491c      	ldr	r1, [pc, #112]	; (80007d4 <fsm_setting_run+0x228>)
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for (int i = 0; i < 3; i++){
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	3301      	adds	r3, #1
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	2b02      	cmp	r3, #2
 8000774:	ddf1      	ble.n	800075a <fsm_setting_run+0x1ae>
			}

			SCH_Delete(fsm_automatic_run0);
 8000776:	481d      	ldr	r0, [pc, #116]	; (80007ec <fsm_setting_run+0x240>)
 8000778:	f000 fc6c 	bl	8001054 <SCH_Delete>
			SCH_Delete(fsm_automatic_run1);
 800077c:	481c      	ldr	r0, [pc, #112]	; (80007f0 <fsm_setting_run+0x244>)
 800077e:	f000 fc69 	bl	8001054 <SCH_Delete>
			//SCH_Delete(updateBuffer7SEG);
			SCH_Delete(updateBufferLCD);
 8000782:	4819      	ldr	r0, [pc, #100]	; (80007e8 <fsm_setting_run+0x23c>)
 8000784:	f000 fc66 	bl	8001054 <SCH_Delete>
			status[0] = MANUAL_RED;
 8000788:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <fsm_setting_run+0x224>)
 800078a:	220b      	movs	r2, #11
 800078c:	601a      	str	r2, [r3, #0]
			status[1] = MANUAL_RED;
 800078e:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <fsm_setting_run+0x224>)
 8000790:	220b      	movs	r2, #11
 8000792:	605a      	str	r2, [r3, #4]
			//setBuffer7SEG(0, timerLed[0] / 1000);
			//setBuffer7SEG(1, 2);
			setBufferLCD(1, timerLed[0] / 1000);
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <fsm_setting_run+0x234>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a10      	ldr	r2, [pc, #64]	; (80007dc <fsm_setting_run+0x230>)
 800079a:	fb82 1203 	smull	r1, r2, r2, r3
 800079e:	1192      	asrs	r2, r2, #6
 80007a0:	17db      	asrs	r3, r3, #31
 80007a2:	1ad3      	subs	r3, r2, r3
 80007a4:	4619      	mov	r1, r3
 80007a6:	2001      	movs	r0, #1
 80007a8:	f000 f912 	bl	80009d0 <setBufferLCD>
			setBufferLCD(2, 2);
 80007ac:	2102      	movs	r1, #2
 80007ae:	2002      	movs	r0, #2
 80007b0:	f000 f90e 	bl	80009d0 <setBufferLCD>
			setInit();
 80007b4:	f000 fea4 	bl	8001500 <setInit>
			SCH_Add_Task(fsm_manual_run, 0, 250);
 80007b8:	22fa      	movs	r2, #250	; 0xfa
 80007ba:	2100      	movs	r1, #0
 80007bc:	4809      	ldr	r0, [pc, #36]	; (80007e4 <fsm_setting_run+0x238>)
 80007be:	f000 fb53 	bl	8000e68 <SCH_Add_Task>
		}
	}
}
 80007c2:	e000      	b.n	80007c6 <fsm_setting_run+0x21a>
				break;
 80007c4:	bf00      	nop
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200000ec 	.word	0x200000ec
 80007d4:	2000003c 	.word	0x2000003c
 80007d8:	000182b7 	.word	0x000182b7
 80007dc:	10624dd3 	.word	0x10624dd3
 80007e0:	20000048 	.word	0x20000048
 80007e4:	08000575 	.word	0x08000575
 80007e8:	080009f9 	.word	0x080009f9
 80007ec:	0800035d 	.word	0x0800035d
 80007f0:	08000469 	.word	0x08000469

080007f4 <lcd_send_cmd>:
#include "i2c_lcd.h"
extern I2C_HandleTypeDef hi2c1;
#define SLAVE_ADDRESS_LCD (0x21 << 1)

void lcd_send_cmd (char cmd)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af02      	add	r7, sp, #8
 80007fa:	4603      	mov	r3, r0
 80007fc:	71fb      	strb	r3, [r7, #7]
  	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	f023 030f 	bic.w	r3, r3, #15
 8000804:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	011b      	lsls	r3, r3, #4
 800080a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800080c:	7bfb      	ldrb	r3, [r7, #15]
 800080e:	f043 030c 	orr.w	r3, r3, #12
 8000812:	b2db      	uxtb	r3, r3
 8000814:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000816:	7bfb      	ldrb	r3, [r7, #15]
 8000818:	f043 0308 	orr.w	r3, r3, #8
 800081c:	b2db      	uxtb	r3, r3
 800081e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000820:	7bbb      	ldrb	r3, [r7, #14]
 8000822:	f043 030c 	orr.w	r3, r3, #12
 8000826:	b2db      	uxtb	r3, r3
 8000828:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800082a:	7bbb      	ldrb	r3, [r7, #14]
 800082c:	f043 0308 	orr.w	r3, r3, #8
 8000830:	b2db      	uxtb	r3, r3
 8000832:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000834:	f107 0208 	add.w	r2, r7, #8
 8000838:	2364      	movs	r3, #100	; 0x64
 800083a:	9300      	str	r3, [sp, #0]
 800083c:	2304      	movs	r3, #4
 800083e:	2142      	movs	r1, #66	; 0x42
 8000840:	4803      	ldr	r0, [pc, #12]	; (8000850 <lcd_send_cmd+0x5c>)
 8000842:	f001 fecf 	bl	80025e4 <HAL_I2C_Master_Transmit>
}
 8000846:	bf00      	nop
 8000848:	3710      	adds	r7, #16
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	2000016c 	.word	0x2000016c

08000854 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b086      	sub	sp, #24
 8000858:	af02      	add	r7, sp, #8
 800085a:	4603      	mov	r3, r0
 800085c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	f023 030f 	bic.w	r3, r3, #15
 8000864:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	011b      	lsls	r3, r3, #4
 800086a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800086c:	7bfb      	ldrb	r3, [r7, #15]
 800086e:	f043 030d 	orr.w	r3, r3, #13
 8000872:	b2db      	uxtb	r3, r3
 8000874:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000876:	7bfb      	ldrb	r3, [r7, #15]
 8000878:	f043 0309 	orr.w	r3, r3, #9
 800087c:	b2db      	uxtb	r3, r3
 800087e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000880:	7bbb      	ldrb	r3, [r7, #14]
 8000882:	f043 030d 	orr.w	r3, r3, #13
 8000886:	b2db      	uxtb	r3, r3
 8000888:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800088a:	7bbb      	ldrb	r3, [r7, #14]
 800088c:	f043 0309 	orr.w	r3, r3, #9
 8000890:	b2db      	uxtb	r3, r3
 8000892:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000894:	f107 0208 	add.w	r2, r7, #8
 8000898:	2364      	movs	r3, #100	; 0x64
 800089a:	9300      	str	r3, [sp, #0]
 800089c:	2304      	movs	r3, #4
 800089e:	2142      	movs	r1, #66	; 0x42
 80008a0:	4803      	ldr	r0, [pc, #12]	; (80008b0 <lcd_send_data+0x5c>)
 80008a2:	f001 fe9f 	bl	80025e4 <HAL_I2C_Master_Transmit>
}
 80008a6:	bf00      	nop
 80008a8:	3710      	adds	r7, #16
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	2000016c 	.word	0x2000016c

080008b4 <lcd_init>:

void lcd_init (void) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 80008b8:	2033      	movs	r0, #51	; 0x33
 80008ba:	f7ff ff9b 	bl	80007f4 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 80008be:	2032      	movs	r0, #50	; 0x32
 80008c0:	f7ff ff98 	bl	80007f4 <lcd_send_cmd>
	HAL_Delay(50);
 80008c4:	2032      	movs	r0, #50	; 0x32
 80008c6:	f001 f82f 	bl	8001928 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 80008ca:	2028      	movs	r0, #40	; 0x28
 80008cc:	f7ff ff92 	bl	80007f4 <lcd_send_cmd>
	HAL_Delay(50);
 80008d0:	2032      	movs	r0, #50	; 0x32
 80008d2:	f001 f829 	bl	8001928 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 80008d6:	2001      	movs	r0, #1
 80008d8:	f7ff ff8c 	bl	80007f4 <lcd_send_cmd>
	HAL_Delay(50);
 80008dc:	2032      	movs	r0, #50	; 0x32
 80008de:	f001 f823 	bl	8001928 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 80008e2:	2006      	movs	r0, #6
 80008e4:	f7ff ff86 	bl	80007f4 <lcd_send_cmd>
	HAL_Delay(50);
 80008e8:	2032      	movs	r0, #50	; 0x32
 80008ea:	f001 f81d 	bl	8001928 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 80008ee:	200c      	movs	r0, #12
 80008f0:	f7ff ff80 	bl	80007f4 <lcd_send_cmd>
	HAL_Delay(50);
 80008f4:	2032      	movs	r0, #50	; 0x32
 80008f6:	f001 f817 	bl	8001928 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 80008fa:	2002      	movs	r0, #2
 80008fc:	f7ff ff7a 	bl	80007f4 <lcd_send_cmd>
	HAL_Delay(50);
 8000900:	2032      	movs	r0, #50	; 0x32
 8000902:	f001 f811 	bl	8001928 <HAL_Delay>
	lcd_send_cmd (0x80);
 8000906:	2080      	movs	r0, #128	; 0x80
 8000908:	f7ff ff74 	bl	80007f4 <lcd_send_cmd>
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}

08000910 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000918:	e006      	b.n	8000928 <lcd_send_string+0x18>
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	1c5a      	adds	r2, r3, #1
 800091e:	607a      	str	r2, [r7, #4]
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	4618      	mov	r0, r3
 8000924:	f7ff ff96 	bl	8000854 <lcd_send_data>
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d1f4      	bne.n	800091a <lcd_send_string+0xa>
}
 8000930:	bf00      	nop
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <lcd_goto_XY>:
{
	lcd_send_cmd (0x01); //clear display
}

void lcd_goto_XY (int row, int col)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	b084      	sub	sp, #16
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
 8000942:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2b01      	cmp	r3, #1
 8000948:	d108      	bne.n	800095c <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	b2da      	uxtb	r2, r3
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	b2db      	uxtb	r3, r3
 8000952:	4413      	add	r3, r2
 8000954:	b2db      	uxtb	r3, r3
 8000956:	337f      	adds	r3, #127	; 0x7f
 8000958:	73fb      	strb	r3, [r7, #15]
 800095a:	e008      	b.n	800096e <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	b2db      	uxtb	r3, r3
 8000960:	3340      	adds	r3, #64	; 0x40
 8000962:	b2db      	uxtb	r3, r3
 8000964:	b25b      	sxtb	r3, r3
 8000966:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800096a:	b25b      	sxtb	r3, r3
 800096c:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 800096e:	7bfb      	ldrb	r3, [r7, #15]
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff ff3f 	bl	80007f4 <lcd_send_cmd>
}
 8000976:	bf00      	nop
 8000978:	3710      	adds	r7, #16
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
	...

08000980 <displayLCD>:

int buffer[2] = {0, 0};
char buffer_bytes1[16];
char buffer_bytes2[16];

void displayLCD(){
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
	sprintf(buffer_bytes2, "%d", buffer[1]);
 8000984:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <displayLCD+0x40>)
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	461a      	mov	r2, r3
 800098a:	490e      	ldr	r1, [pc, #56]	; (80009c4 <displayLCD+0x44>)
 800098c:	480e      	ldr	r0, [pc, #56]	; (80009c8 <displayLCD+0x48>)
 800098e:	f005 f851 	bl	8005a34 <siprintf>
	lcd_goto_XY(2, 0);
 8000992:	2100      	movs	r1, #0
 8000994:	2002      	movs	r0, #2
 8000996:	f7ff ffd0 	bl	800093a <lcd_goto_XY>
	lcd_send_string(buffer_bytes2);
 800099a:	480b      	ldr	r0, [pc, #44]	; (80009c8 <displayLCD+0x48>)
 800099c:	f7ff ffb8 	bl	8000910 <lcd_send_string>
	sprintf(buffer_bytes1, "%d", buffer[0]);
 80009a0:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <displayLCD+0x40>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	461a      	mov	r2, r3
 80009a6:	4907      	ldr	r1, [pc, #28]	; (80009c4 <displayLCD+0x44>)
 80009a8:	4808      	ldr	r0, [pc, #32]	; (80009cc <displayLCD+0x4c>)
 80009aa:	f005 f843 	bl	8005a34 <siprintf>
	lcd_goto_XY(1, 0);
 80009ae:	2100      	movs	r1, #0
 80009b0:	2001      	movs	r0, #1
 80009b2:	f7ff ffc2 	bl	800093a <lcd_goto_XY>
	lcd_send_string(buffer_bytes1);
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <displayLCD+0x4c>)
 80009b8:	f7ff ffaa 	bl	8000910 <lcd_send_string>
}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	200000f4 	.word	0x200000f4
 80009c4:	08006154 	.word	0x08006154
 80009c8:	20000118 	.word	0x20000118
 80009cc:	20000108 	.word	0x20000108

080009d0 <setBufferLCD>:

void setBufferLCD(int index, int data){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
	buffer[index-1] = data;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	3b01      	subs	r3, #1
 80009de:	4905      	ldr	r1, [pc, #20]	; (80009f4 <setBufferLCD+0x24>)
 80009e0:	683a      	ldr	r2, [r7, #0]
 80009e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	displayLCD();
 80009e6:	f7ff ffcb 	bl	8000980 <displayLCD>
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	200000f4 	.word	0x200000f4

080009f8 <updateBufferLCD>:

void updateBufferLCD(){
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
	buffer[0]--;
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <updateBufferLCD+0x20>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	3b01      	subs	r3, #1
 8000a02:	4a05      	ldr	r2, [pc, #20]	; (8000a18 <updateBufferLCD+0x20>)
 8000a04:	6013      	str	r3, [r2, #0]
	buffer[1]--;
 8000a06:	4b04      	ldr	r3, [pc, #16]	; (8000a18 <updateBufferLCD+0x20>)
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	3b01      	subs	r3, #1
 8000a0c:	4a02      	ldr	r2, [pc, #8]	; (8000a18 <updateBufferLCD+0x20>)
 8000a0e:	6053      	str	r3, [r2, #4]
	//lcd_clear_display();
	displayLCD();
 8000a10:	f7ff ffb6 	bl	8000980 <displayLCD>
}
 8000a14:	bf00      	nop
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	200000f4 	.word	0x200000f4

08000a1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a20:	f000 ff20 	bl	8001864 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a24:	f000 f840 	bl	8000aa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a28:	f000 f94a 	bl	8000cc0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a2c:	f000 f8f8 	bl	8000c20 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000a30:	f000 f920 	bl	8000c74 <MX_DMA_Init>
  MX_I2C1_Init();
 8000a34:	f000 f87a 	bl	8000b2c <MX_I2C1_Init>
  MX_TIM2_Init();
 8000a38:	f000 f8a6 	bl	8000b88 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000a3c:	4814      	ldr	r0, [pc, #80]	; (8000a90 <main+0x74>)
 8000a3e:	f004 fa81 	bl	8004f44 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Init();
 8000a42:	f000 f9ff 	bl	8000e44 <SCH_Init>
  lcd_init();
 8000a46:	f7ff ff35 	bl	80008b4 <lcd_init>
  //SCH_Add_Task(update7SEG, 1000, 250);
  //SCH_Add_Task(updateBuffer7SEG, 1000, 1000);

  //lcd_goto_XY(2, 0);
  //lcd_send_string("Hello!");
  SCH_Add_Task(fsm_automatic_run0, 1000, 0);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a50:	4810      	ldr	r0, [pc, #64]	; (8000a94 <main+0x78>)
 8000a52:	f000 fa09 	bl	8000e68 <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic_run1, 1000, 0);
 8000a56:	2200      	movs	r2, #0
 8000a58:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a5c:	480e      	ldr	r0, [pc, #56]	; (8000a98 <main+0x7c>)
 8000a5e:	f000 fa03 	bl	8000e68 <SCH_Add_Task>
  SCH_Add_Task(updateBufferLCD, 1000, 1000);
 8000a62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a66:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a6a:	480c      	ldr	r0, [pc, #48]	; (8000a9c <main+0x80>)
 8000a6c:	f000 f9fc 	bl	8000e68 <SCH_Add_Task>
  SCH_Add_Task(fsm_setting_run, 1000, 10);
 8000a70:	220a      	movs	r2, #10
 8000a72:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a76:	480a      	ldr	r0, [pc, #40]	; (8000aa0 <main+0x84>)
 8000a78:	f000 f9f6 	bl	8000e68 <SCH_Add_Task>
  SCH_Add_Task(getKeyInput, 1000, 10);
 8000a7c:	220a      	movs	r2, #10
 8000a7e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a82:	4808      	ldr	r0, [pc, #32]	; (8000aa4 <main+0x88>)
 8000a84:	f000 f9f0 	bl	8000e68 <SCH_Add_Task>
  while (1)
  {
	  SCH_Dispatch_Tasks();
 8000a88:	f000 fa9a 	bl	8000fc0 <SCH_Dispatch_Tasks>
 8000a8c:	e7fc      	b.n	8000a88 <main+0x6c>
 8000a8e:	bf00      	nop
 8000a90:	20000204 	.word	0x20000204
 8000a94:	0800035d 	.word	0x0800035d
 8000a98:	08000469 	.word	0x08000469
 8000a9c:	080009f9 	.word	0x080009f9
 8000aa0:	080005ad 	.word	0x080005ad
 8000aa4:	080001b9 	.word	0x080001b9

08000aa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b090      	sub	sp, #64	; 0x40
 8000aac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aae:	f107 0318 	add.w	r3, r7, #24
 8000ab2:	2228      	movs	r2, #40	; 0x28
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f004 fefe 	bl	80058b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	60da      	str	r2, [r3, #12]
 8000ac8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aca:	2302      	movs	r3, #2
 8000acc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ad2:	2310      	movs	r3, #16
 8000ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000ada:	2300      	movs	r3, #0
 8000adc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000ade:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae4:	f107 0318 	add.w	r3, r7, #24
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f003 fdcd 	bl	8004688 <HAL_RCC_OscConfig>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000af4:	f000 f9a0 	bl	8000e38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af8:	230f      	movs	r3, #15
 8000afa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000afc:	2302      	movs	r3, #2
 8000afe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8000b00:	23a0      	movs	r3, #160	; 0xa0
 8000b02:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	2102      	movs	r1, #2
 8000b12:	4618      	mov	r0, r3
 8000b14:	f004 f838 	bl	8004b88 <HAL_RCC_ClockConfig>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000b1e:	f000 f98b 	bl	8000e38 <Error_Handler>
  }
}
 8000b22:	bf00      	nop
 8000b24:	3740      	adds	r7, #64	; 0x40
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
	...

08000b2c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b30:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <MX_I2C1_Init+0x50>)
 8000b32:	4a13      	ldr	r2, [pc, #76]	; (8000b80 <MX_I2C1_Init+0x54>)
 8000b34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b36:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <MX_I2C1_Init+0x50>)
 8000b38:	4a12      	ldr	r2, [pc, #72]	; (8000b84 <MX_I2C1_Init+0x58>)
 8000b3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <MX_I2C1_Init+0x50>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <MX_I2C1_Init+0x50>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <MX_I2C1_Init+0x50>)
 8000b4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b4e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b50:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <MX_I2C1_Init+0x50>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b56:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <MX_I2C1_Init+0x50>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b5c:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <MX_I2C1_Init+0x50>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <MX_I2C1_Init+0x50>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b68:	4804      	ldr	r0, [pc, #16]	; (8000b7c <MX_I2C1_Init+0x50>)
 8000b6a:	f001 fbe3 	bl	8002334 <HAL_I2C_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b74:	f000 f960 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	2000016c 	.word	0x2000016c
 8000b80:	40005400 	.word	0x40005400
 8000b84:	000186a0 	.word	0x000186a0

08000b88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b8e:	f107 0308 	add.w	r3, r7, #8
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	609a      	str	r2, [r3, #8]
 8000b9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b9c:	463b      	mov	r3, r7
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ba4:	4b1d      	ldr	r3, [pc, #116]	; (8000c1c <MX_TIM2_Init+0x94>)
 8000ba6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000baa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000bac:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <MX_TIM2_Init+0x94>)
 8000bae:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000bb2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb4:	4b19      	ldr	r3, [pc, #100]	; (8000c1c <MX_TIM2_Init+0x94>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000bba:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <MX_TIM2_Init+0x94>)
 8000bbc:	2209      	movs	r2, #9
 8000bbe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc0:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <MX_TIM2_Init+0x94>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc6:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <MX_TIM2_Init+0x94>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bcc:	4813      	ldr	r0, [pc, #76]	; (8000c1c <MX_TIM2_Init+0x94>)
 8000bce:	f004 f969 	bl	8004ea4 <HAL_TIM_Base_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000bd8:	f000 f92e 	bl	8000e38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000be0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000be2:	f107 0308 	add.w	r3, r7, #8
 8000be6:	4619      	mov	r1, r3
 8000be8:	480c      	ldr	r0, [pc, #48]	; (8000c1c <MX_TIM2_Init+0x94>)
 8000bea:	f004 faed 	bl	80051c8 <HAL_TIM_ConfigClockSource>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000bf4:	f000 f920 	bl	8000e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c00:	463b      	mov	r3, r7
 8000c02:	4619      	mov	r1, r3
 8000c04:	4805      	ldr	r0, [pc, #20]	; (8000c1c <MX_TIM2_Init+0x94>)
 8000c06:	f004 fccf 	bl	80055a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c10:	f000 f912 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c14:	bf00      	nop
 8000c16:	3718      	adds	r7, #24
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000204 	.word	0x20000204

08000c20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c26:	4a12      	ldr	r2, [pc, #72]	; (8000c70 <MX_USART2_UART_Init+0x50>)
 8000c28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c44:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c46:	220c      	movs	r2, #12
 8000c48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c4a:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c56:	4805      	ldr	r0, [pc, #20]	; (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c58:	f004 fd16 	bl	8005688 <HAL_UART_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c62:	f000 f8e9 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	2000024c 	.word	0x2000024c
 8000c70:	40004400 	.word	0x40004400

08000c74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c7a:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <MX_DMA_Init+0x48>)
 8000c7c:	695b      	ldr	r3, [r3, #20]
 8000c7e:	4a0f      	ldr	r2, [pc, #60]	; (8000cbc <MX_DMA_Init+0x48>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	6153      	str	r3, [r2, #20]
 8000c86:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <MX_DMA_Init+0x48>)
 8000c88:	695b      	ldr	r3, [r3, #20]
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2100      	movs	r1, #0
 8000c96:	2010      	movs	r0, #16
 8000c98:	f000 ff41 	bl	8001b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000c9c:	2010      	movs	r0, #16
 8000c9e:	f000 ff5a 	bl	8001b56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	2011      	movs	r0, #17
 8000ca8:	f000 ff39 	bl	8001b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000cac:	2011      	movs	r0, #17
 8000cae:	f000 ff52 	bl	8001b56 <HAL_NVIC_EnableIRQ>

}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40021000 	.word	0x40021000

08000cc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b088      	sub	sp, #32
 8000cc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc6:	f107 0310 	add.w	r3, r7, #16
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd4:	4b4e      	ldr	r3, [pc, #312]	; (8000e10 <MX_GPIO_Init+0x150>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	4a4d      	ldr	r2, [pc, #308]	; (8000e10 <MX_GPIO_Init+0x150>)
 8000cda:	f043 0310 	orr.w	r3, r3, #16
 8000cde:	6193      	str	r3, [r2, #24]
 8000ce0:	4b4b      	ldr	r3, [pc, #300]	; (8000e10 <MX_GPIO_Init+0x150>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	f003 0310 	and.w	r3, r3, #16
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cec:	4b48      	ldr	r3, [pc, #288]	; (8000e10 <MX_GPIO_Init+0x150>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	4a47      	ldr	r2, [pc, #284]	; (8000e10 <MX_GPIO_Init+0x150>)
 8000cf2:	f043 0320 	orr.w	r3, r3, #32
 8000cf6:	6193      	str	r3, [r2, #24]
 8000cf8:	4b45      	ldr	r3, [pc, #276]	; (8000e10 <MX_GPIO_Init+0x150>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	f003 0320 	and.w	r3, r3, #32
 8000d00:	60bb      	str	r3, [r7, #8]
 8000d02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d04:	4b42      	ldr	r3, [pc, #264]	; (8000e10 <MX_GPIO_Init+0x150>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	4a41      	ldr	r2, [pc, #260]	; (8000e10 <MX_GPIO_Init+0x150>)
 8000d0a:	f043 0304 	orr.w	r3, r3, #4
 8000d0e:	6193      	str	r3, [r2, #24]
 8000d10:	4b3f      	ldr	r3, [pc, #252]	; (8000e10 <MX_GPIO_Init+0x150>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	f003 0304 	and.w	r3, r3, #4
 8000d18:	607b      	str	r3, [r7, #4]
 8000d1a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1c:	4b3c      	ldr	r3, [pc, #240]	; (8000e10 <MX_GPIO_Init+0x150>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	4a3b      	ldr	r2, [pc, #236]	; (8000e10 <MX_GPIO_Init+0x150>)
 8000d22:	f043 0308 	orr.w	r3, r3, #8
 8000d26:	6193      	str	r3, [r2, #24]
 8000d28:	4b39      	ldr	r3, [pc, #228]	; (8000e10 <MX_GPIO_Init+0x150>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	f003 0308 	and.w	r3, r3, #8
 8000d30:	603b      	str	r3, [r7, #0]
 8000d32:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|D7_Pin|D8_Pin, GPIO_PIN_RESET);
 8000d34:	2200      	movs	r2, #0
 8000d36:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000d3a:	4836      	ldr	r0, [pc, #216]	; (8000e14 <MX_GPIO_Init+0x154>)
 8000d3c:	f001 faa7 	bl	800228e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin
 8000d40:	2200      	movs	r2, #0
 8000d42:	f44f 618f 	mov.w	r1, #1144	; 0x478
 8000d46:	4834      	ldr	r0, [pc, #208]	; (8000e18 <MX_GPIO_Init+0x158>)
 8000d48:	f001 faa1 	bl	800228e <HAL_GPIO_WritePin>
                          |D10_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D9_GPIO_Port, D9_Pin, GPIO_PIN_RESET);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2180      	movs	r1, #128	; 0x80
 8000d50:	4832      	ldr	r0, [pc, #200]	; (8000e1c <MX_GPIO_Init+0x15c>)
 8000d52:	f001 fa9c 	bl	800228e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d5c:	4b30      	ldr	r3, [pc, #192]	; (8000e20 <MX_GPIO_Init+0x160>)
 8000d5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d64:	f107 0310 	add.w	r3, r7, #16
 8000d68:	4619      	mov	r1, r3
 8000d6a:	482c      	ldr	r0, [pc, #176]	; (8000e1c <MX_GPIO_Init+0x15c>)
 8000d6c:	f001 f8f4 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : A1_Pin A2_Pin */
  GPIO_InitStruct.Pin = A1_Pin|A2_Pin;
 8000d70:	2312      	movs	r3, #18
 8000d72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7c:	f107 0310 	add.w	r3, r7, #16
 8000d80:	4619      	mov	r1, r3
 8000d82:	4824      	ldr	r0, [pc, #144]	; (8000e14 <MX_GPIO_Init+0x154>)
 8000d84:	f001 f8e8 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin D7_Pin D8_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|D7_Pin|D8_Pin;
 8000d88:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000d8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	2302      	movs	r3, #2
 8000d98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9a:	f107 0310 	add.w	r3, r7, #16
 8000d9e:	4619      	mov	r1, r3
 8000da0:	481c      	ldr	r0, [pc, #112]	; (8000e14 <MX_GPIO_Init+0x154>)
 8000da2:	f001 f8d9 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_Pin */
  GPIO_InitStruct.Pin = A3_Pin;
 8000da6:	2301      	movs	r3, #1
 8000da8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000daa:	2300      	movs	r3, #0
 8000dac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dae:	2301      	movs	r3, #1
 8000db0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(A3_GPIO_Port, &GPIO_InitStruct);
 8000db2:	f107 0310 	add.w	r3, r7, #16
 8000db6:	4619      	mov	r1, r3
 8000db8:	4817      	ldr	r0, [pc, #92]	; (8000e18 <MX_GPIO_Init+0x158>)
 8000dba:	f001 f8cd 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin
                           D10_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin
 8000dbe:	f44f 638f 	mov.w	r3, #1144	; 0x478
 8000dc2:	613b      	str	r3, [r7, #16]
                          |D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd0:	f107 0310 	add.w	r3, r7, #16
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4810      	ldr	r0, [pc, #64]	; (8000e18 <MX_GPIO_Init+0x158>)
 8000dd8:	f001 f8be 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : D9_Pin */
  GPIO_InitStruct.Pin = D9_Pin;
 8000ddc:	2380      	movs	r3, #128	; 0x80
 8000dde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de0:	2301      	movs	r3, #1
 8000de2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	2302      	movs	r3, #2
 8000dea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D9_GPIO_Port, &GPIO_InitStruct);
 8000dec:	f107 0310 	add.w	r3, r7, #16
 8000df0:	4619      	mov	r1, r3
 8000df2:	480a      	ldr	r0, [pc, #40]	; (8000e1c <MX_GPIO_Init+0x15c>)
 8000df4:	f001 f8b0 	bl	8001f58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	2028      	movs	r0, #40	; 0x28
 8000dfe:	f000 fe8e 	bl	8001b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e02:	2028      	movs	r0, #40	; 0x28
 8000e04:	f000 fea7 	bl	8001b56 <HAL_NVIC_EnableIRQ>

}
 8000e08:	bf00      	nop
 8000e0a:	3720      	adds	r7, #32
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40021000 	.word	0x40021000
 8000e14:	40010800 	.word	0x40010800
 8000e18:	40010c00 	.word	0x40010c00
 8000e1c:	40011000 	.word	0x40011000
 8000e20:	10110000 	.word	0x10110000

08000e24 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8000e2c:	f000 f8b6 	bl	8000f9c <SCH_Update>
}
 8000e30:	bf00      	nop
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e3c:	b672      	cpsid	i
}
 8000e3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <Error_Handler+0x8>
	...

08000e44 <SCH_Init>:

#include "scheduler.h"

DLinkedList listTask;

void SCH_Init(void){
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
	listTask.head = NULL;
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <SCH_Init+0x20>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	605a      	str	r2, [r3, #4]
	listTask.tail = NULL;
 8000e4e:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <SCH_Init+0x20>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
	listTask.nTask = 0;
 8000e54:	4b03      	ldr	r3, [pc, #12]	; (8000e64 <SCH_Init+0x20>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
}
 8000e5a:	bf00      	nop
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bc80      	pop	{r7}
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	20000294 	.word	0x20000294

08000e68 <SCH_Add_Task>:

void SCH_Add_Task(void (*function)(), uint32_t DELAY, uint32_t PERIOD){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
	sTask * newTask = (sTask *) malloc (sizeof(sTask));
 8000e74:	2014      	movs	r0, #20
 8000e76:	f004 fd0f 	bl	8005898 <malloc>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	613b      	str	r3, [r7, #16]
	if (newTask == NULL) return;
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	f000 8082 	beq.w	8000f8a <SCH_Add_Task+0x122>

	newTask->pTask = function;
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	68fa      	ldr	r2, [r7, #12]
 8000e8a:	601a      	str	r2, [r3, #0]
	newTask->Delay = DELAY/10;
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	4a41      	ldr	r2, [pc, #260]	; (8000f94 <SCH_Add_Task+0x12c>)
 8000e90:	fba2 2303 	umull	r2, r3, r2, r3
 8000e94:	08da      	lsrs	r2, r3, #3
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	605a      	str	r2, [r3, #4]
	newTask->Period = PERIOD/10;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a3d      	ldr	r2, [pc, #244]	; (8000f94 <SCH_Add_Task+0x12c>)
 8000e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea2:	08da      	lsrs	r2, r3, #3
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	609a      	str	r2, [r3, #8]
	newTask->nextTask = NULL;
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	611a      	str	r2, [r3, #16]
	newTask->preTask = NULL;
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	60da      	str	r2, [r3, #12]


	if(listTask.head == NULL){
 8000eb4:	4b38      	ldr	r3, [pc, #224]	; (8000f98 <SCH_Add_Task+0x130>)
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d10b      	bne.n	8000ed4 <SCH_Add_Task+0x6c>
		listTask.head = newTask;
 8000ebc:	4a36      	ldr	r2, [pc, #216]	; (8000f98 <SCH_Add_Task+0x130>)
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	6053      	str	r3, [r2, #4]
		listTask.tail = newTask;
 8000ec2:	4a35      	ldr	r2, [pc, #212]	; (8000f98 <SCH_Add_Task+0x130>)
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	6093      	str	r3, [r2, #8]
		listTask.nTask++;
 8000ec8:	4b33      	ldr	r3, [pc, #204]	; (8000f98 <SCH_Add_Task+0x130>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	4a32      	ldr	r2, [pc, #200]	; (8000f98 <SCH_Add_Task+0x130>)
 8000ed0:	6013      	str	r3, [r2, #0]
		return;
 8000ed2:	e05b      	b.n	8000f8c <SCH_Add_Task+0x124>
	}

	sTask *currTask = listTask.head;
 8000ed4:	4b30      	ldr	r3, [pc, #192]	; (8000f98 <SCH_Add_Task+0x130>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	617b      	str	r3, [r7, #20]
	while(currTask != NULL && newTask->Delay >= currTask->Delay){
 8000eda:	e009      	b.n	8000ef0 <SCH_Add_Task+0x88>
		newTask->Delay = newTask->Delay - currTask->Delay;
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	685a      	ldr	r2, [r3, #4]
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	1ad2      	subs	r2, r2, r3
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	605a      	str	r2, [r3, #4]
		currTask = currTask->nextTask;
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	691b      	ldr	r3, [r3, #16]
 8000eee:	617b      	str	r3, [r7, #20]
	while(currTask != NULL && newTask->Delay >= currTask->Delay){
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d005      	beq.n	8000f02 <SCH_Add_Task+0x9a>
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	685a      	ldr	r2, [r3, #4]
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d2ec      	bcs.n	8000edc <SCH_Add_Task+0x74>
	}

	if(currTask == listTask.head){
 8000f02:	4b25      	ldr	r3, [pc, #148]	; (8000f98 <SCH_Add_Task+0x130>)
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	697a      	ldr	r2, [r7, #20]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d114      	bne.n	8000f36 <SCH_Add_Task+0xce>
		newTask->nextTask = listTask.head;
 8000f0c:	4b22      	ldr	r3, [pc, #136]	; (8000f98 <SCH_Add_Task+0x130>)
 8000f0e:	685a      	ldr	r2, [r3, #4]
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	611a      	str	r2, [r3, #16]
		listTask.head->preTask = newTask;
 8000f14:	4b20      	ldr	r3, [pc, #128]	; (8000f98 <SCH_Add_Task+0x130>)
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	60da      	str	r2, [r3, #12]
		listTask.head->Delay = listTask.head->Delay - newTask->Delay;
 8000f1c:	4b1e      	ldr	r3, [pc, #120]	; (8000f98 <SCH_Add_Task+0x130>)
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	6859      	ldr	r1, [r3, #4]
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	685a      	ldr	r2, [r3, #4]
 8000f26:	4b1c      	ldr	r3, [pc, #112]	; (8000f98 <SCH_Add_Task+0x130>)
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	1a8a      	subs	r2, r1, r2
 8000f2c:	605a      	str	r2, [r3, #4]
		listTask.head = newTask;
 8000f2e:	4a1a      	ldr	r2, [pc, #104]	; (8000f98 <SCH_Add_Task+0x130>)
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	6053      	str	r3, [r2, #4]
 8000f34:	e023      	b.n	8000f7e <SCH_Add_Task+0x116>
	}
	else if(currTask == NULL){
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d10b      	bne.n	8000f54 <SCH_Add_Task+0xec>
		newTask->preTask = listTask.tail;
 8000f3c:	4b16      	ldr	r3, [pc, #88]	; (8000f98 <SCH_Add_Task+0x130>)
 8000f3e:	689a      	ldr	r2, [r3, #8]
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	60da      	str	r2, [r3, #12]
		listTask.tail->nextTask = newTask;
 8000f44:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <SCH_Add_Task+0x130>)
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	611a      	str	r2, [r3, #16]
		listTask.tail = newTask;
 8000f4c:	4a12      	ldr	r2, [pc, #72]	; (8000f98 <SCH_Add_Task+0x130>)
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	6093      	str	r3, [r2, #8]
 8000f52:	e014      	b.n	8000f7e <SCH_Add_Task+0x116>
	}
	else{
		newTask->nextTask = currTask;
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	697a      	ldr	r2, [r7, #20]
 8000f58:	611a      	str	r2, [r3, #16]
		newTask->preTask = currTask->preTask;
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	68da      	ldr	r2, [r3, #12]
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	60da      	str	r2, [r3, #12]
		currTask->preTask->nextTask = newTask;
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	611a      	str	r2, [r3, #16]
		currTask->preTask = newTask;
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	60da      	str	r2, [r3, #12]
		currTask->Delay = currTask->Delay - newTask->Delay;
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	685a      	ldr	r2, [r3, #4]
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	1ad2      	subs	r2, r2, r3
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	605a      	str	r2, [r3, #4]
		}

	listTask.nTask++;
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <SCH_Add_Task+0x130>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	3301      	adds	r3, #1
 8000f84:	4a04      	ldr	r2, [pc, #16]	; (8000f98 <SCH_Add_Task+0x130>)
 8000f86:	6013      	str	r3, [r2, #0]
 8000f88:	e000      	b.n	8000f8c <SCH_Add_Task+0x124>
	if (newTask == NULL) return;
 8000f8a:	bf00      	nop
}
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	cccccccd 	.word	0xcccccccd
 8000f98:	20000294 	.word	0x20000294

08000f9c <SCH_Update>:

void SCH_Update(void){
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
	if(listTask.head != NULL) listTask.head->Delay--;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <SCH_Update+0x20>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d004      	beq.n	8000fb2 <SCH_Update+0x16>
 8000fa8:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <SCH_Update+0x20>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	685a      	ldr	r2, [r3, #4]
 8000fae:	3a01      	subs	r2, #1
 8000fb0:	605a      	str	r2, [r3, #4]
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bc80      	pop	{r7}
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	20000294 	.word	0x20000294

08000fc0 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
	if(listTask.head == NULL) return;
 8000fc6:	4b22      	ldr	r3, [pc, #136]	; (8001050 <SCH_Dispatch_Tasks+0x90>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d03b      	beq.n	8001046 <SCH_Dispatch_Tasks+0x86>

	if(listTask.head->Delay <= 0){
 8000fce:	4b20      	ldr	r3, [pc, #128]	; (8001050 <SCH_Dispatch_Tasks+0x90>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d137      	bne.n	8001048 <SCH_Dispatch_Tasks+0x88>
		listTask.head->pTask();
 8000fd8:	4b1d      	ldr	r3, [pc, #116]	; (8001050 <SCH_Dispatch_Tasks+0x90>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4798      	blx	r3
		sTask *removedTask = listTask.head;
 8000fe0:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <SCH_Dispatch_Tasks+0x90>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	607b      	str	r3, [r7, #4]
		listTask.head = listTask.head->nextTask;
 8000fe6:	4b1a      	ldr	r3, [pc, #104]	; (8001050 <SCH_Dispatch_Tasks+0x90>)
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	691b      	ldr	r3, [r3, #16]
 8000fec:	4a18      	ldr	r2, [pc, #96]	; (8001050 <SCH_Dispatch_Tasks+0x90>)
 8000fee:	6053      	str	r3, [r2, #4]

		if(listTask.head != NULL) listTask.head->preTask = NULL;
 8000ff0:	4b17      	ldr	r3, [pc, #92]	; (8001050 <SCH_Dispatch_Tasks+0x90>)
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d004      	beq.n	8001002 <SCH_Dispatch_Tasks+0x42>
 8000ff8:	4b15      	ldr	r3, [pc, #84]	; (8001050 <SCH_Dispatch_Tasks+0x90>)
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	60da      	str	r2, [r3, #12]
 8001000:	e002      	b.n	8001008 <SCH_Dispatch_Tasks+0x48>
		else listTask.tail = NULL;
 8001002:	4b13      	ldr	r3, [pc, #76]	; (8001050 <SCH_Dispatch_Tasks+0x90>)
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]

		listTask.nTask--;
 8001008:	4b11      	ldr	r3, [pc, #68]	; (8001050 <SCH_Dispatch_Tasks+0x90>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	3b01      	subs	r3, #1
 800100e:	4a10      	ldr	r2, [pc, #64]	; (8001050 <SCH_Dispatch_Tasks+0x90>)
 8001010:	6013      	str	r3, [r2, #0]
		if(removedTask->Period > 0){
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d011      	beq.n	800103e <SCH_Dispatch_Tasks+0x7e>
			SCH_Add_Task(removedTask->pTask, removedTask->Period * 10, removedTask->Period * 10);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6818      	ldr	r0, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	689a      	ldr	r2, [r3, #8]
 8001022:	4613      	mov	r3, r2
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	4413      	add	r3, r2
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	4619      	mov	r1, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	689a      	ldr	r2, [r3, #8]
 8001030:	4613      	mov	r3, r2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	4413      	add	r3, r2
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	461a      	mov	r2, r3
 800103a:	f7ff ff15 	bl	8000e68 <SCH_Add_Task>
		}

		free(removedTask);
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f004 fc32 	bl	80058a8 <free>
 8001044:	e000      	b.n	8001048 <SCH_Dispatch_Tasks+0x88>
	if(listTask.head == NULL) return;
 8001046:	bf00      	nop
	}
}
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000294 	.word	0x20000294

08001054 <SCH_Delete>:

void SCH_Delete(void (*pFunction)()){
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	if(listTask.head == NULL) return;
 800105c:	4b34      	ldr	r3, [pc, #208]	; (8001130 <SCH_Delete+0xdc>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d060      	beq.n	8001126 <SCH_Delete+0xd2>

	sTask *currTask = listTask.head;
 8001064:	4b32      	ldr	r3, [pc, #200]	; (8001130 <SCH_Delete+0xdc>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	60fb      	str	r3, [r7, #12]
	while(currTask != NULL){
 800106a:	e058      	b.n	800111e <SCH_Delete+0xca>
		if(currTask->pTask == pFunction){
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	429a      	cmp	r2, r3
 8001074:	d150      	bne.n	8001118 <SCH_Delete+0xc4>
			sTask *removedTask = currTask;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	60bb      	str	r3, [r7, #8]
			currTask = currTask->nextTask;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	691b      	ldr	r3, [r3, #16]
 800107e:	60fb      	str	r3, [r7, #12]

			if(removedTask == listTask.head){
 8001080:	4b2b      	ldr	r3, [pc, #172]	; (8001130 <SCH_Delete+0xdc>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	68ba      	ldr	r2, [r7, #8]
 8001086:	429a      	cmp	r2, r3
 8001088:	d11a      	bne.n	80010c0 <SCH_Delete+0x6c>
				listTask.head = listTask.head->nextTask;
 800108a:	4b29      	ldr	r3, [pc, #164]	; (8001130 <SCH_Delete+0xdc>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	691b      	ldr	r3, [r3, #16]
 8001090:	4a27      	ldr	r2, [pc, #156]	; (8001130 <SCH_Delete+0xdc>)
 8001092:	6053      	str	r3, [r2, #4]
				if (listTask.head != NULL){
 8001094:	4b26      	ldr	r3, [pc, #152]	; (8001130 <SCH_Delete+0xdc>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d00d      	beq.n	80010b8 <SCH_Delete+0x64>
					listTask.head->preTask = NULL;
 800109c:	4b24      	ldr	r3, [pc, #144]	; (8001130 <SCH_Delete+0xdc>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	60da      	str	r2, [r3, #12]
					listTask.head->Delay = listTask.head->Delay + removedTask->Delay;
 80010a4:	4b22      	ldr	r3, [pc, #136]	; (8001130 <SCH_Delete+0xdc>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	6859      	ldr	r1, [r3, #4]
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	685a      	ldr	r2, [r3, #4]
 80010ae:	4b20      	ldr	r3, [pc, #128]	; (8001130 <SCH_Delete+0xdc>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	440a      	add	r2, r1
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	e026      	b.n	8001106 <SCH_Delete+0xb2>
				}
				else{
					listTask.tail = NULL;
 80010b8:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <SCH_Delete+0xdc>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	e022      	b.n	8001106 <SCH_Delete+0xb2>
				}
			}
			else if(removedTask == listTask.tail){
 80010c0:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <SCH_Delete+0xdc>)
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	68ba      	ldr	r2, [r7, #8]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d10a      	bne.n	80010e0 <SCH_Delete+0x8c>
				listTask.tail->preTask->nextTask = NULL;
 80010ca:	4b19      	ldr	r3, [pc, #100]	; (8001130 <SCH_Delete+0xdc>)
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	2200      	movs	r2, #0
 80010d2:	611a      	str	r2, [r3, #16]
				listTask.tail = listTask.tail->preTask;
 80010d4:	4b16      	ldr	r3, [pc, #88]	; (8001130 <SCH_Delete+0xdc>)
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	4a15      	ldr	r2, [pc, #84]	; (8001130 <SCH_Delete+0xdc>)
 80010dc:	6093      	str	r3, [r2, #8]
 80010de:	e012      	b.n	8001106 <SCH_Delete+0xb2>
			}
			else{
				removedTask->preTask->nextTask = removedTask->nextTask;
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	68ba      	ldr	r2, [r7, #8]
 80010e6:	6912      	ldr	r2, [r2, #16]
 80010e8:	611a      	str	r2, [r3, #16]
				removedTask->nextTask->preTask = removedTask->preTask;
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	691b      	ldr	r3, [r3, #16]
 80010ee:	68ba      	ldr	r2, [r7, #8]
 80010f0:	68d2      	ldr	r2, [r2, #12]
 80010f2:	60da      	str	r2, [r3, #12]
				removedTask->nextTask->Delay = removedTask->Delay + removedTask->nextTask->Delay;
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	6859      	ldr	r1, [r3, #4]
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	691b      	ldr	r3, [r3, #16]
 80010fc:	685a      	ldr	r2, [r3, #4]
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	691b      	ldr	r3, [r3, #16]
 8001102:	440a      	add	r2, r1
 8001104:	605a      	str	r2, [r3, #4]
			}

			free(removedTask);
 8001106:	68b8      	ldr	r0, [r7, #8]
 8001108:	f004 fbce 	bl	80058a8 <free>
			listTask.nTask--;
 800110c:	4b08      	ldr	r3, [pc, #32]	; (8001130 <SCH_Delete+0xdc>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	3b01      	subs	r3, #1
 8001112:	4a07      	ldr	r2, [pc, #28]	; (8001130 <SCH_Delete+0xdc>)
 8001114:	6013      	str	r3, [r2, #0]
 8001116:	e002      	b.n	800111e <SCH_Delete+0xca>
		}
		else currTask = currTask->nextTask;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	691b      	ldr	r3, [r3, #16]
 800111c:	60fb      	str	r3, [r7, #12]
	while(currTask != NULL){
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1a3      	bne.n	800106c <SCH_Delete+0x18>
 8001124:	e000      	b.n	8001128 <SCH_Delete+0xd4>
	if(listTask.head == NULL) return;
 8001126:	bf00      	nop
	}
}
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000294 	.word	0x20000294

08001134 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800113a:	4b15      	ldr	r3, [pc, #84]	; (8001190 <HAL_MspInit+0x5c>)
 800113c:	699b      	ldr	r3, [r3, #24]
 800113e:	4a14      	ldr	r2, [pc, #80]	; (8001190 <HAL_MspInit+0x5c>)
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	6193      	str	r3, [r2, #24]
 8001146:	4b12      	ldr	r3, [pc, #72]	; (8001190 <HAL_MspInit+0x5c>)
 8001148:	699b      	ldr	r3, [r3, #24]
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001152:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <HAL_MspInit+0x5c>)
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	4a0e      	ldr	r2, [pc, #56]	; (8001190 <HAL_MspInit+0x5c>)
 8001158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800115c:	61d3      	str	r3, [r2, #28]
 800115e:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <HAL_MspInit+0x5c>)
 8001160:	69db      	ldr	r3, [r3, #28]
 8001162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800116a:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <HAL_MspInit+0x60>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	4a04      	ldr	r2, [pc, #16]	; (8001194 <HAL_MspInit+0x60>)
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001186:	bf00      	nop
 8001188:	3714      	adds	r7, #20
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr
 8001190:	40021000 	.word	0x40021000
 8001194:	40010000 	.word	0x40010000

08001198 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	; 0x28
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a4b      	ldr	r2, [pc, #300]	; (80012e0 <HAL_I2C_MspInit+0x148>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	f040 808f 	bne.w	80012d8 <HAL_I2C_MspInit+0x140>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ba:	4b4a      	ldr	r3, [pc, #296]	; (80012e4 <HAL_I2C_MspInit+0x14c>)
 80011bc:	699b      	ldr	r3, [r3, #24]
 80011be:	4a49      	ldr	r2, [pc, #292]	; (80012e4 <HAL_I2C_MspInit+0x14c>)
 80011c0:	f043 0308 	orr.w	r3, r3, #8
 80011c4:	6193      	str	r3, [r2, #24]
 80011c6:	4b47      	ldr	r3, [pc, #284]	; (80012e4 <HAL_I2C_MspInit+0x14c>)
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	f003 0308 	and.w	r3, r3, #8
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011d8:	2312      	movs	r3, #18
 80011da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011dc:	2303      	movs	r3, #3
 80011de:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	4619      	mov	r1, r3
 80011e6:	4840      	ldr	r0, [pc, #256]	; (80012e8 <HAL_I2C_MspInit+0x150>)
 80011e8:	f000 feb6 	bl	8001f58 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80011ec:	4b3f      	ldr	r3, [pc, #252]	; (80012ec <HAL_I2C_MspInit+0x154>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
 80011f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
 80011fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fc:	f043 0302 	orr.w	r3, r3, #2
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
 8001202:	4a3a      	ldr	r2, [pc, #232]	; (80012ec <HAL_I2C_MspInit+0x154>)
 8001204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001206:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001208:	4b36      	ldr	r3, [pc, #216]	; (80012e4 <HAL_I2C_MspInit+0x14c>)
 800120a:	69db      	ldr	r3, [r3, #28]
 800120c:	4a35      	ldr	r2, [pc, #212]	; (80012e4 <HAL_I2C_MspInit+0x14c>)
 800120e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001212:	61d3      	str	r3, [r2, #28]
 8001214:	4b33      	ldr	r3, [pc, #204]	; (80012e4 <HAL_I2C_MspInit+0x14c>)
 8001216:	69db      	ldr	r3, [r3, #28]
 8001218:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8001220:	4b33      	ldr	r3, [pc, #204]	; (80012f0 <HAL_I2C_MspInit+0x158>)
 8001222:	4a34      	ldr	r2, [pc, #208]	; (80012f4 <HAL_I2C_MspInit+0x15c>)
 8001224:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001226:	4b32      	ldr	r3, [pc, #200]	; (80012f0 <HAL_I2C_MspInit+0x158>)
 8001228:	2210      	movs	r2, #16
 800122a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800122c:	4b30      	ldr	r3, [pc, #192]	; (80012f0 <HAL_I2C_MspInit+0x158>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001232:	4b2f      	ldr	r3, [pc, #188]	; (80012f0 <HAL_I2C_MspInit+0x158>)
 8001234:	2280      	movs	r2, #128	; 0x80
 8001236:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001238:	4b2d      	ldr	r3, [pc, #180]	; (80012f0 <HAL_I2C_MspInit+0x158>)
 800123a:	2200      	movs	r2, #0
 800123c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800123e:	4b2c      	ldr	r3, [pc, #176]	; (80012f0 <HAL_I2C_MspInit+0x158>)
 8001240:	2200      	movs	r2, #0
 8001242:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001244:	4b2a      	ldr	r3, [pc, #168]	; (80012f0 <HAL_I2C_MspInit+0x158>)
 8001246:	2200      	movs	r2, #0
 8001248:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800124a:	4b29      	ldr	r3, [pc, #164]	; (80012f0 <HAL_I2C_MspInit+0x158>)
 800124c:	2200      	movs	r2, #0
 800124e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001250:	4827      	ldr	r0, [pc, #156]	; (80012f0 <HAL_I2C_MspInit+0x158>)
 8001252:	f000 fc9b 	bl	8001b8c <HAL_DMA_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <HAL_I2C_MspInit+0xc8>
    {
      Error_Handler();
 800125c:	f7ff fdec 	bl	8000e38 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a23      	ldr	r2, [pc, #140]	; (80012f0 <HAL_I2C_MspInit+0x158>)
 8001264:	635a      	str	r2, [r3, #52]	; 0x34
 8001266:	4a22      	ldr	r2, [pc, #136]	; (80012f0 <HAL_I2C_MspInit+0x158>)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 800126c:	4b22      	ldr	r3, [pc, #136]	; (80012f8 <HAL_I2C_MspInit+0x160>)
 800126e:	4a23      	ldr	r2, [pc, #140]	; (80012fc <HAL_I2C_MspInit+0x164>)
 8001270:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001272:	4b21      	ldr	r3, [pc, #132]	; (80012f8 <HAL_I2C_MspInit+0x160>)
 8001274:	2200      	movs	r2, #0
 8001276:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001278:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <HAL_I2C_MspInit+0x160>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800127e:	4b1e      	ldr	r3, [pc, #120]	; (80012f8 <HAL_I2C_MspInit+0x160>)
 8001280:	2280      	movs	r2, #128	; 0x80
 8001282:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001284:	4b1c      	ldr	r3, [pc, #112]	; (80012f8 <HAL_I2C_MspInit+0x160>)
 8001286:	2200      	movs	r2, #0
 8001288:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800128a:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <HAL_I2C_MspInit+0x160>)
 800128c:	2200      	movs	r2, #0
 800128e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001290:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <HAL_I2C_MspInit+0x160>)
 8001292:	2200      	movs	r2, #0
 8001294:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001296:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <HAL_I2C_MspInit+0x160>)
 8001298:	2200      	movs	r2, #0
 800129a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800129c:	4816      	ldr	r0, [pc, #88]	; (80012f8 <HAL_I2C_MspInit+0x160>)
 800129e:	f000 fc75 	bl	8001b8c <HAL_DMA_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <HAL_I2C_MspInit+0x114>
    {
      Error_Handler();
 80012a8:	f7ff fdc6 	bl	8000e38 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4a12      	ldr	r2, [pc, #72]	; (80012f8 <HAL_I2C_MspInit+0x160>)
 80012b0:	639a      	str	r2, [r3, #56]	; 0x38
 80012b2:	4a11      	ldr	r2, [pc, #68]	; (80012f8 <HAL_I2C_MspInit+0x160>)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80012b8:	2200      	movs	r2, #0
 80012ba:	2100      	movs	r1, #0
 80012bc:	201f      	movs	r0, #31
 80012be:	f000 fc2e 	bl	8001b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80012c2:	201f      	movs	r0, #31
 80012c4:	f000 fc47 	bl	8001b56 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80012c8:	2200      	movs	r2, #0
 80012ca:	2100      	movs	r1, #0
 80012cc:	2020      	movs	r0, #32
 80012ce:	f000 fc26 	bl	8001b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80012d2:	2020      	movs	r0, #32
 80012d4:	f000 fc3f 	bl	8001b56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012d8:	bf00      	nop
 80012da:	3728      	adds	r7, #40	; 0x28
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40005400 	.word	0x40005400
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40010c00 	.word	0x40010c00
 80012ec:	40010000 	.word	0x40010000
 80012f0:	20000128 	.word	0x20000128
 80012f4:	4002006c 	.word	0x4002006c
 80012f8:	200001c0 	.word	0x200001c0
 80012fc:	40020080 	.word	0x40020080

08001300 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001310:	d113      	bne.n	800133a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001312:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <HAL_TIM_Base_MspInit+0x44>)
 8001314:	69db      	ldr	r3, [r3, #28]
 8001316:	4a0b      	ldr	r2, [pc, #44]	; (8001344 <HAL_TIM_Base_MspInit+0x44>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	61d3      	str	r3, [r2, #28]
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <HAL_TIM_Base_MspInit+0x44>)
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800132a:	2200      	movs	r2, #0
 800132c:	2100      	movs	r1, #0
 800132e:	201c      	movs	r0, #28
 8001330:	f000 fbf5 	bl	8001b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001334:	201c      	movs	r0, #28
 8001336:	f000 fc0e 	bl	8001b56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800133a:	bf00      	nop
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40021000 	.word	0x40021000

08001348 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b088      	sub	sp, #32
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001350:	f107 0310 	add.w	r3, r7, #16
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a15      	ldr	r2, [pc, #84]	; (80013b8 <HAL_UART_MspInit+0x70>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d123      	bne.n	80013b0 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001368:	4b14      	ldr	r3, [pc, #80]	; (80013bc <HAL_UART_MspInit+0x74>)
 800136a:	69db      	ldr	r3, [r3, #28]
 800136c:	4a13      	ldr	r2, [pc, #76]	; (80013bc <HAL_UART_MspInit+0x74>)
 800136e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001372:	61d3      	str	r3, [r2, #28]
 8001374:	4b11      	ldr	r3, [pc, #68]	; (80013bc <HAL_UART_MspInit+0x74>)
 8001376:	69db      	ldr	r3, [r3, #28]
 8001378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001380:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <HAL_UART_MspInit+0x74>)
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	4a0d      	ldr	r2, [pc, #52]	; (80013bc <HAL_UART_MspInit+0x74>)
 8001386:	f043 0304 	orr.w	r3, r3, #4
 800138a:	6193      	str	r3, [r2, #24]
 800138c:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <HAL_UART_MspInit+0x74>)
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	f003 0304 	and.w	r3, r3, #4
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001398:	230c      	movs	r3, #12
 800139a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139c:	2302      	movs	r3, #2
 800139e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a0:	2302      	movs	r3, #2
 80013a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a4:	f107 0310 	add.w	r3, r7, #16
 80013a8:	4619      	mov	r1, r3
 80013aa:	4805      	ldr	r0, [pc, #20]	; (80013c0 <HAL_UART_MspInit+0x78>)
 80013ac:	f000 fdd4 	bl	8001f58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013b0:	bf00      	nop
 80013b2:	3720      	adds	r7, #32
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40004400 	.word	0x40004400
 80013bc:	40021000 	.word	0x40021000
 80013c0:	40010800 	.word	0x40010800

080013c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013c8:	e7fe      	b.n	80013c8 <NMI_Handler+0x4>

080013ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ce:	e7fe      	b.n	80013ce <HardFault_Handler+0x4>

080013d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d4:	e7fe      	b.n	80013d4 <MemManage_Handler+0x4>

080013d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013da:	e7fe      	b.n	80013da <BusFault_Handler+0x4>

080013dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e0:	e7fe      	b.n	80013e0 <UsageFault_Handler+0x4>

080013e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr

080013ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc80      	pop	{r7}
 80013f8:	4770      	bx	lr

080013fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr

08001406 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800140a:	f000 fa71 	bl	80018f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001418:	4802      	ldr	r0, [pc, #8]	; (8001424 <DMA1_Channel6_IRQHandler+0x10>)
 800141a:	f000 fc89 	bl	8001d30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000128 	.word	0x20000128

08001428 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800142c:	4802      	ldr	r0, [pc, #8]	; (8001438 <DMA1_Channel7_IRQHandler+0x10>)
 800142e:	f000 fc7f 	bl	8001d30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	200001c0 	.word	0x200001c0

0800143c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001440:	4802      	ldr	r0, [pc, #8]	; (800144c <TIM2_IRQHandler+0x10>)
 8001442:	f003 fdd1 	bl	8004fe8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000204 	.word	0x20000204

08001450 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001454:	4802      	ldr	r0, [pc, #8]	; (8001460 <I2C1_EV_IRQHandler+0x10>)
 8001456:	f001 f9c3 	bl	80027e0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	2000016c 	.word	0x2000016c

08001464 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001468:	4802      	ldr	r0, [pc, #8]	; (8001474 <I2C1_ER_IRQHandler+0x10>)
 800146a:	f001 fb2a 	bl	8002ac2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	2000016c 	.word	0x2000016c

08001478 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800147c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001480:	f000 ff36 	bl	80022f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001484:	bf00      	nop
 8001486:	bd80      	pop	{r7, pc}

08001488 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001490:	4a14      	ldr	r2, [pc, #80]	; (80014e4 <_sbrk+0x5c>)
 8001492:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <_sbrk+0x60>)
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800149c:	4b13      	ldr	r3, [pc, #76]	; (80014ec <_sbrk+0x64>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d102      	bne.n	80014aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014a4:	4b11      	ldr	r3, [pc, #68]	; (80014ec <_sbrk+0x64>)
 80014a6:	4a12      	ldr	r2, [pc, #72]	; (80014f0 <_sbrk+0x68>)
 80014a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014aa:	4b10      	ldr	r3, [pc, #64]	; (80014ec <_sbrk+0x64>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4413      	add	r3, r2
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d207      	bcs.n	80014c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014b8:	f004 f9c4 	bl	8005844 <__errno>
 80014bc:	4603      	mov	r3, r0
 80014be:	220c      	movs	r2, #12
 80014c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014c2:	f04f 33ff 	mov.w	r3, #4294967295
 80014c6:	e009      	b.n	80014dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014c8:	4b08      	ldr	r3, [pc, #32]	; (80014ec <_sbrk+0x64>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ce:	4b07      	ldr	r3, [pc, #28]	; (80014ec <_sbrk+0x64>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4413      	add	r3, r2
 80014d6:	4a05      	ldr	r2, [pc, #20]	; (80014ec <_sbrk+0x64>)
 80014d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014da:	68fb      	ldr	r3, [r7, #12]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3718      	adds	r7, #24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20005000 	.word	0x20005000
 80014e8:	00000400 	.word	0x00000400
 80014ec:	200000fc 	.word	0x200000fc
 80014f0:	200002b8 	.word	0x200002b8

080014f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr

08001500 <setInit>:


#include "traffic_light.h"
#include "main.h"

void setInit(){
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8001504:	2200      	movs	r2, #0
 8001506:	2108      	movs	r1, #8
 8001508:	4815      	ldr	r0, [pc, #84]	; (8001560 <setInit+0x60>)
 800150a:	f000 fec0 	bl	800228e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 800150e:	2200      	movs	r2, #0
 8001510:	2120      	movs	r1, #32
 8001512:	4813      	ldr	r0, [pc, #76]	; (8001560 <setInit+0x60>)
 8001514:	f000 febb 	bl	800228e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8001518:	2200      	movs	r2, #0
 800151a:	2110      	movs	r1, #16
 800151c:	4810      	ldr	r0, [pc, #64]	; (8001560 <setInit+0x60>)
 800151e:	f000 feb6 	bl	800228e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8001522:	2200      	movs	r2, #0
 8001524:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001528:	480d      	ldr	r0, [pc, #52]	; (8001560 <setInit+0x60>)
 800152a:	f000 feb0 	bl	800228e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 800152e:	2200      	movs	r2, #0
 8001530:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001534:	480b      	ldr	r0, [pc, #44]	; (8001564 <setInit+0x64>)
 8001536:	f000 feaa 	bl	800228e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, RESET);
 800153a:	2200      	movs	r2, #0
 800153c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001540:	4808      	ldr	r0, [pc, #32]	; (8001564 <setInit+0x64>)
 8001542:	f000 fea4 	bl	800228e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D9_GPIO_Port, D9_Pin, RESET);
 8001546:	2200      	movs	r2, #0
 8001548:	2180      	movs	r1, #128	; 0x80
 800154a:	4807      	ldr	r0, [pc, #28]	; (8001568 <setInit+0x68>)
 800154c:	f000 fe9f 	bl	800228e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D10_GPIO_Port, D10_Pin, RESET);
 8001550:	2200      	movs	r2, #0
 8001552:	2140      	movs	r1, #64	; 0x40
 8001554:	4802      	ldr	r0, [pc, #8]	; (8001560 <setInit+0x60>)
 8001556:	f000 fe9a 	bl	800228e <HAL_GPIO_WritePin>
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40010c00 	.word	0x40010c00
 8001564:	40010800 	.word	0x40010800
 8001568:	40011000 	.word	0x40011000

0800156c <setGreen>:

void setGreen(int i){
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
	if(i == 0){
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d114      	bne.n	80015a4 <setGreen+0x38>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 800157a:	2201      	movs	r2, #1
 800157c:	2108      	movs	r1, #8
 800157e:	4818      	ldr	r0, [pc, #96]	; (80015e0 <setGreen+0x74>)
 8001580:	f000 fe85 	bl	800228e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8001584:	2200      	movs	r2, #0
 8001586:	2120      	movs	r1, #32
 8001588:	4815      	ldr	r0, [pc, #84]	; (80015e0 <setGreen+0x74>)
 800158a:	f000 fe80 	bl	800228e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 800158e:	2201      	movs	r2, #1
 8001590:	2110      	movs	r1, #16
 8001592:	4813      	ldr	r0, [pc, #76]	; (80015e0 <setGreen+0x74>)
 8001594:	f000 fe7b 	bl	800228e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8001598:	2200      	movs	r2, #0
 800159a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800159e:	4810      	ldr	r0, [pc, #64]	; (80015e0 <setGreen+0x74>)
 80015a0:	f000 fe75 	bl	800228e <HAL_GPIO_WritePin>
	}
	if(i == 1){
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d115      	bne.n	80015d6 <setGreen+0x6a>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 80015aa:	2201      	movs	r2, #1
 80015ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015b0:	480c      	ldr	r0, [pc, #48]	; (80015e4 <setGreen+0x78>)
 80015b2:	f000 fe6c 	bl	800228e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, RESET);
 80015b6:	2200      	movs	r2, #0
 80015b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015bc:	4809      	ldr	r0, [pc, #36]	; (80015e4 <setGreen+0x78>)
 80015be:	f000 fe66 	bl	800228e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D9_GPIO_Port, D9_Pin, SET);
 80015c2:	2201      	movs	r2, #1
 80015c4:	2180      	movs	r1, #128	; 0x80
 80015c6:	4808      	ldr	r0, [pc, #32]	; (80015e8 <setGreen+0x7c>)
 80015c8:	f000 fe61 	bl	800228e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D10_GPIO_Port, D10_Pin, RESET);
 80015cc:	2200      	movs	r2, #0
 80015ce:	2140      	movs	r1, #64	; 0x40
 80015d0:	4803      	ldr	r0, [pc, #12]	; (80015e0 <setGreen+0x74>)
 80015d2:	f000 fe5c 	bl	800228e <HAL_GPIO_WritePin>
	}
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40010c00 	.word	0x40010c00
 80015e4:	40010800 	.word	0x40010800
 80015e8:	40011000 	.word	0x40011000

080015ec <setYellow>:

void setYellow(int i){
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
	if(i == 0){
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d114      	bne.n	8001624 <setYellow+0x38>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2108      	movs	r1, #8
 80015fe:	4818      	ldr	r0, [pc, #96]	; (8001660 <setYellow+0x74>)
 8001600:	f000 fe45 	bl	800228e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8001604:	2201      	movs	r2, #1
 8001606:	2120      	movs	r1, #32
 8001608:	4815      	ldr	r0, [pc, #84]	; (8001660 <setYellow+0x74>)
 800160a:	f000 fe40 	bl	800228e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 800160e:	2200      	movs	r2, #0
 8001610:	2110      	movs	r1, #16
 8001612:	4813      	ldr	r0, [pc, #76]	; (8001660 <setYellow+0x74>)
 8001614:	f000 fe3b 	bl	800228e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 8001618:	2201      	movs	r2, #1
 800161a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800161e:	4810      	ldr	r0, [pc, #64]	; (8001660 <setYellow+0x74>)
 8001620:	f000 fe35 	bl	800228e <HAL_GPIO_WritePin>
	}
	if(i == 1){
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d115      	bne.n	8001656 <setYellow+0x6a>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 800162a:	2200      	movs	r2, #0
 800162c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001630:	480c      	ldr	r0, [pc, #48]	; (8001664 <setYellow+0x78>)
 8001632:	f000 fe2c 	bl	800228e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, SET);
 8001636:	2201      	movs	r2, #1
 8001638:	f44f 7100 	mov.w	r1, #512	; 0x200
 800163c:	4809      	ldr	r0, [pc, #36]	; (8001664 <setYellow+0x78>)
 800163e:	f000 fe26 	bl	800228e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D9_GPIO_Port, D9_Pin, RESET);
 8001642:	2200      	movs	r2, #0
 8001644:	2180      	movs	r1, #128	; 0x80
 8001646:	4808      	ldr	r0, [pc, #32]	; (8001668 <setYellow+0x7c>)
 8001648:	f000 fe21 	bl	800228e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D10_GPIO_Port, D10_Pin, SET);
 800164c:	2201      	movs	r2, #1
 800164e:	2140      	movs	r1, #64	; 0x40
 8001650:	4803      	ldr	r0, [pc, #12]	; (8001660 <setYellow+0x74>)
 8001652:	f000 fe1c 	bl	800228e <HAL_GPIO_WritePin>
	}
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40010c00 	.word	0x40010c00
 8001664:	40010800 	.word	0x40010800
 8001668:	40011000 	.word	0x40011000

0800166c <setRed>:

void setRed(int i){
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
	if(i == 0){
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d114      	bne.n	80016a4 <setRed+0x38>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 800167a:	2201      	movs	r2, #1
 800167c:	2108      	movs	r1, #8
 800167e:	4818      	ldr	r0, [pc, #96]	; (80016e0 <setRed+0x74>)
 8001680:	f000 fe05 	bl	800228e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8001684:	2201      	movs	r2, #1
 8001686:	2120      	movs	r1, #32
 8001688:	4815      	ldr	r0, [pc, #84]	; (80016e0 <setRed+0x74>)
 800168a:	f000 fe00 	bl	800228e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 800168e:	2201      	movs	r2, #1
 8001690:	2110      	movs	r1, #16
 8001692:	4813      	ldr	r0, [pc, #76]	; (80016e0 <setRed+0x74>)
 8001694:	f000 fdfb 	bl	800228e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 8001698:	2201      	movs	r2, #1
 800169a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800169e:	4810      	ldr	r0, [pc, #64]	; (80016e0 <setRed+0x74>)
 80016a0:	f000 fdf5 	bl	800228e <HAL_GPIO_WritePin>
	}
	if(i == 1){
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d115      	bne.n	80016d6 <setRed+0x6a>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 80016aa:	2201      	movs	r2, #1
 80016ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016b0:	480c      	ldr	r0, [pc, #48]	; (80016e4 <setRed+0x78>)
 80016b2:	f000 fdec 	bl	800228e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, SET);
 80016b6:	2201      	movs	r2, #1
 80016b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016bc:	4809      	ldr	r0, [pc, #36]	; (80016e4 <setRed+0x78>)
 80016be:	f000 fde6 	bl	800228e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D9_GPIO_Port, D9_Pin, SET);
 80016c2:	2201      	movs	r2, #1
 80016c4:	2180      	movs	r1, #128	; 0x80
 80016c6:	4808      	ldr	r0, [pc, #32]	; (80016e8 <setRed+0x7c>)
 80016c8:	f000 fde1 	bl	800228e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D10_GPIO_Port, D10_Pin, SET);
 80016cc:	2201      	movs	r2, #1
 80016ce:	2140      	movs	r1, #64	; 0x40
 80016d0:	4803      	ldr	r0, [pc, #12]	; (80016e0 <setRed+0x74>)
 80016d2:	f000 fddc 	bl	800228e <HAL_GPIO_WritePin>
	}
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40010c00 	.word	0x40010c00
 80016e4:	40010800 	.word	0x40010800
 80016e8:	40011000 	.word	0x40011000

080016ec <blinkGreen>:

void blinkGreen(){
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 80016f0:	2108      	movs	r1, #8
 80016f2:	4814      	ldr	r0, [pc, #80]	; (8001744 <blinkGreen+0x58>)
 80016f4:	f000 fde3 	bl	80022be <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 80016f8:	2200      	movs	r2, #0
 80016fa:	2120      	movs	r1, #32
 80016fc:	4811      	ldr	r0, [pc, #68]	; (8001744 <blinkGreen+0x58>)
 80016fe:	f000 fdc6 	bl	800228e <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 8001702:	2110      	movs	r1, #16
 8001704:	480f      	ldr	r0, [pc, #60]	; (8001744 <blinkGreen+0x58>)
 8001706:	f000 fdda 	bl	80022be <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 800170a:	2200      	movs	r2, #0
 800170c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001710:	480c      	ldr	r0, [pc, #48]	; (8001744 <blinkGreen+0x58>)
 8001712:	f000 fdbc 	bl	800228e <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(D7_GPIO_Port, D7_Pin);
 8001716:	f44f 7180 	mov.w	r1, #256	; 0x100
 800171a:	480b      	ldr	r0, [pc, #44]	; (8001748 <blinkGreen+0x5c>)
 800171c:	f000 fdcf 	bl	80022be <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, RESET);
 8001720:	2200      	movs	r2, #0
 8001722:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001726:	4808      	ldr	r0, [pc, #32]	; (8001748 <blinkGreen+0x5c>)
 8001728:	f000 fdb1 	bl	800228e <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(D9_GPIO_Port, D9_Pin);
 800172c:	2180      	movs	r1, #128	; 0x80
 800172e:	4807      	ldr	r0, [pc, #28]	; (800174c <blinkGreen+0x60>)
 8001730:	f000 fdc5 	bl	80022be <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D10_GPIO_Port, D10_Pin, RESET);
 8001734:	2200      	movs	r2, #0
 8001736:	2140      	movs	r1, #64	; 0x40
 8001738:	4802      	ldr	r0, [pc, #8]	; (8001744 <blinkGreen+0x58>)
 800173a:	f000 fda8 	bl	800228e <HAL_GPIO_WritePin>
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40010c00 	.word	0x40010c00
 8001748:	40010800 	.word	0x40010800
 800174c:	40011000 	.word	0x40011000

08001750 <blinkRed>:

void blinkRed(){
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 8001754:	2108      	movs	r1, #8
 8001756:	4812      	ldr	r0, [pc, #72]	; (80017a0 <blinkRed+0x50>)
 8001758:	f000 fdb1 	bl	80022be <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 800175c:	2120      	movs	r1, #32
 800175e:	4810      	ldr	r0, [pc, #64]	; (80017a0 <blinkRed+0x50>)
 8001760:	f000 fdad 	bl	80022be <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 8001764:	2110      	movs	r1, #16
 8001766:	480e      	ldr	r0, [pc, #56]	; (80017a0 <blinkRed+0x50>)
 8001768:	f000 fda9 	bl	80022be <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D6_GPIO_Port, D6_Pin);
 800176c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001770:	480b      	ldr	r0, [pc, #44]	; (80017a0 <blinkRed+0x50>)
 8001772:	f000 fda4 	bl	80022be <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D7_GPIO_Port, D7_Pin);
 8001776:	f44f 7180 	mov.w	r1, #256	; 0x100
 800177a:	480a      	ldr	r0, [pc, #40]	; (80017a4 <blinkRed+0x54>)
 800177c:	f000 fd9f 	bl	80022be <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D8_GPIO_Port, D8_Pin);
 8001780:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001784:	4807      	ldr	r0, [pc, #28]	; (80017a4 <blinkRed+0x54>)
 8001786:	f000 fd9a 	bl	80022be <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D9_GPIO_Port, D9_Pin);
 800178a:	2180      	movs	r1, #128	; 0x80
 800178c:	4806      	ldr	r0, [pc, #24]	; (80017a8 <blinkRed+0x58>)
 800178e:	f000 fd96 	bl	80022be <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D10_GPIO_Port, D10_Pin);
 8001792:	2140      	movs	r1, #64	; 0x40
 8001794:	4802      	ldr	r0, [pc, #8]	; (80017a0 <blinkRed+0x50>)
 8001796:	f000 fd92 	bl	80022be <HAL_GPIO_TogglePin>
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40010c00 	.word	0x40010c00
 80017a4:	40010800 	.word	0x40010800
 80017a8:	40011000 	.word	0x40011000

080017ac <blinkYellow>:

void blinkYellow(int index){
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 80017b4:	2200      	movs	r2, #0
 80017b6:	2108      	movs	r1, #8
 80017b8:	4814      	ldr	r0, [pc, #80]	; (800180c <blinkYellow+0x60>)
 80017ba:	f000 fd68 	bl	800228e <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 80017be:	2120      	movs	r1, #32
 80017c0:	4812      	ldr	r0, [pc, #72]	; (800180c <blinkYellow+0x60>)
 80017c2:	f000 fd7c 	bl	80022be <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 80017c6:	2200      	movs	r2, #0
 80017c8:	2110      	movs	r1, #16
 80017ca:	4810      	ldr	r0, [pc, #64]	; (800180c <blinkYellow+0x60>)
 80017cc:	f000 fd5f 	bl	800228e <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(D6_GPIO_Port, D6_Pin);
 80017d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017d4:	480d      	ldr	r0, [pc, #52]	; (800180c <blinkYellow+0x60>)
 80017d6:	f000 fd72 	bl	80022be <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 80017da:	2200      	movs	r2, #0
 80017dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017e0:	480b      	ldr	r0, [pc, #44]	; (8001810 <blinkYellow+0x64>)
 80017e2:	f000 fd54 	bl	800228e <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(D8_GPIO_Port, D8_Pin);
 80017e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017ea:	4809      	ldr	r0, [pc, #36]	; (8001810 <blinkYellow+0x64>)
 80017ec:	f000 fd67 	bl	80022be <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D9_GPIO_Port, D9_Pin, RESET);
 80017f0:	2200      	movs	r2, #0
 80017f2:	2180      	movs	r1, #128	; 0x80
 80017f4:	4807      	ldr	r0, [pc, #28]	; (8001814 <blinkYellow+0x68>)
 80017f6:	f000 fd4a 	bl	800228e <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(D10_GPIO_Port, D10_Pin);
 80017fa:	2140      	movs	r1, #64	; 0x40
 80017fc:	4803      	ldr	r0, [pc, #12]	; (800180c <blinkYellow+0x60>)
 80017fe:	f000 fd5e 	bl	80022be <HAL_GPIO_TogglePin>
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40010c00 	.word	0x40010c00
 8001810:	40010800 	.word	0x40010800
 8001814:	40011000 	.word	0x40011000

08001818 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001818:	f7ff fe6c 	bl	80014f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800181c:	480b      	ldr	r0, [pc, #44]	; (800184c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800181e:	490c      	ldr	r1, [pc, #48]	; (8001850 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001820:	4a0c      	ldr	r2, [pc, #48]	; (8001854 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001822:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001824:	e002      	b.n	800182c <LoopCopyDataInit>

08001826 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001826:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001828:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800182a:	3304      	adds	r3, #4

0800182c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800182c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800182e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001830:	d3f9      	bcc.n	8001826 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001832:	4a09      	ldr	r2, [pc, #36]	; (8001858 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001834:	4c09      	ldr	r4, [pc, #36]	; (800185c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001836:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001838:	e001      	b.n	800183e <LoopFillZerobss>

0800183a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800183a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800183c:	3204      	adds	r2, #4

0800183e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800183e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001840:	d3fb      	bcc.n	800183a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001842:	f004 f805 	bl	8005850 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001846:	f7ff f8e9 	bl	8000a1c <main>
  bx lr
 800184a:	4770      	bx	lr
  ldr r0, =_sdata
 800184c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001850:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8001854:	080061c0 	.word	0x080061c0
  ldr r2, =_sbss
 8001858:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 800185c:	200002b4 	.word	0x200002b4

08001860 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001860:	e7fe      	b.n	8001860 <ADC1_2_IRQHandler>
	...

08001864 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001868:	4b08      	ldr	r3, [pc, #32]	; (800188c <HAL_Init+0x28>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a07      	ldr	r2, [pc, #28]	; (800188c <HAL_Init+0x28>)
 800186e:	f043 0310 	orr.w	r3, r3, #16
 8001872:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001874:	2003      	movs	r0, #3
 8001876:	f000 f947 	bl	8001b08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800187a:	2000      	movs	r0, #0
 800187c:	f000 f808 	bl	8001890 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001880:	f7ff fc58 	bl	8001134 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40022000 	.word	0x40022000

08001890 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001898:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <HAL_InitTick+0x54>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <HAL_InitTick+0x58>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	4619      	mov	r1, r3
 80018a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 f95f 	bl	8001b72 <HAL_SYSTICK_Config>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e00e      	b.n	80018dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b0f      	cmp	r3, #15
 80018c2:	d80a      	bhi.n	80018da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018c4:	2200      	movs	r2, #0
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	f04f 30ff 	mov.w	r0, #4294967295
 80018cc:	f000 f927 	bl	8001b1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018d0:	4a06      	ldr	r2, [pc, #24]	; (80018ec <HAL_InitTick+0x5c>)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018d6:	2300      	movs	r3, #0
 80018d8:	e000      	b.n	80018dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	20000054 	.word	0x20000054
 80018e8:	2000005c 	.word	0x2000005c
 80018ec:	20000058 	.word	0x20000058

080018f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018f4:	4b05      	ldr	r3, [pc, #20]	; (800190c <HAL_IncTick+0x1c>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	461a      	mov	r2, r3
 80018fa:	4b05      	ldr	r3, [pc, #20]	; (8001910 <HAL_IncTick+0x20>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4413      	add	r3, r2
 8001900:	4a03      	ldr	r2, [pc, #12]	; (8001910 <HAL_IncTick+0x20>)
 8001902:	6013      	str	r3, [r2, #0]
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr
 800190c:	2000005c 	.word	0x2000005c
 8001910:	200002a0 	.word	0x200002a0

08001914 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  return uwTick;
 8001918:	4b02      	ldr	r3, [pc, #8]	; (8001924 <HAL_GetTick+0x10>)
 800191a:	681b      	ldr	r3, [r3, #0]
}
 800191c:	4618      	mov	r0, r3
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr
 8001924:	200002a0 	.word	0x200002a0

08001928 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001930:	f7ff fff0 	bl	8001914 <HAL_GetTick>
 8001934:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001940:	d005      	beq.n	800194e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001942:	4b0a      	ldr	r3, [pc, #40]	; (800196c <HAL_Delay+0x44>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	461a      	mov	r2, r3
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	4413      	add	r3, r2
 800194c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800194e:	bf00      	nop
 8001950:	f7ff ffe0 	bl	8001914 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	429a      	cmp	r2, r3
 800195e:	d8f7      	bhi.n	8001950 <HAL_Delay+0x28>
  {
  }
}
 8001960:	bf00      	nop
 8001962:	bf00      	nop
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	2000005c 	.word	0x2000005c

08001970 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001980:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800198c:	4013      	ands	r3, r2
 800198e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001998:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800199c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019a2:	4a04      	ldr	r2, [pc, #16]	; (80019b4 <__NVIC_SetPriorityGrouping+0x44>)
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	60d3      	str	r3, [r2, #12]
}
 80019a8:	bf00      	nop
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019bc:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <__NVIC_GetPriorityGrouping+0x18>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	0a1b      	lsrs	r3, r3, #8
 80019c2:	f003 0307 	and.w	r3, r3, #7
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	db0b      	blt.n	80019fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019e6:	79fb      	ldrb	r3, [r7, #7]
 80019e8:	f003 021f 	and.w	r2, r3, #31
 80019ec:	4906      	ldr	r1, [pc, #24]	; (8001a08 <__NVIC_EnableIRQ+0x34>)
 80019ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f2:	095b      	lsrs	r3, r3, #5
 80019f4:	2001      	movs	r0, #1
 80019f6:	fa00 f202 	lsl.w	r2, r0, r2
 80019fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr
 8001a08:	e000e100 	.word	0xe000e100

08001a0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	6039      	str	r1, [r7, #0]
 8001a16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	db0a      	blt.n	8001a36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	b2da      	uxtb	r2, r3
 8001a24:	490c      	ldr	r1, [pc, #48]	; (8001a58 <__NVIC_SetPriority+0x4c>)
 8001a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2a:	0112      	lsls	r2, r2, #4
 8001a2c:	b2d2      	uxtb	r2, r2
 8001a2e:	440b      	add	r3, r1
 8001a30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a34:	e00a      	b.n	8001a4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	b2da      	uxtb	r2, r3
 8001a3a:	4908      	ldr	r1, [pc, #32]	; (8001a5c <__NVIC_SetPriority+0x50>)
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
 8001a3e:	f003 030f 	and.w	r3, r3, #15
 8001a42:	3b04      	subs	r3, #4
 8001a44:	0112      	lsls	r2, r2, #4
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	440b      	add	r3, r1
 8001a4a:	761a      	strb	r2, [r3, #24]
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	e000e100 	.word	0xe000e100
 8001a5c:	e000ed00 	.word	0xe000ed00

08001a60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b089      	sub	sp, #36	; 0x24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	f1c3 0307 	rsb	r3, r3, #7
 8001a7a:	2b04      	cmp	r3, #4
 8001a7c:	bf28      	it	cs
 8001a7e:	2304      	movcs	r3, #4
 8001a80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	3304      	adds	r3, #4
 8001a86:	2b06      	cmp	r3, #6
 8001a88:	d902      	bls.n	8001a90 <NVIC_EncodePriority+0x30>
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	3b03      	subs	r3, #3
 8001a8e:	e000      	b.n	8001a92 <NVIC_EncodePriority+0x32>
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a94:	f04f 32ff 	mov.w	r2, #4294967295
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43da      	mvns	r2, r3
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	401a      	ands	r2, r3
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab2:	43d9      	mvns	r1, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab8:	4313      	orrs	r3, r2
         );
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3724      	adds	r7, #36	; 0x24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr

08001ac4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ad4:	d301      	bcc.n	8001ada <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e00f      	b.n	8001afa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ada:	4a0a      	ldr	r2, [pc, #40]	; (8001b04 <SysTick_Config+0x40>)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ae2:	210f      	movs	r1, #15
 8001ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae8:	f7ff ff90 	bl	8001a0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aec:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <SysTick_Config+0x40>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001af2:	4b04      	ldr	r3, [pc, #16]	; (8001b04 <SysTick_Config+0x40>)
 8001af4:	2207      	movs	r2, #7
 8001af6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	e000e010 	.word	0xe000e010

08001b08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7ff ff2d 	bl	8001970 <__NVIC_SetPriorityGrouping>
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b086      	sub	sp, #24
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	4603      	mov	r3, r0
 8001b26:	60b9      	str	r1, [r7, #8]
 8001b28:	607a      	str	r2, [r7, #4]
 8001b2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b30:	f7ff ff42 	bl	80019b8 <__NVIC_GetPriorityGrouping>
 8001b34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	68b9      	ldr	r1, [r7, #8]
 8001b3a:	6978      	ldr	r0, [r7, #20]
 8001b3c:	f7ff ff90 	bl	8001a60 <NVIC_EncodePriority>
 8001b40:	4602      	mov	r2, r0
 8001b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b46:	4611      	mov	r1, r2
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff ff5f 	bl	8001a0c <__NVIC_SetPriority>
}
 8001b4e:	bf00      	nop
 8001b50:	3718      	adds	r7, #24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff ff35 	bl	80019d4 <__NVIC_EnableIRQ>
}
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7ff ffa2 	bl	8001ac4 <SysTick_Config>
 8001b80:	4603      	mov	r3, r0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
	...

08001b8c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b94:	2300      	movs	r3, #0
 8001b96:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e043      	b.n	8001c2a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	4b22      	ldr	r3, [pc, #136]	; (8001c34 <HAL_DMA_Init+0xa8>)
 8001baa:	4413      	add	r3, r2
 8001bac:	4a22      	ldr	r2, [pc, #136]	; (8001c38 <HAL_DMA_Init+0xac>)
 8001bae:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb2:	091b      	lsrs	r3, r3, #4
 8001bb4:	009a      	lsls	r2, r3, #2
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a1f      	ldr	r2, [pc, #124]	; (8001c3c <HAL_DMA_Init+0xb0>)
 8001bbe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2202      	movs	r2, #2
 8001bc4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001bd6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001bda:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001be4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bfc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c04:	68fa      	ldr	r2, [r7, #12]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr
 8001c34:	bffdfff8 	.word	0xbffdfff8
 8001c38:	cccccccd 	.word	0xcccccccd
 8001c3c:	40020000 	.word	0x40020000

08001c40 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d005      	beq.n	8001c64 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2204      	movs	r2, #4
 8001c5c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	73fb      	strb	r3, [r7, #15]
 8001c62:	e051      	b.n	8001d08 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f022 020e 	bic.w	r2, r2, #14
 8001c72:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f022 0201 	bic.w	r2, r2, #1
 8001c82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a22      	ldr	r2, [pc, #136]	; (8001d14 <HAL_DMA_Abort_IT+0xd4>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d029      	beq.n	8001ce2 <HAL_DMA_Abort_IT+0xa2>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a21      	ldr	r2, [pc, #132]	; (8001d18 <HAL_DMA_Abort_IT+0xd8>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d022      	beq.n	8001cde <HAL_DMA_Abort_IT+0x9e>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a1f      	ldr	r2, [pc, #124]	; (8001d1c <HAL_DMA_Abort_IT+0xdc>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d01a      	beq.n	8001cd8 <HAL_DMA_Abort_IT+0x98>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a1e      	ldr	r2, [pc, #120]	; (8001d20 <HAL_DMA_Abort_IT+0xe0>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d012      	beq.n	8001cd2 <HAL_DMA_Abort_IT+0x92>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a1c      	ldr	r2, [pc, #112]	; (8001d24 <HAL_DMA_Abort_IT+0xe4>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d00a      	beq.n	8001ccc <HAL_DMA_Abort_IT+0x8c>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a1b      	ldr	r2, [pc, #108]	; (8001d28 <HAL_DMA_Abort_IT+0xe8>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d102      	bne.n	8001cc6 <HAL_DMA_Abort_IT+0x86>
 8001cc0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001cc4:	e00e      	b.n	8001ce4 <HAL_DMA_Abort_IT+0xa4>
 8001cc6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cca:	e00b      	b.n	8001ce4 <HAL_DMA_Abort_IT+0xa4>
 8001ccc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cd0:	e008      	b.n	8001ce4 <HAL_DMA_Abort_IT+0xa4>
 8001cd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cd6:	e005      	b.n	8001ce4 <HAL_DMA_Abort_IT+0xa4>
 8001cd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cdc:	e002      	b.n	8001ce4 <HAL_DMA_Abort_IT+0xa4>
 8001cde:	2310      	movs	r3, #16
 8001ce0:	e000      	b.n	8001ce4 <HAL_DMA_Abort_IT+0xa4>
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	4a11      	ldr	r2, [pc, #68]	; (8001d2c <HAL_DMA_Abort_IT+0xec>)
 8001ce6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d003      	beq.n	8001d08 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	4798      	blx	r3
    } 
  }
  return status;
 8001d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40020008 	.word	0x40020008
 8001d18:	4002001c 	.word	0x4002001c
 8001d1c:	40020030 	.word	0x40020030
 8001d20:	40020044 	.word	0x40020044
 8001d24:	40020058 	.word	0x40020058
 8001d28:	4002006c 	.word	0x4002006c
 8001d2c:	40020000 	.word	0x40020000

08001d30 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4c:	2204      	movs	r2, #4
 8001d4e:	409a      	lsls	r2, r3
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	4013      	ands	r3, r2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d04f      	beq.n	8001df8 <HAL_DMA_IRQHandler+0xc8>
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	f003 0304 	and.w	r3, r3, #4
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d04a      	beq.n	8001df8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0320 	and.w	r3, r3, #32
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d107      	bne.n	8001d80 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f022 0204 	bic.w	r2, r2, #4
 8001d7e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a66      	ldr	r2, [pc, #408]	; (8001f20 <HAL_DMA_IRQHandler+0x1f0>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d029      	beq.n	8001dde <HAL_DMA_IRQHandler+0xae>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a65      	ldr	r2, [pc, #404]	; (8001f24 <HAL_DMA_IRQHandler+0x1f4>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d022      	beq.n	8001dda <HAL_DMA_IRQHandler+0xaa>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a63      	ldr	r2, [pc, #396]	; (8001f28 <HAL_DMA_IRQHandler+0x1f8>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d01a      	beq.n	8001dd4 <HAL_DMA_IRQHandler+0xa4>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a62      	ldr	r2, [pc, #392]	; (8001f2c <HAL_DMA_IRQHandler+0x1fc>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d012      	beq.n	8001dce <HAL_DMA_IRQHandler+0x9e>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a60      	ldr	r2, [pc, #384]	; (8001f30 <HAL_DMA_IRQHandler+0x200>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d00a      	beq.n	8001dc8 <HAL_DMA_IRQHandler+0x98>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a5f      	ldr	r2, [pc, #380]	; (8001f34 <HAL_DMA_IRQHandler+0x204>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d102      	bne.n	8001dc2 <HAL_DMA_IRQHandler+0x92>
 8001dbc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001dc0:	e00e      	b.n	8001de0 <HAL_DMA_IRQHandler+0xb0>
 8001dc2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001dc6:	e00b      	b.n	8001de0 <HAL_DMA_IRQHandler+0xb0>
 8001dc8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001dcc:	e008      	b.n	8001de0 <HAL_DMA_IRQHandler+0xb0>
 8001dce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001dd2:	e005      	b.n	8001de0 <HAL_DMA_IRQHandler+0xb0>
 8001dd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dd8:	e002      	b.n	8001de0 <HAL_DMA_IRQHandler+0xb0>
 8001dda:	2340      	movs	r3, #64	; 0x40
 8001ddc:	e000      	b.n	8001de0 <HAL_DMA_IRQHandler+0xb0>
 8001dde:	2304      	movs	r3, #4
 8001de0:	4a55      	ldr	r2, [pc, #340]	; (8001f38 <HAL_DMA_IRQHandler+0x208>)
 8001de2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f000 8094 	beq.w	8001f16 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001df6:	e08e      	b.n	8001f16 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfc:	2202      	movs	r2, #2
 8001dfe:	409a      	lsls	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4013      	ands	r3, r2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d056      	beq.n	8001eb6 <HAL_DMA_IRQHandler+0x186>
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d051      	beq.n	8001eb6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0320 	and.w	r3, r3, #32
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d10b      	bne.n	8001e38 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f022 020a 	bic.w	r2, r2, #10
 8001e2e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a38      	ldr	r2, [pc, #224]	; (8001f20 <HAL_DMA_IRQHandler+0x1f0>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d029      	beq.n	8001e96 <HAL_DMA_IRQHandler+0x166>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a37      	ldr	r2, [pc, #220]	; (8001f24 <HAL_DMA_IRQHandler+0x1f4>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d022      	beq.n	8001e92 <HAL_DMA_IRQHandler+0x162>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a35      	ldr	r2, [pc, #212]	; (8001f28 <HAL_DMA_IRQHandler+0x1f8>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d01a      	beq.n	8001e8c <HAL_DMA_IRQHandler+0x15c>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a34      	ldr	r2, [pc, #208]	; (8001f2c <HAL_DMA_IRQHandler+0x1fc>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d012      	beq.n	8001e86 <HAL_DMA_IRQHandler+0x156>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a32      	ldr	r2, [pc, #200]	; (8001f30 <HAL_DMA_IRQHandler+0x200>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d00a      	beq.n	8001e80 <HAL_DMA_IRQHandler+0x150>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a31      	ldr	r2, [pc, #196]	; (8001f34 <HAL_DMA_IRQHandler+0x204>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d102      	bne.n	8001e7a <HAL_DMA_IRQHandler+0x14a>
 8001e74:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e78:	e00e      	b.n	8001e98 <HAL_DMA_IRQHandler+0x168>
 8001e7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e7e:	e00b      	b.n	8001e98 <HAL_DMA_IRQHandler+0x168>
 8001e80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e84:	e008      	b.n	8001e98 <HAL_DMA_IRQHandler+0x168>
 8001e86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e8a:	e005      	b.n	8001e98 <HAL_DMA_IRQHandler+0x168>
 8001e8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e90:	e002      	b.n	8001e98 <HAL_DMA_IRQHandler+0x168>
 8001e92:	2320      	movs	r3, #32
 8001e94:	e000      	b.n	8001e98 <HAL_DMA_IRQHandler+0x168>
 8001e96:	2302      	movs	r3, #2
 8001e98:	4a27      	ldr	r2, [pc, #156]	; (8001f38 <HAL_DMA_IRQHandler+0x208>)
 8001e9a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d034      	beq.n	8001f16 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001eb4:	e02f      	b.n	8001f16 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	2208      	movs	r2, #8
 8001ebc:	409a      	lsls	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d028      	beq.n	8001f18 <HAL_DMA_IRQHandler+0x1e8>
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	f003 0308 	and.w	r3, r3, #8
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d023      	beq.n	8001f18 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f022 020e 	bic.w	r2, r2, #14
 8001ede:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee8:	2101      	movs	r1, #1
 8001eea:	fa01 f202 	lsl.w	r2, r1, r2
 8001eee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d004      	beq.n	8001f18 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	4798      	blx	r3
    }
  }
  return;
 8001f16:	bf00      	nop
 8001f18:	bf00      	nop
}
 8001f1a:	3710      	adds	r7, #16
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40020008 	.word	0x40020008
 8001f24:	4002001c 	.word	0x4002001c
 8001f28:	40020030 	.word	0x40020030
 8001f2c:	40020044 	.word	0x40020044
 8001f30:	40020058 	.word	0x40020058
 8001f34:	4002006c 	.word	0x4002006c
 8001f38:	40020000 	.word	0x40020000

08001f3c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f4a:	b2db      	uxtb	r3, r3
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bc80      	pop	{r7}
 8001f54:	4770      	bx	lr
	...

08001f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b08b      	sub	sp, #44	; 0x2c
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f62:	2300      	movs	r3, #0
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f66:	2300      	movs	r3, #0
 8001f68:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f6a:	e169      	b.n	8002240 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	69fa      	ldr	r2, [r7, #28]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	f040 8158 	bne.w	800223a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	4a9a      	ldr	r2, [pc, #616]	; (80021f8 <HAL_GPIO_Init+0x2a0>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d05e      	beq.n	8002052 <HAL_GPIO_Init+0xfa>
 8001f94:	4a98      	ldr	r2, [pc, #608]	; (80021f8 <HAL_GPIO_Init+0x2a0>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d875      	bhi.n	8002086 <HAL_GPIO_Init+0x12e>
 8001f9a:	4a98      	ldr	r2, [pc, #608]	; (80021fc <HAL_GPIO_Init+0x2a4>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d058      	beq.n	8002052 <HAL_GPIO_Init+0xfa>
 8001fa0:	4a96      	ldr	r2, [pc, #600]	; (80021fc <HAL_GPIO_Init+0x2a4>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d86f      	bhi.n	8002086 <HAL_GPIO_Init+0x12e>
 8001fa6:	4a96      	ldr	r2, [pc, #600]	; (8002200 <HAL_GPIO_Init+0x2a8>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d052      	beq.n	8002052 <HAL_GPIO_Init+0xfa>
 8001fac:	4a94      	ldr	r2, [pc, #592]	; (8002200 <HAL_GPIO_Init+0x2a8>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d869      	bhi.n	8002086 <HAL_GPIO_Init+0x12e>
 8001fb2:	4a94      	ldr	r2, [pc, #592]	; (8002204 <HAL_GPIO_Init+0x2ac>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d04c      	beq.n	8002052 <HAL_GPIO_Init+0xfa>
 8001fb8:	4a92      	ldr	r2, [pc, #584]	; (8002204 <HAL_GPIO_Init+0x2ac>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d863      	bhi.n	8002086 <HAL_GPIO_Init+0x12e>
 8001fbe:	4a92      	ldr	r2, [pc, #584]	; (8002208 <HAL_GPIO_Init+0x2b0>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d046      	beq.n	8002052 <HAL_GPIO_Init+0xfa>
 8001fc4:	4a90      	ldr	r2, [pc, #576]	; (8002208 <HAL_GPIO_Init+0x2b0>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d85d      	bhi.n	8002086 <HAL_GPIO_Init+0x12e>
 8001fca:	2b12      	cmp	r3, #18
 8001fcc:	d82a      	bhi.n	8002024 <HAL_GPIO_Init+0xcc>
 8001fce:	2b12      	cmp	r3, #18
 8001fd0:	d859      	bhi.n	8002086 <HAL_GPIO_Init+0x12e>
 8001fd2:	a201      	add	r2, pc, #4	; (adr r2, 8001fd8 <HAL_GPIO_Init+0x80>)
 8001fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd8:	08002053 	.word	0x08002053
 8001fdc:	0800202d 	.word	0x0800202d
 8001fe0:	0800203f 	.word	0x0800203f
 8001fe4:	08002081 	.word	0x08002081
 8001fe8:	08002087 	.word	0x08002087
 8001fec:	08002087 	.word	0x08002087
 8001ff0:	08002087 	.word	0x08002087
 8001ff4:	08002087 	.word	0x08002087
 8001ff8:	08002087 	.word	0x08002087
 8001ffc:	08002087 	.word	0x08002087
 8002000:	08002087 	.word	0x08002087
 8002004:	08002087 	.word	0x08002087
 8002008:	08002087 	.word	0x08002087
 800200c:	08002087 	.word	0x08002087
 8002010:	08002087 	.word	0x08002087
 8002014:	08002087 	.word	0x08002087
 8002018:	08002087 	.word	0x08002087
 800201c:	08002035 	.word	0x08002035
 8002020:	08002049 	.word	0x08002049
 8002024:	4a79      	ldr	r2, [pc, #484]	; (800220c <HAL_GPIO_Init+0x2b4>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d013      	beq.n	8002052 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800202a:	e02c      	b.n	8002086 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	623b      	str	r3, [r7, #32]
          break;
 8002032:	e029      	b.n	8002088 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	3304      	adds	r3, #4
 800203a:	623b      	str	r3, [r7, #32]
          break;
 800203c:	e024      	b.n	8002088 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	3308      	adds	r3, #8
 8002044:	623b      	str	r3, [r7, #32]
          break;
 8002046:	e01f      	b.n	8002088 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	330c      	adds	r3, #12
 800204e:	623b      	str	r3, [r7, #32]
          break;
 8002050:	e01a      	b.n	8002088 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d102      	bne.n	8002060 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800205a:	2304      	movs	r3, #4
 800205c:	623b      	str	r3, [r7, #32]
          break;
 800205e:	e013      	b.n	8002088 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d105      	bne.n	8002074 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002068:	2308      	movs	r3, #8
 800206a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	69fa      	ldr	r2, [r7, #28]
 8002070:	611a      	str	r2, [r3, #16]
          break;
 8002072:	e009      	b.n	8002088 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002074:	2308      	movs	r3, #8
 8002076:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	69fa      	ldr	r2, [r7, #28]
 800207c:	615a      	str	r2, [r3, #20]
          break;
 800207e:	e003      	b.n	8002088 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002080:	2300      	movs	r3, #0
 8002082:	623b      	str	r3, [r7, #32]
          break;
 8002084:	e000      	b.n	8002088 <HAL_GPIO_Init+0x130>
          break;
 8002086:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	2bff      	cmp	r3, #255	; 0xff
 800208c:	d801      	bhi.n	8002092 <HAL_GPIO_Init+0x13a>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	e001      	b.n	8002096 <HAL_GPIO_Init+0x13e>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	3304      	adds	r3, #4
 8002096:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	2bff      	cmp	r3, #255	; 0xff
 800209c:	d802      	bhi.n	80020a4 <HAL_GPIO_Init+0x14c>
 800209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	e002      	b.n	80020aa <HAL_GPIO_Init+0x152>
 80020a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a6:	3b08      	subs	r3, #8
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	210f      	movs	r1, #15
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	fa01 f303 	lsl.w	r3, r1, r3
 80020b8:	43db      	mvns	r3, r3
 80020ba:	401a      	ands	r2, r3
 80020bc:	6a39      	ldr	r1, [r7, #32]
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	fa01 f303 	lsl.w	r3, r1, r3
 80020c4:	431a      	orrs	r2, r3
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f000 80b1 	beq.w	800223a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020d8:	4b4d      	ldr	r3, [pc, #308]	; (8002210 <HAL_GPIO_Init+0x2b8>)
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	4a4c      	ldr	r2, [pc, #304]	; (8002210 <HAL_GPIO_Init+0x2b8>)
 80020de:	f043 0301 	orr.w	r3, r3, #1
 80020e2:	6193      	str	r3, [r2, #24]
 80020e4:	4b4a      	ldr	r3, [pc, #296]	; (8002210 <HAL_GPIO_Init+0x2b8>)
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	60bb      	str	r3, [r7, #8]
 80020ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020f0:	4a48      	ldr	r2, [pc, #288]	; (8002214 <HAL_GPIO_Init+0x2bc>)
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	089b      	lsrs	r3, r3, #2
 80020f6:	3302      	adds	r3, #2
 80020f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002100:	f003 0303 	and.w	r3, r3, #3
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	220f      	movs	r2, #15
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	43db      	mvns	r3, r3
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	4013      	ands	r3, r2
 8002112:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a40      	ldr	r2, [pc, #256]	; (8002218 <HAL_GPIO_Init+0x2c0>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d013      	beq.n	8002144 <HAL_GPIO_Init+0x1ec>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a3f      	ldr	r2, [pc, #252]	; (800221c <HAL_GPIO_Init+0x2c4>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d00d      	beq.n	8002140 <HAL_GPIO_Init+0x1e8>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a3e      	ldr	r2, [pc, #248]	; (8002220 <HAL_GPIO_Init+0x2c8>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d007      	beq.n	800213c <HAL_GPIO_Init+0x1e4>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a3d      	ldr	r2, [pc, #244]	; (8002224 <HAL_GPIO_Init+0x2cc>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d101      	bne.n	8002138 <HAL_GPIO_Init+0x1e0>
 8002134:	2303      	movs	r3, #3
 8002136:	e006      	b.n	8002146 <HAL_GPIO_Init+0x1ee>
 8002138:	2304      	movs	r3, #4
 800213a:	e004      	b.n	8002146 <HAL_GPIO_Init+0x1ee>
 800213c:	2302      	movs	r3, #2
 800213e:	e002      	b.n	8002146 <HAL_GPIO_Init+0x1ee>
 8002140:	2301      	movs	r3, #1
 8002142:	e000      	b.n	8002146 <HAL_GPIO_Init+0x1ee>
 8002144:	2300      	movs	r3, #0
 8002146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002148:	f002 0203 	and.w	r2, r2, #3
 800214c:	0092      	lsls	r2, r2, #2
 800214e:	4093      	lsls	r3, r2
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	4313      	orrs	r3, r2
 8002154:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002156:	492f      	ldr	r1, [pc, #188]	; (8002214 <HAL_GPIO_Init+0x2bc>)
 8002158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215a:	089b      	lsrs	r3, r3, #2
 800215c:	3302      	adds	r3, #2
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d006      	beq.n	800217e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002170:	4b2d      	ldr	r3, [pc, #180]	; (8002228 <HAL_GPIO_Init+0x2d0>)
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	492c      	ldr	r1, [pc, #176]	; (8002228 <HAL_GPIO_Init+0x2d0>)
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	4313      	orrs	r3, r2
 800217a:	608b      	str	r3, [r1, #8]
 800217c:	e006      	b.n	800218c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800217e:	4b2a      	ldr	r3, [pc, #168]	; (8002228 <HAL_GPIO_Init+0x2d0>)
 8002180:	689a      	ldr	r2, [r3, #8]
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	43db      	mvns	r3, r3
 8002186:	4928      	ldr	r1, [pc, #160]	; (8002228 <HAL_GPIO_Init+0x2d0>)
 8002188:	4013      	ands	r3, r2
 800218a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d006      	beq.n	80021a6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002198:	4b23      	ldr	r3, [pc, #140]	; (8002228 <HAL_GPIO_Init+0x2d0>)
 800219a:	68da      	ldr	r2, [r3, #12]
 800219c:	4922      	ldr	r1, [pc, #136]	; (8002228 <HAL_GPIO_Init+0x2d0>)
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	60cb      	str	r3, [r1, #12]
 80021a4:	e006      	b.n	80021b4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021a6:	4b20      	ldr	r3, [pc, #128]	; (8002228 <HAL_GPIO_Init+0x2d0>)
 80021a8:	68da      	ldr	r2, [r3, #12]
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	43db      	mvns	r3, r3
 80021ae:	491e      	ldr	r1, [pc, #120]	; (8002228 <HAL_GPIO_Init+0x2d0>)
 80021b0:	4013      	ands	r3, r2
 80021b2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d006      	beq.n	80021ce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021c0:	4b19      	ldr	r3, [pc, #100]	; (8002228 <HAL_GPIO_Init+0x2d0>)
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	4918      	ldr	r1, [pc, #96]	; (8002228 <HAL_GPIO_Init+0x2d0>)
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	604b      	str	r3, [r1, #4]
 80021cc:	e006      	b.n	80021dc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021ce:	4b16      	ldr	r3, [pc, #88]	; (8002228 <HAL_GPIO_Init+0x2d0>)
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	43db      	mvns	r3, r3
 80021d6:	4914      	ldr	r1, [pc, #80]	; (8002228 <HAL_GPIO_Init+0x2d0>)
 80021d8:	4013      	ands	r3, r2
 80021da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d021      	beq.n	800222c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021e8:	4b0f      	ldr	r3, [pc, #60]	; (8002228 <HAL_GPIO_Init+0x2d0>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	490e      	ldr	r1, [pc, #56]	; (8002228 <HAL_GPIO_Init+0x2d0>)
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	600b      	str	r3, [r1, #0]
 80021f4:	e021      	b.n	800223a <HAL_GPIO_Init+0x2e2>
 80021f6:	bf00      	nop
 80021f8:	10320000 	.word	0x10320000
 80021fc:	10310000 	.word	0x10310000
 8002200:	10220000 	.word	0x10220000
 8002204:	10210000 	.word	0x10210000
 8002208:	10120000 	.word	0x10120000
 800220c:	10110000 	.word	0x10110000
 8002210:	40021000 	.word	0x40021000
 8002214:	40010000 	.word	0x40010000
 8002218:	40010800 	.word	0x40010800
 800221c:	40010c00 	.word	0x40010c00
 8002220:	40011000 	.word	0x40011000
 8002224:	40011400 	.word	0x40011400
 8002228:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800222c:	4b0b      	ldr	r3, [pc, #44]	; (800225c <HAL_GPIO_Init+0x304>)
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	43db      	mvns	r3, r3
 8002234:	4909      	ldr	r1, [pc, #36]	; (800225c <HAL_GPIO_Init+0x304>)
 8002236:	4013      	ands	r3, r2
 8002238:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223c:	3301      	adds	r3, #1
 800223e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002246:	fa22 f303 	lsr.w	r3, r2, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	f47f ae8e 	bne.w	8001f6c <HAL_GPIO_Init+0x14>
  }
}
 8002250:	bf00      	nop
 8002252:	bf00      	nop
 8002254:	372c      	adds	r7, #44	; 0x2c
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr
 800225c:	40010400 	.word	0x40010400

08002260 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	460b      	mov	r3, r1
 800226a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	887b      	ldrh	r3, [r7, #2]
 8002272:	4013      	ands	r3, r2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d002      	beq.n	800227e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002278:	2301      	movs	r3, #1
 800227a:	73fb      	strb	r3, [r7, #15]
 800227c:	e001      	b.n	8002282 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800227e:	2300      	movs	r3, #0
 8002280:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002282:	7bfb      	ldrb	r3, [r7, #15]
}
 8002284:	4618      	mov	r0, r3
 8002286:	3714      	adds	r7, #20
 8002288:	46bd      	mov	sp, r7
 800228a:	bc80      	pop	{r7}
 800228c:	4770      	bx	lr

0800228e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800228e:	b480      	push	{r7}
 8002290:	b083      	sub	sp, #12
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
 8002296:	460b      	mov	r3, r1
 8002298:	807b      	strh	r3, [r7, #2]
 800229a:	4613      	mov	r3, r2
 800229c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800229e:	787b      	ldrb	r3, [r7, #1]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d003      	beq.n	80022ac <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022a4:	887a      	ldrh	r2, [r7, #2]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022aa:	e003      	b.n	80022b4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022ac:	887b      	ldrh	r3, [r7, #2]
 80022ae:	041a      	lsls	r2, r3, #16
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	611a      	str	r2, [r3, #16]
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bc80      	pop	{r7}
 80022bc:	4770      	bx	lr

080022be <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022be:	b480      	push	{r7}
 80022c0:	b085      	sub	sp, #20
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
 80022c6:	460b      	mov	r3, r1
 80022c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022d0:	887a      	ldrh	r2, [r7, #2]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	4013      	ands	r3, r2
 80022d6:	041a      	lsls	r2, r3, #16
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	43d9      	mvns	r1, r3
 80022dc:	887b      	ldrh	r3, [r7, #2]
 80022de:	400b      	ands	r3, r1
 80022e0:	431a      	orrs	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	611a      	str	r2, [r3, #16]
}
 80022e6:	bf00      	nop
 80022e8:	3714      	adds	r7, #20
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bc80      	pop	{r7}
 80022ee:	4770      	bx	lr

080022f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80022fa:	4b08      	ldr	r3, [pc, #32]	; (800231c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022fc:	695a      	ldr	r2, [r3, #20]
 80022fe:	88fb      	ldrh	r3, [r7, #6]
 8002300:	4013      	ands	r3, r2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d006      	beq.n	8002314 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002306:	4a05      	ldr	r2, [pc, #20]	; (800231c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002308:	88fb      	ldrh	r3, [r7, #6]
 800230a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800230c:	88fb      	ldrh	r3, [r7, #6]
 800230e:	4618      	mov	r0, r3
 8002310:	f000 f806 	bl	8002320 <HAL_GPIO_EXTI_Callback>
  }
}
 8002314:	bf00      	nop
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40010400 	.word	0x40010400

08002320 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr

08002334 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e12b      	b.n	800259e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d106      	bne.n	8002360 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7fe ff1c 	bl	8001198 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2224      	movs	r2, #36	; 0x24
 8002364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 0201 	bic.w	r2, r2, #1
 8002376:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002386:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002396:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002398:	f002 fd3e 	bl	8004e18 <HAL_RCC_GetPCLK1Freq>
 800239c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	4a81      	ldr	r2, [pc, #516]	; (80025a8 <HAL_I2C_Init+0x274>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d807      	bhi.n	80023b8 <HAL_I2C_Init+0x84>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	4a80      	ldr	r2, [pc, #512]	; (80025ac <HAL_I2C_Init+0x278>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	bf94      	ite	ls
 80023b0:	2301      	movls	r3, #1
 80023b2:	2300      	movhi	r3, #0
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	e006      	b.n	80023c6 <HAL_I2C_Init+0x92>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	4a7d      	ldr	r2, [pc, #500]	; (80025b0 <HAL_I2C_Init+0x27c>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	bf94      	ite	ls
 80023c0:	2301      	movls	r3, #1
 80023c2:	2300      	movhi	r3, #0
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e0e7      	b.n	800259e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	4a78      	ldr	r2, [pc, #480]	; (80025b4 <HAL_I2C_Init+0x280>)
 80023d2:	fba2 2303 	umull	r2, r3, r2, r3
 80023d6:	0c9b      	lsrs	r3, r3, #18
 80023d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68ba      	ldr	r2, [r7, #8]
 80023ea:	430a      	orrs	r2, r1
 80023ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	4a6a      	ldr	r2, [pc, #424]	; (80025a8 <HAL_I2C_Init+0x274>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d802      	bhi.n	8002408 <HAL_I2C_Init+0xd4>
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	3301      	adds	r3, #1
 8002406:	e009      	b.n	800241c <HAL_I2C_Init+0xe8>
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800240e:	fb02 f303 	mul.w	r3, r2, r3
 8002412:	4a69      	ldr	r2, [pc, #420]	; (80025b8 <HAL_I2C_Init+0x284>)
 8002414:	fba2 2303 	umull	r2, r3, r2, r3
 8002418:	099b      	lsrs	r3, r3, #6
 800241a:	3301      	adds	r3, #1
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	6812      	ldr	r2, [r2, #0]
 8002420:	430b      	orrs	r3, r1
 8002422:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800242e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	495c      	ldr	r1, [pc, #368]	; (80025a8 <HAL_I2C_Init+0x274>)
 8002438:	428b      	cmp	r3, r1
 800243a:	d819      	bhi.n	8002470 <HAL_I2C_Init+0x13c>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	1e59      	subs	r1, r3, #1
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	fbb1 f3f3 	udiv	r3, r1, r3
 800244a:	1c59      	adds	r1, r3, #1
 800244c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002450:	400b      	ands	r3, r1
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00a      	beq.n	800246c <HAL_I2C_Init+0x138>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	1e59      	subs	r1, r3, #1
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	fbb1 f3f3 	udiv	r3, r1, r3
 8002464:	3301      	adds	r3, #1
 8002466:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800246a:	e051      	b.n	8002510 <HAL_I2C_Init+0x1dc>
 800246c:	2304      	movs	r3, #4
 800246e:	e04f      	b.n	8002510 <HAL_I2C_Init+0x1dc>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d111      	bne.n	800249c <HAL_I2C_Init+0x168>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	1e58      	subs	r0, r3, #1
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6859      	ldr	r1, [r3, #4]
 8002480:	460b      	mov	r3, r1
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	440b      	add	r3, r1
 8002486:	fbb0 f3f3 	udiv	r3, r0, r3
 800248a:	3301      	adds	r3, #1
 800248c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002490:	2b00      	cmp	r3, #0
 8002492:	bf0c      	ite	eq
 8002494:	2301      	moveq	r3, #1
 8002496:	2300      	movne	r3, #0
 8002498:	b2db      	uxtb	r3, r3
 800249a:	e012      	b.n	80024c2 <HAL_I2C_Init+0x18e>
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	1e58      	subs	r0, r3, #1
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6859      	ldr	r1, [r3, #4]
 80024a4:	460b      	mov	r3, r1
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	440b      	add	r3, r1
 80024aa:	0099      	lsls	r1, r3, #2
 80024ac:	440b      	add	r3, r1
 80024ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80024b2:	3301      	adds	r3, #1
 80024b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	bf0c      	ite	eq
 80024bc:	2301      	moveq	r3, #1
 80024be:	2300      	movne	r3, #0
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <HAL_I2C_Init+0x196>
 80024c6:	2301      	movs	r3, #1
 80024c8:	e022      	b.n	8002510 <HAL_I2C_Init+0x1dc>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10e      	bne.n	80024f0 <HAL_I2C_Init+0x1bc>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	1e58      	subs	r0, r3, #1
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6859      	ldr	r1, [r3, #4]
 80024da:	460b      	mov	r3, r1
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	440b      	add	r3, r1
 80024e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80024e4:	3301      	adds	r3, #1
 80024e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024ee:	e00f      	b.n	8002510 <HAL_I2C_Init+0x1dc>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	1e58      	subs	r0, r3, #1
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6859      	ldr	r1, [r3, #4]
 80024f8:	460b      	mov	r3, r1
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	440b      	add	r3, r1
 80024fe:	0099      	lsls	r1, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	fbb0 f3f3 	udiv	r3, r0, r3
 8002506:	3301      	adds	r3, #1
 8002508:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800250c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	6809      	ldr	r1, [r1, #0]
 8002514:	4313      	orrs	r3, r2
 8002516:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69da      	ldr	r2, [r3, #28]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	431a      	orrs	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	430a      	orrs	r2, r1
 8002532:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800253e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	6911      	ldr	r1, [r2, #16]
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	68d2      	ldr	r2, [r2, #12]
 800254a:	4311      	orrs	r1, r2
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	6812      	ldr	r2, [r2, #0]
 8002550:	430b      	orrs	r3, r1
 8002552:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	695a      	ldr	r2, [r3, #20]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	430a      	orrs	r2, r1
 800256e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 0201 	orr.w	r2, r2, #1
 800257e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2220      	movs	r2, #32
 800258a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	000186a0 	.word	0x000186a0
 80025ac:	001e847f 	.word	0x001e847f
 80025b0:	003d08ff 	.word	0x003d08ff
 80025b4:	431bde83 	.word	0x431bde83
 80025b8:	10624dd3 	.word	0x10624dd3

080025bc <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ce:	2b80      	cmp	r3, #128	; 0x80
 80025d0:	d103      	bne.n	80025da <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2200      	movs	r2, #0
 80025d8:	611a      	str	r2, [r3, #16]
  }
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	bc80      	pop	{r7}
 80025e2:	4770      	bx	lr

080025e4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b088      	sub	sp, #32
 80025e8:	af02      	add	r7, sp, #8
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	607a      	str	r2, [r7, #4]
 80025ee:	461a      	mov	r2, r3
 80025f0:	460b      	mov	r3, r1
 80025f2:	817b      	strh	r3, [r7, #10]
 80025f4:	4613      	mov	r3, r2
 80025f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025f8:	f7ff f98c 	bl	8001914 <HAL_GetTick>
 80025fc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b20      	cmp	r3, #32
 8002608:	f040 80e0 	bne.w	80027cc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	2319      	movs	r3, #25
 8002612:	2201      	movs	r2, #1
 8002614:	4970      	ldr	r1, [pc, #448]	; (80027d8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f001 fe12 	bl	8004240 <I2C_WaitOnFlagUntilTimeout>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002622:	2302      	movs	r3, #2
 8002624:	e0d3      	b.n	80027ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800262c:	2b01      	cmp	r3, #1
 800262e:	d101      	bne.n	8002634 <HAL_I2C_Master_Transmit+0x50>
 8002630:	2302      	movs	r3, #2
 8002632:	e0cc      	b.n	80027ce <HAL_I2C_Master_Transmit+0x1ea>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b01      	cmp	r3, #1
 8002648:	d007      	beq.n	800265a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f042 0201 	orr.w	r2, r2, #1
 8002658:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002668:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2221      	movs	r2, #33	; 0x21
 800266e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2210      	movs	r2, #16
 8002676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	893a      	ldrh	r2, [r7, #8]
 800268a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002690:	b29a      	uxth	r2, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	4a50      	ldr	r2, [pc, #320]	; (80027dc <HAL_I2C_Master_Transmit+0x1f8>)
 800269a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800269c:	8979      	ldrh	r1, [r7, #10]
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	6a3a      	ldr	r2, [r7, #32]
 80026a2:	68f8      	ldr	r0, [r7, #12]
 80026a4:	f001 fca2 	bl	8003fec <I2C_MasterRequestWrite>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e08d      	b.n	80027ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026b2:	2300      	movs	r3, #0
 80026b4:	613b      	str	r3, [r7, #16]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	695b      	ldr	r3, [r3, #20]
 80026bc:	613b      	str	r3, [r7, #16]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	613b      	str	r3, [r7, #16]
 80026c6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80026c8:	e066      	b.n	8002798 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	6a39      	ldr	r1, [r7, #32]
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f001 fed0 	bl	8004474 <I2C_WaitOnTXEFlagUntilTimeout>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00d      	beq.n	80026f6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	2b04      	cmp	r3, #4
 80026e0:	d107      	bne.n	80026f2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e06b      	b.n	80027ce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	781a      	ldrb	r2, [r3, #0]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002706:	1c5a      	adds	r2, r3, #1
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002710:	b29b      	uxth	r3, r3
 8002712:	3b01      	subs	r3, #1
 8002714:	b29a      	uxth	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271e:	3b01      	subs	r3, #1
 8002720:	b29a      	uxth	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	f003 0304 	and.w	r3, r3, #4
 8002730:	2b04      	cmp	r3, #4
 8002732:	d11b      	bne.n	800276c <HAL_I2C_Master_Transmit+0x188>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002738:	2b00      	cmp	r3, #0
 800273a:	d017      	beq.n	800276c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002740:	781a      	ldrb	r2, [r3, #0]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274c:	1c5a      	adds	r2, r3, #1
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002756:	b29b      	uxth	r3, r3
 8002758:	3b01      	subs	r3, #1
 800275a:	b29a      	uxth	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002764:	3b01      	subs	r3, #1
 8002766:	b29a      	uxth	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	6a39      	ldr	r1, [r7, #32]
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f001 fec7 	bl	8004504 <I2C_WaitOnBTFFlagUntilTimeout>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00d      	beq.n	8002798 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002780:	2b04      	cmp	r3, #4
 8002782:	d107      	bne.n	8002794 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002792:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e01a      	b.n	80027ce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800279c:	2b00      	cmp	r3, #0
 800279e:	d194      	bne.n	80026ca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2220      	movs	r2, #32
 80027b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027c8:	2300      	movs	r3, #0
 80027ca:	e000      	b.n	80027ce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80027cc:	2302      	movs	r3, #2
  }
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3718      	adds	r7, #24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	00100002 	.word	0x00100002
 80027dc:	ffff0000 	.word	0xffff0000

080027e0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b088      	sub	sp, #32
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80027e8:	2300      	movs	r3, #0
 80027ea:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002800:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002808:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800280a:	7bfb      	ldrb	r3, [r7, #15]
 800280c:	2b10      	cmp	r3, #16
 800280e:	d003      	beq.n	8002818 <HAL_I2C_EV_IRQHandler+0x38>
 8002810:	7bfb      	ldrb	r3, [r7, #15]
 8002812:	2b40      	cmp	r3, #64	; 0x40
 8002814:	f040 80c1 	bne.w	800299a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10d      	bne.n	800284e <HAL_I2C_EV_IRQHandler+0x6e>
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002838:	d003      	beq.n	8002842 <HAL_I2C_EV_IRQHandler+0x62>
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002840:	d101      	bne.n	8002846 <HAL_I2C_EV_IRQHandler+0x66>
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <HAL_I2C_EV_IRQHandler+0x68>
 8002846:	2300      	movs	r3, #0
 8002848:	2b01      	cmp	r3, #1
 800284a:	f000 8132 	beq.w	8002ab2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00c      	beq.n	8002872 <HAL_I2C_EV_IRQHandler+0x92>
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	0a5b      	lsrs	r3, r3, #9
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	2b00      	cmp	r3, #0
 8002862:	d006      	beq.n	8002872 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f001 fef5 	bl	8004654 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 fd99 	bl	80033a2 <I2C_Master_SB>
 8002870:	e092      	b.n	8002998 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	08db      	lsrs	r3, r3, #3
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b00      	cmp	r3, #0
 800287c:	d009      	beq.n	8002892 <HAL_I2C_EV_IRQHandler+0xb2>
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	0a5b      	lsrs	r3, r3, #9
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 fe0e 	bl	80034ac <I2C_Master_ADD10>
 8002890:	e082      	b.n	8002998 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	085b      	lsrs	r3, r3, #1
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b00      	cmp	r3, #0
 800289c:	d009      	beq.n	80028b2 <HAL_I2C_EV_IRQHandler+0xd2>
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	0a5b      	lsrs	r3, r3, #9
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 fe27 	bl	80034fe <I2C_Master_ADDR>
 80028b0:	e072      	b.n	8002998 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	089b      	lsrs	r3, r3, #2
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d03b      	beq.n	8002936 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028cc:	f000 80f3 	beq.w	8002ab6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	09db      	lsrs	r3, r3, #7
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00f      	beq.n	80028fc <HAL_I2C_EV_IRQHandler+0x11c>
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	0a9b      	lsrs	r3, r3, #10
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d009      	beq.n	80028fc <HAL_I2C_EV_IRQHandler+0x11c>
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	089b      	lsrs	r3, r3, #2
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d103      	bne.n	80028fc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 f9f1 	bl	8002cdc <I2C_MasterTransmit_TXE>
 80028fa:	e04d      	b.n	8002998 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	089b      	lsrs	r3, r3, #2
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	2b00      	cmp	r3, #0
 8002906:	f000 80d6 	beq.w	8002ab6 <HAL_I2C_EV_IRQHandler+0x2d6>
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	0a5b      	lsrs	r3, r3, #9
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	f000 80cf 	beq.w	8002ab6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002918:	7bbb      	ldrb	r3, [r7, #14]
 800291a:	2b21      	cmp	r3, #33	; 0x21
 800291c:	d103      	bne.n	8002926 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 fa78 	bl	8002e14 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002924:	e0c7      	b.n	8002ab6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002926:	7bfb      	ldrb	r3, [r7, #15]
 8002928:	2b40      	cmp	r3, #64	; 0x40
 800292a:	f040 80c4 	bne.w	8002ab6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 fae6 	bl	8002f00 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002934:	e0bf      	b.n	8002ab6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002940:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002944:	f000 80b7 	beq.w	8002ab6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	099b      	lsrs	r3, r3, #6
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	2b00      	cmp	r3, #0
 8002952:	d00f      	beq.n	8002974 <HAL_I2C_EV_IRQHandler+0x194>
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	0a9b      	lsrs	r3, r3, #10
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b00      	cmp	r3, #0
 800295e:	d009      	beq.n	8002974 <HAL_I2C_EV_IRQHandler+0x194>
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	089b      	lsrs	r3, r3, #2
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	2b00      	cmp	r3, #0
 800296a:	d103      	bne.n	8002974 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 fb5f 	bl	8003030 <I2C_MasterReceive_RXNE>
 8002972:	e011      	b.n	8002998 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	089b      	lsrs	r3, r3, #2
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 809a 	beq.w	8002ab6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	0a5b      	lsrs	r3, r3, #9
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	f000 8093 	beq.w	8002ab6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 fc15 	bl	80031c0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002996:	e08e      	b.n	8002ab6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002998:	e08d      	b.n	8002ab6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d004      	beq.n	80029ac <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	61fb      	str	r3, [r7, #28]
 80029aa:	e007      	b.n	80029bc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	085b      	lsrs	r3, r3, #1
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d012      	beq.n	80029ee <HAL_I2C_EV_IRQHandler+0x20e>
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	0a5b      	lsrs	r3, r3, #9
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00c      	beq.n	80029ee <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80029e4:	69b9      	ldr	r1, [r7, #24]
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 ffe0 	bl	80039ac <I2C_Slave_ADDR>
 80029ec:	e066      	b.n	8002abc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	091b      	lsrs	r3, r3, #4
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d009      	beq.n	8002a0e <HAL_I2C_EV_IRQHandler+0x22e>
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	0a5b      	lsrs	r3, r3, #9
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f001 f81a 	bl	8003a40 <I2C_Slave_STOPF>
 8002a0c:	e056      	b.n	8002abc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002a0e:	7bbb      	ldrb	r3, [r7, #14]
 8002a10:	2b21      	cmp	r3, #33	; 0x21
 8002a12:	d002      	beq.n	8002a1a <HAL_I2C_EV_IRQHandler+0x23a>
 8002a14:	7bbb      	ldrb	r3, [r7, #14]
 8002a16:	2b29      	cmp	r3, #41	; 0x29
 8002a18:	d125      	bne.n	8002a66 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	09db      	lsrs	r3, r3, #7
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00f      	beq.n	8002a46 <HAL_I2C_EV_IRQHandler+0x266>
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	0a9b      	lsrs	r3, r3, #10
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d009      	beq.n	8002a46 <HAL_I2C_EV_IRQHandler+0x266>
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	089b      	lsrs	r3, r3, #2
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d103      	bne.n	8002a46 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 fef8 	bl	8003834 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a44:	e039      	b.n	8002aba <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	089b      	lsrs	r3, r3, #2
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d033      	beq.n	8002aba <HAL_I2C_EV_IRQHandler+0x2da>
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	0a5b      	lsrs	r3, r3, #9
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d02d      	beq.n	8002aba <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 ff25 	bl	80038ae <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a64:	e029      	b.n	8002aba <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	099b      	lsrs	r3, r3, #6
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00f      	beq.n	8002a92 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	0a9b      	lsrs	r3, r3, #10
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d009      	beq.n	8002a92 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	089b      	lsrs	r3, r3, #2
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d103      	bne.n	8002a92 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 ff2f 	bl	80038ee <I2C_SlaveReceive_RXNE>
 8002a90:	e014      	b.n	8002abc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	089b      	lsrs	r3, r3, #2
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00e      	beq.n	8002abc <HAL_I2C_EV_IRQHandler+0x2dc>
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	0a5b      	lsrs	r3, r3, #9
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d008      	beq.n	8002abc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 ff5d 	bl	800396a <I2C_SlaveReceive_BTF>
 8002ab0:	e004      	b.n	8002abc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002ab2:	bf00      	nop
 8002ab4:	e002      	b.n	8002abc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ab6:	bf00      	nop
 8002ab8:	e000      	b.n	8002abc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002aba:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002abc:	3720      	adds	r7, #32
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b08a      	sub	sp, #40	; 0x28
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	695b      	ldr	r3, [r3, #20]
 8002ad0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002ada:	2300      	movs	r3, #0
 8002adc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ae4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002ae6:	6a3b      	ldr	r3, [r7, #32]
 8002ae8:	0a1b      	lsrs	r3, r3, #8
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d016      	beq.n	8002b20 <HAL_I2C_ER_IRQHandler+0x5e>
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	0a1b      	lsrs	r3, r3, #8
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d010      	beq.n	8002b20 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	f043 0301 	orr.w	r3, r3, #1
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002b0e:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b1e:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002b20:	6a3b      	ldr	r3, [r7, #32]
 8002b22:	0a5b      	lsrs	r3, r3, #9
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00e      	beq.n	8002b4a <HAL_I2C_ER_IRQHandler+0x88>
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	0a1b      	lsrs	r3, r3, #8
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d008      	beq.n	8002b4a <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3a:	f043 0302 	orr.w	r3, r3, #2
 8002b3e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002b48:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002b4a:	6a3b      	ldr	r3, [r7, #32]
 8002b4c:	0a9b      	lsrs	r3, r3, #10
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d03f      	beq.n	8002bd6 <HAL_I2C_ER_IRQHandler+0x114>
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	0a1b      	lsrs	r3, r3, #8
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d039      	beq.n	8002bd6 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8002b62:	7efb      	ldrb	r3, [r7, #27]
 8002b64:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b74:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002b7c:	7ebb      	ldrb	r3, [r7, #26]
 8002b7e:	2b20      	cmp	r3, #32
 8002b80:	d112      	bne.n	8002ba8 <HAL_I2C_ER_IRQHandler+0xe6>
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10f      	bne.n	8002ba8 <HAL_I2C_ER_IRQHandler+0xe6>
 8002b88:	7cfb      	ldrb	r3, [r7, #19]
 8002b8a:	2b21      	cmp	r3, #33	; 0x21
 8002b8c:	d008      	beq.n	8002ba0 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002b8e:	7cfb      	ldrb	r3, [r7, #19]
 8002b90:	2b29      	cmp	r3, #41	; 0x29
 8002b92:	d005      	beq.n	8002ba0 <HAL_I2C_ER_IRQHandler+0xde>
 8002b94:	7cfb      	ldrb	r3, [r7, #19]
 8002b96:	2b28      	cmp	r3, #40	; 0x28
 8002b98:	d106      	bne.n	8002ba8 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2b21      	cmp	r3, #33	; 0x21
 8002b9e:	d103      	bne.n	8002ba8 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f001 f87d 	bl	8003ca0 <I2C_Slave_AF>
 8002ba6:	e016      	b.n	8002bd6 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002bb0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	f043 0304 	orr.w	r3, r3, #4
 8002bb8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002bba:	7efb      	ldrb	r3, [r7, #27]
 8002bbc:	2b10      	cmp	r3, #16
 8002bbe:	d002      	beq.n	8002bc6 <HAL_I2C_ER_IRQHandler+0x104>
 8002bc0:	7efb      	ldrb	r3, [r7, #27]
 8002bc2:	2b40      	cmp	r3, #64	; 0x40
 8002bc4:	d107      	bne.n	8002bd6 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bd4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002bd6:	6a3b      	ldr	r3, [r7, #32]
 8002bd8:	0adb      	lsrs	r3, r3, #11
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00e      	beq.n	8002c00 <HAL_I2C_ER_IRQHandler+0x13e>
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	0a1b      	lsrs	r3, r3, #8
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d008      	beq.n	8002c00 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	f043 0308 	orr.w	r3, r3, #8
 8002bf4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002bfe:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d008      	beq.n	8002c18 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f001 f8b8 	bl	8003d88 <I2C_ITError>
  }
}
 8002c18:	bf00      	nop
 8002c1a:	3728      	adds	r7, #40	; 0x28
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bc80      	pop	{r7}
 8002c30:	4770      	bx	lr

08002c32 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr

08002c44 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bc80      	pop	{r7}
 8002c54:	4770      	bx	lr

08002c56 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr

08002c68 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	460b      	mov	r3, r1
 8002c72:	70fb      	strb	r3, [r7, #3]
 8002c74:	4613      	mov	r3, r2
 8002c76:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bc80      	pop	{r7}
 8002c80:	4770      	bx	lr

08002c82 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bc80      	pop	{r7}
 8002c92:	4770      	bx	lr

08002c94 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bc80      	pop	{r7}
 8002ca4:	4770      	bx	lr

08002ca6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bc80      	pop	{r7}
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bc80      	pop	{r7}
 8002cc8:	4770      	bx	lr

08002cca <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b083      	sub	sp, #12
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002cd2:	bf00      	nop
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bc80      	pop	{r7}
 8002cda:	4770      	bx	lr

08002cdc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cea:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cf2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d150      	bne.n	8002da4 <I2C_MasterTransmit_TXE+0xc8>
 8002d02:	7bfb      	ldrb	r3, [r7, #15]
 8002d04:	2b21      	cmp	r3, #33	; 0x21
 8002d06:	d14d      	bne.n	8002da4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	2b08      	cmp	r3, #8
 8002d0c:	d01d      	beq.n	8002d4a <I2C_MasterTransmit_TXE+0x6e>
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2b20      	cmp	r3, #32
 8002d12:	d01a      	beq.n	8002d4a <I2C_MasterTransmit_TXE+0x6e>
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d1a:	d016      	beq.n	8002d4a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d2a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2211      	movs	r2, #17
 8002d30:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f7ff ff6c 	bl	8002c20 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002d48:	e060      	b.n	8002e0c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	685a      	ldr	r2, [r3, #4]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d58:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d68:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2220      	movs	r2, #32
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b40      	cmp	r3, #64	; 0x40
 8002d82:	d107      	bne.n	8002d94 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f7ff ff81 	bl	8002c94 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002d92:	e03b      	b.n	8002e0c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f7ff ff3f 	bl	8002c20 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002da2:	e033      	b.n	8002e0c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002da4:	7bfb      	ldrb	r3, [r7, #15]
 8002da6:	2b21      	cmp	r3, #33	; 0x21
 8002da8:	d005      	beq.n	8002db6 <I2C_MasterTransmit_TXE+0xda>
 8002daa:	7bbb      	ldrb	r3, [r7, #14]
 8002dac:	2b40      	cmp	r3, #64	; 0x40
 8002dae:	d12d      	bne.n	8002e0c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002db0:	7bfb      	ldrb	r3, [r7, #15]
 8002db2:	2b22      	cmp	r3, #34	; 0x22
 8002db4:	d12a      	bne.n	8002e0c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d108      	bne.n	8002dd2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	685a      	ldr	r2, [r3, #4]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dce:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002dd0:	e01c      	b.n	8002e0c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b40      	cmp	r3, #64	; 0x40
 8002ddc:	d103      	bne.n	8002de6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 f88e 	bl	8002f00 <I2C_MemoryTransmit_TXE_BTF>
}
 8002de4:	e012      	b.n	8002e0c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dea:	781a      	ldrb	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df6:	1c5a      	adds	r2, r3, #1
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	3b01      	subs	r3, #1
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002e0a:	e7ff      	b.n	8002e0c <I2C_MasterTransmit_TXE+0x130>
 8002e0c:	bf00      	nop
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e20:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b21      	cmp	r3, #33	; 0x21
 8002e2c:	d164      	bne.n	8002ef8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d012      	beq.n	8002e5e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3c:	781a      	ldrb	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e48:	1c5a      	adds	r2, r3, #1
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	3b01      	subs	r3, #1
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002e5c:	e04c      	b.n	8002ef8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2b08      	cmp	r3, #8
 8002e62:	d01d      	beq.n	8002ea0 <I2C_MasterTransmit_BTF+0x8c>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2b20      	cmp	r3, #32
 8002e68:	d01a      	beq.n	8002ea0 <I2C_MasterTransmit_BTF+0x8c>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e70:	d016      	beq.n	8002ea0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e80:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2211      	movs	r2, #17
 8002e86:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2220      	movs	r2, #32
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f7ff fec1 	bl	8002c20 <HAL_I2C_MasterTxCpltCallback>
}
 8002e9e:	e02b      	b.n	8002ef8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002eae:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ebe:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2220      	movs	r2, #32
 8002eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b40      	cmp	r3, #64	; 0x40
 8002ed8:	d107      	bne.n	8002eea <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7ff fed6 	bl	8002c94 <HAL_I2C_MemTxCpltCallback>
}
 8002ee8:	e006      	b.n	8002ef8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7ff fe94 	bl	8002c20 <HAL_I2C_MasterTxCpltCallback>
}
 8002ef8:	bf00      	nop
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f0e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d11d      	bne.n	8002f54 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d10b      	bne.n	8002f38 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f30:	1c9a      	adds	r2, r3, #2
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8002f36:	e077      	b.n	8003028 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	121b      	asrs	r3, r3, #8
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f4c:	1c5a      	adds	r2, r3, #1
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002f52:	e069      	b.n	8003028 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d10b      	bne.n	8002f74 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f60:	b2da      	uxtb	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f6c:	1c5a      	adds	r2, r3, #1
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002f72:	e059      	b.n	8003028 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d152      	bne.n	8003022 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002f7c:	7bfb      	ldrb	r3, [r7, #15]
 8002f7e:	2b22      	cmp	r3, #34	; 0x22
 8002f80:	d10d      	bne.n	8002f9e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f90:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f96:	1c5a      	adds	r2, r3, #1
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002f9c:	e044      	b.n	8003028 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d015      	beq.n	8002fd4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002fa8:	7bfb      	ldrb	r3, [r7, #15]
 8002faa:	2b21      	cmp	r3, #33	; 0x21
 8002fac:	d112      	bne.n	8002fd4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb2:	781a      	ldrb	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbe:	1c5a      	adds	r2, r3, #1
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002fd2:	e029      	b.n	8003028 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d124      	bne.n	8003028 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8002fde:	7bfb      	ldrb	r3, [r7, #15]
 8002fe0:	2b21      	cmp	r3, #33	; 0x21
 8002fe2:	d121      	bne.n	8003028 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ff2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003002:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2220      	movs	r2, #32
 800300e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f7ff fe3a 	bl	8002c94 <HAL_I2C_MemTxCpltCallback>
}
 8003020:	e002      	b.n	8003028 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7ff faca 	bl	80025bc <I2C_Flush_DR>
}
 8003028:	bf00      	nop
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b22      	cmp	r3, #34	; 0x22
 8003042:	f040 80b9 	bne.w	80031b8 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304a:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003050:	b29b      	uxth	r3, r3
 8003052:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	2b03      	cmp	r3, #3
 8003058:	d921      	bls.n	800309e <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	691a      	ldr	r2, [r3, #16]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003064:	b2d2      	uxtb	r2, r2
 8003066:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306c:	1c5a      	adds	r2, r3, #1
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003076:	b29b      	uxth	r3, r3
 8003078:	3b01      	subs	r3, #1
 800307a:	b29a      	uxth	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003084:	b29b      	uxth	r3, r3
 8003086:	2b03      	cmp	r3, #3
 8003088:	f040 8096 	bne.w	80031b8 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	685a      	ldr	r2, [r3, #4]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800309a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800309c:	e08c      	b.n	80031b8 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d07f      	beq.n	80031a6 <I2C_MasterReceive_RXNE+0x176>
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d002      	beq.n	80030b2 <I2C_MasterReceive_RXNE+0x82>
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d179      	bne.n	80031a6 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f001 fa6e 	bl	8004594 <I2C_WaitOnSTOPRequestThroughIT>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d14c      	bne.n	8003158 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030cc:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	685a      	ldr	r2, [r3, #4]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80030dc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	691a      	ldr	r2, [r3, #16]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	b2d2      	uxtb	r2, r2
 80030ea:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f0:	1c5a      	adds	r2, r3, #1
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	3b01      	subs	r3, #1
 80030fe:	b29a      	uxth	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2220      	movs	r2, #32
 8003108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003112:	b2db      	uxtb	r3, r3
 8003114:	2b40      	cmp	r3, #64	; 0x40
 8003116:	d10a      	bne.n	800312e <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7ff fdbd 	bl	8002ca6 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800312c:	e044      	b.n	80031b8 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2b08      	cmp	r3, #8
 800313a:	d002      	beq.n	8003142 <I2C_MasterReceive_RXNE+0x112>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2b20      	cmp	r3, #32
 8003140:	d103      	bne.n	800314a <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	631a      	str	r2, [r3, #48]	; 0x30
 8003148:	e002      	b.n	8003150 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2212      	movs	r2, #18
 800314e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f7ff fd6e 	bl	8002c32 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003156:	e02f      	b.n	80031b8 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003166:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	691a      	ldr	r2, [r3, #16]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003172:	b2d2      	uxtb	r2, r2
 8003174:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317a:	1c5a      	adds	r2, r3, #1
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003184:	b29b      	uxth	r3, r3
 8003186:	3b01      	subs	r3, #1
 8003188:	b29a      	uxth	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2220      	movs	r2, #32
 8003192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7ff fd8a 	bl	8002cb8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80031a4:	e008      	b.n	80031b8 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031b4:	605a      	str	r2, [r3, #4]
}
 80031b6:	e7ff      	b.n	80031b8 <I2C_MasterReceive_RXNE+0x188>
 80031b8:	bf00      	nop
 80031ba:	3710      	adds	r7, #16
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031cc:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	2b04      	cmp	r3, #4
 80031d6:	d11b      	bne.n	8003210 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	685a      	ldr	r2, [r3, #4]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031e6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	691a      	ldr	r2, [r3, #16]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f2:	b2d2      	uxtb	r2, r2
 80031f4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fa:	1c5a      	adds	r2, r3, #1
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003204:	b29b      	uxth	r3, r3
 8003206:	3b01      	subs	r3, #1
 8003208:	b29a      	uxth	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800320e:	e0c4      	b.n	800339a <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003214:	b29b      	uxth	r3, r3
 8003216:	2b03      	cmp	r3, #3
 8003218:	d129      	bne.n	800326e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	685a      	ldr	r2, [r3, #4]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003228:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2b04      	cmp	r3, #4
 800322e:	d00a      	beq.n	8003246 <I2C_MasterReceive_BTF+0x86>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2b02      	cmp	r3, #2
 8003234:	d007      	beq.n	8003246 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003244:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	691a      	ldr	r2, [r3, #16]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003250:	b2d2      	uxtb	r2, r2
 8003252:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	1c5a      	adds	r2, r3, #1
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003262:	b29b      	uxth	r3, r3
 8003264:	3b01      	subs	r3, #1
 8003266:	b29a      	uxth	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800326c:	e095      	b.n	800339a <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003272:	b29b      	uxth	r3, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d17d      	bne.n	8003374 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d002      	beq.n	8003284 <I2C_MasterReceive_BTF+0xc4>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2b10      	cmp	r3, #16
 8003282:	d108      	bne.n	8003296 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	e016      	b.n	80032c4 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2b04      	cmp	r3, #4
 800329a:	d002      	beq.n	80032a2 <I2C_MasterReceive_BTF+0xe2>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d108      	bne.n	80032b4 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	e007      	b.n	80032c4 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032c2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	691a      	ldr	r2, [r3, #16]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ce:	b2d2      	uxtb	r2, r2
 80032d0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d6:	1c5a      	adds	r2, r3, #1
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	3b01      	subs	r3, #1
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	691a      	ldr	r2, [r3, #16]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f4:	b2d2      	uxtb	r2, r2
 80032f6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fc:	1c5a      	adds	r2, r3, #1
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003306:	b29b      	uxth	r3, r3
 8003308:	3b01      	subs	r3, #1
 800330a:	b29a      	uxth	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800331e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2220      	movs	r2, #32
 8003324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b40      	cmp	r3, #64	; 0x40
 8003332:	d10a      	bne.n	800334a <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7ff fcaf 	bl	8002ca6 <HAL_I2C_MemRxCpltCallback>
}
 8003348:	e027      	b.n	800339a <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2b08      	cmp	r3, #8
 8003356:	d002      	beq.n	800335e <I2C_MasterReceive_BTF+0x19e>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2b20      	cmp	r3, #32
 800335c:	d103      	bne.n	8003366 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	631a      	str	r2, [r3, #48]	; 0x30
 8003364:	e002      	b.n	800336c <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2212      	movs	r2, #18
 800336a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f7ff fc60 	bl	8002c32 <HAL_I2C_MasterRxCpltCallback>
}
 8003372:	e012      	b.n	800339a <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	691a      	ldr	r2, [r3, #16]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337e:	b2d2      	uxtb	r2, r2
 8003380:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003386:	1c5a      	adds	r2, r3, #1
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003390:	b29b      	uxth	r3, r3
 8003392:	3b01      	subs	r3, #1
 8003394:	b29a      	uxth	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800339a:	bf00      	nop
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b083      	sub	sp, #12
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b40      	cmp	r3, #64	; 0x40
 80033b4:	d117      	bne.n	80033e6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d109      	bne.n	80033d2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	461a      	mov	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033ce:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80033d0:	e067      	b.n	80034a2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	f043 0301 	orr.w	r3, r3, #1
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	611a      	str	r2, [r3, #16]
}
 80033e4:	e05d      	b.n	80034a2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033ee:	d133      	bne.n	8003458 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b21      	cmp	r3, #33	; 0x21
 80033fa:	d109      	bne.n	8003410 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003400:	b2db      	uxtb	r3, r3
 8003402:	461a      	mov	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800340c:	611a      	str	r2, [r3, #16]
 800340e:	e008      	b.n	8003422 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003414:	b2db      	uxtb	r3, r3
 8003416:	f043 0301 	orr.w	r3, r3, #1
 800341a:	b2da      	uxtb	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003426:	2b00      	cmp	r3, #0
 8003428:	d004      	beq.n	8003434 <I2C_Master_SB+0x92>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800342e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003430:	2b00      	cmp	r3, #0
 8003432:	d108      	bne.n	8003446 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003438:	2b00      	cmp	r3, #0
 800343a:	d032      	beq.n	80034a2 <I2C_Master_SB+0x100>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003442:	2b00      	cmp	r3, #0
 8003444:	d02d      	beq.n	80034a2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003454:	605a      	str	r2, [r3, #4]
}
 8003456:	e024      	b.n	80034a2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800345c:	2b00      	cmp	r3, #0
 800345e:	d10e      	bne.n	800347e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003464:	b29b      	uxth	r3, r3
 8003466:	11db      	asrs	r3, r3, #7
 8003468:	b2db      	uxtb	r3, r3
 800346a:	f003 0306 	and.w	r3, r3, #6
 800346e:	b2db      	uxtb	r3, r3
 8003470:	f063 030f 	orn	r3, r3, #15
 8003474:	b2da      	uxtb	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	611a      	str	r2, [r3, #16]
}
 800347c:	e011      	b.n	80034a2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003482:	2b01      	cmp	r3, #1
 8003484:	d10d      	bne.n	80034a2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348a:	b29b      	uxth	r3, r3
 800348c:	11db      	asrs	r3, r3, #7
 800348e:	b2db      	uxtb	r3, r3
 8003490:	f003 0306 	and.w	r3, r3, #6
 8003494:	b2db      	uxtb	r3, r3
 8003496:	f063 030e 	orn	r3, r3, #14
 800349a:	b2da      	uxtb	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	611a      	str	r2, [r3, #16]
}
 80034a2:	bf00      	nop
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bc80      	pop	{r7}
 80034aa:	4770      	bx	lr

080034ac <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b8:	b2da      	uxtb	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d004      	beq.n	80034d2 <I2C_Master_ADD10+0x26>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d108      	bne.n	80034e4 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00c      	beq.n	80034f4 <I2C_Master_ADD10+0x48>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d007      	beq.n	80034f4 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034f2:	605a      	str	r2, [r3, #4]
  }
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bc80      	pop	{r7}
 80034fc:	4770      	bx	lr

080034fe <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80034fe:	b480      	push	{r7}
 8003500:	b091      	sub	sp, #68	; 0x44
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800350c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003514:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003522:	b2db      	uxtb	r3, r3
 8003524:	2b22      	cmp	r3, #34	; 0x22
 8003526:	f040 8174 	bne.w	8003812 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10f      	bne.n	8003552 <I2C_Master_ADDR+0x54>
 8003532:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003536:	2b40      	cmp	r3, #64	; 0x40
 8003538:	d10b      	bne.n	8003552 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800353a:	2300      	movs	r3, #0
 800353c:	633b      	str	r3, [r7, #48]	; 0x30
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	633b      	str	r3, [r7, #48]	; 0x30
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	633b      	str	r3, [r7, #48]	; 0x30
 800354e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003550:	e16b      	b.n	800382a <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003556:	2b00      	cmp	r3, #0
 8003558:	d11d      	bne.n	8003596 <I2C_Master_ADDR+0x98>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003562:	d118      	bne.n	8003596 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003564:	2300      	movs	r3, #0
 8003566:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003578:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003588:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800358e:	1c5a      	adds	r2, r3, #1
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	651a      	str	r2, [r3, #80]	; 0x50
 8003594:	e149      	b.n	800382a <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800359a:	b29b      	uxth	r3, r3
 800359c:	2b00      	cmp	r3, #0
 800359e:	d113      	bne.n	80035c8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035a0:	2300      	movs	r3, #0
 80035a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80035b4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035c4:	601a      	str	r2, [r3, #0]
 80035c6:	e120      	b.n	800380a <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	f040 808a 	bne.w	80036e8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80035d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035da:	d137      	bne.n	800364c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035ea:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035fa:	d113      	bne.n	8003624 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800360a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800360c:	2300      	movs	r3, #0
 800360e:	627b      	str	r3, [r7, #36]	; 0x24
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	627b      	str	r3, [r7, #36]	; 0x24
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	627b      	str	r3, [r7, #36]	; 0x24
 8003620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003622:	e0f2      	b.n	800380a <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003624:	2300      	movs	r3, #0
 8003626:	623b      	str	r3, [r7, #32]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	623b      	str	r3, [r7, #32]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	623b      	str	r3, [r7, #32]
 8003638:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003648:	601a      	str	r2, [r3, #0]
 800364a:	e0de      	b.n	800380a <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800364c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800364e:	2b08      	cmp	r3, #8
 8003650:	d02e      	beq.n	80036b0 <I2C_Master_ADDR+0x1b2>
 8003652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003654:	2b20      	cmp	r3, #32
 8003656:	d02b      	beq.n	80036b0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800365a:	2b12      	cmp	r3, #18
 800365c:	d102      	bne.n	8003664 <I2C_Master_ADDR+0x166>
 800365e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003660:	2b01      	cmp	r3, #1
 8003662:	d125      	bne.n	80036b0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003666:	2b04      	cmp	r3, #4
 8003668:	d00e      	beq.n	8003688 <I2C_Master_ADDR+0x18a>
 800366a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366c:	2b02      	cmp	r3, #2
 800366e:	d00b      	beq.n	8003688 <I2C_Master_ADDR+0x18a>
 8003670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003672:	2b10      	cmp	r3, #16
 8003674:	d008      	beq.n	8003688 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003684:	601a      	str	r2, [r3, #0]
 8003686:	e007      	b.n	8003698 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003696:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003698:	2300      	movs	r3, #0
 800369a:	61fb      	str	r3, [r7, #28]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	61fb      	str	r3, [r7, #28]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	61fb      	str	r3, [r7, #28]
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	e0ac      	b.n	800380a <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036be:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036c0:	2300      	movs	r3, #0
 80036c2:	61bb      	str	r3, [r7, #24]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	61bb      	str	r3, [r7, #24]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	61bb      	str	r3, [r7, #24]
 80036d4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036e4:	601a      	str	r2, [r3, #0]
 80036e6:	e090      	b.n	800380a <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d158      	bne.n	80037a4 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80036f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f4:	2b04      	cmp	r3, #4
 80036f6:	d021      	beq.n	800373c <I2C_Master_ADDR+0x23e>
 80036f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d01e      	beq.n	800373c <I2C_Master_ADDR+0x23e>
 80036fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003700:	2b10      	cmp	r3, #16
 8003702:	d01b      	beq.n	800373c <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003712:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003714:	2300      	movs	r3, #0
 8003716:	617b      	str	r3, [r7, #20]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	617b      	str	r3, [r7, #20]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	617b      	str	r3, [r7, #20]
 8003728:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003738:	601a      	str	r2, [r3, #0]
 800373a:	e012      	b.n	8003762 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800374a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800374c:	2300      	movs	r3, #0
 800374e:	613b      	str	r3, [r7, #16]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	613b      	str	r3, [r7, #16]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	613b      	str	r3, [r7, #16]
 8003760:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800376c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003770:	d14b      	bne.n	800380a <I2C_Master_ADDR+0x30c>
 8003772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003774:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003778:	d00b      	beq.n	8003792 <I2C_Master_ADDR+0x294>
 800377a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800377c:	2b01      	cmp	r3, #1
 800377e:	d008      	beq.n	8003792 <I2C_Master_ADDR+0x294>
 8003780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003782:	2b08      	cmp	r3, #8
 8003784:	d005      	beq.n	8003792 <I2C_Master_ADDR+0x294>
 8003786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003788:	2b10      	cmp	r3, #16
 800378a:	d002      	beq.n	8003792 <I2C_Master_ADDR+0x294>
 800378c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800378e:	2b20      	cmp	r3, #32
 8003790:	d13b      	bne.n	800380a <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80037a0:	605a      	str	r2, [r3, #4]
 80037a2:	e032      	b.n	800380a <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037b2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037c2:	d117      	bne.n	80037f4 <I2C_Master_ADDR+0x2f6>
 80037c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037ca:	d00b      	beq.n	80037e4 <I2C_Master_ADDR+0x2e6>
 80037cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d008      	beq.n	80037e4 <I2C_Master_ADDR+0x2e6>
 80037d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d4:	2b08      	cmp	r3, #8
 80037d6:	d005      	beq.n	80037e4 <I2C_Master_ADDR+0x2e6>
 80037d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037da:	2b10      	cmp	r3, #16
 80037dc:	d002      	beq.n	80037e4 <I2C_Master_ADDR+0x2e6>
 80037de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e0:	2b20      	cmp	r3, #32
 80037e2:	d107      	bne.n	80037f4 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685a      	ldr	r2, [r3, #4]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80037f2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037f4:	2300      	movs	r3, #0
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	60fb      	str	r3, [r7, #12]
 8003808:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003810:	e00b      	b.n	800382a <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003812:	2300      	movs	r3, #0
 8003814:	60bb      	str	r3, [r7, #8]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	60bb      	str	r3, [r7, #8]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	60bb      	str	r3, [r7, #8]
 8003826:	68bb      	ldr	r3, [r7, #8]
}
 8003828:	e7ff      	b.n	800382a <I2C_Master_ADDR+0x32c>
 800382a:	bf00      	nop
 800382c:	3744      	adds	r7, #68	; 0x44
 800382e:	46bd      	mov	sp, r7
 8003830:	bc80      	pop	{r7}
 8003832:	4770      	bx	lr

08003834 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003842:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003848:	b29b      	uxth	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d02b      	beq.n	80038a6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003852:	781a      	ldrb	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385e:	1c5a      	adds	r2, r3, #1
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003868:	b29b      	uxth	r3, r3
 800386a:	3b01      	subs	r3, #1
 800386c:	b29a      	uxth	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003876:	b29b      	uxth	r3, r3
 8003878:	2b00      	cmp	r3, #0
 800387a:	d114      	bne.n	80038a6 <I2C_SlaveTransmit_TXE+0x72>
 800387c:	7bfb      	ldrb	r3, [r7, #15]
 800387e:	2b29      	cmp	r3, #41	; 0x29
 8003880:	d111      	bne.n	80038a6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003890:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2221      	movs	r2, #33	; 0x21
 8003896:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2228      	movs	r2, #40	; 0x28
 800389c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f7ff f9cf 	bl	8002c44 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80038a6:	bf00      	nop
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80038ae:	b480      	push	{r7}
 80038b0:	b083      	sub	sp, #12
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d011      	beq.n	80038e4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c4:	781a      	ldrb	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	1c5a      	adds	r2, r3, #1
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038da:	b29b      	uxth	r3, r3
 80038dc:	3b01      	subs	r3, #1
 80038de:	b29a      	uxth	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bc80      	pop	{r7}
 80038ec:	4770      	bx	lr

080038ee <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b084      	sub	sp, #16
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038fc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003902:	b29b      	uxth	r3, r3
 8003904:	2b00      	cmp	r3, #0
 8003906:	d02c      	beq.n	8003962 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	691a      	ldr	r2, [r3, #16]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003912:	b2d2      	uxtb	r2, r2
 8003914:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391a:	1c5a      	adds	r2, r3, #1
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003924:	b29b      	uxth	r3, r3
 8003926:	3b01      	subs	r3, #1
 8003928:	b29a      	uxth	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003932:	b29b      	uxth	r3, r3
 8003934:	2b00      	cmp	r3, #0
 8003936:	d114      	bne.n	8003962 <I2C_SlaveReceive_RXNE+0x74>
 8003938:	7bfb      	ldrb	r3, [r7, #15]
 800393a:	2b2a      	cmp	r3, #42	; 0x2a
 800393c:	d111      	bne.n	8003962 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	685a      	ldr	r2, [r3, #4]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800394c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2222      	movs	r2, #34	; 0x22
 8003952:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2228      	movs	r2, #40	; 0x28
 8003958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f7ff f97a 	bl	8002c56 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003962:	bf00      	nop
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800396a:	b480      	push	{r7}
 800396c:	b083      	sub	sp, #12
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003976:	b29b      	uxth	r3, r3
 8003978:	2b00      	cmp	r3, #0
 800397a:	d012      	beq.n	80039a2 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	691a      	ldr	r2, [r3, #16]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003986:	b2d2      	uxtb	r2, r2
 8003988:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398e:	1c5a      	adds	r2, r3, #1
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003998:	b29b      	uxth	r3, r3
 800399a:	3b01      	subs	r3, #1
 800399c:	b29a      	uxth	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80039a2:	bf00      	nop
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bc80      	pop	{r7}
 80039aa:	4770      	bx	lr

080039ac <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80039b6:	2300      	movs	r3, #0
 80039b8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80039c6:	2b28      	cmp	r3, #40	; 0x28
 80039c8:	d127      	bne.n	8003a1a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039d8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	089b      	lsrs	r3, r3, #2
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80039e6:	2301      	movs	r3, #1
 80039e8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	09db      	lsrs	r3, r3, #7
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d103      	bne.n	80039fe <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	81bb      	strh	r3, [r7, #12]
 80039fc:	e002      	b.n	8003a04 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003a0c:	89ba      	ldrh	r2, [r7, #12]
 8003a0e:	7bfb      	ldrb	r3, [r7, #15]
 8003a10:	4619      	mov	r1, r3
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7ff f928 	bl	8002c68 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003a18:	e00e      	b.n	8003a38 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	60bb      	str	r3, [r7, #8]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	60bb      	str	r3, [r7, #8]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	60bb      	str	r3, [r7, #8]
 8003a2e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003a38:	bf00      	nop
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a4e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a5e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003a60:	2300      	movs	r3, #0
 8003a62:	60bb      	str	r3, [r7, #8]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	60bb      	str	r3, [r7, #8]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f042 0201 	orr.w	r2, r2, #1
 8003a7a:	601a      	str	r2, [r3, #0]
 8003a7c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a8c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a9c:	d172      	bne.n	8003b84 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003a9e:	7bfb      	ldrb	r3, [r7, #15]
 8003aa0:	2b22      	cmp	r3, #34	; 0x22
 8003aa2:	d002      	beq.n	8003aaa <I2C_Slave_STOPF+0x6a>
 8003aa4:	7bfb      	ldrb	r3, [r7, #15]
 8003aa6:	2b2a      	cmp	r3, #42	; 0x2a
 8003aa8:	d135      	bne.n	8003b16 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d005      	beq.n	8003ace <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	f043 0204 	orr.w	r2, r3, #4
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003adc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7fe fa2a 	bl	8001f3c <HAL_DMA_GetState>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d049      	beq.n	8003b82 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af2:	4a69      	ldr	r2, [pc, #420]	; (8003c98 <I2C_Slave_STOPF+0x258>)
 8003af4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7fe f8a0 	bl	8001c40 <HAL_DMA_Abort_IT>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d03d      	beq.n	8003b82 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b10:	4610      	mov	r0, r2
 8003b12:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b14:	e035      	b.n	8003b82 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d005      	beq.n	8003b3a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	f043 0204 	orr.w	r2, r3, #4
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	685a      	ldr	r2, [r3, #4]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b48:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7fe f9f4 	bl	8001f3c <HAL_DMA_GetState>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d014      	beq.n	8003b84 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b5e:	4a4e      	ldr	r2, [pc, #312]	; (8003c98 <I2C_Slave_STOPF+0x258>)
 8003b60:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7fe f86a 	bl	8001c40 <HAL_DMA_Abort_IT>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d008      	beq.n	8003b84 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b7c:	4610      	mov	r0, r2
 8003b7e:	4798      	blx	r3
 8003b80:	e000      	b.n	8003b84 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b82:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d03e      	beq.n	8003c0c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	695b      	ldr	r3, [r3, #20]
 8003b94:	f003 0304 	and.w	r3, r3, #4
 8003b98:	2b04      	cmp	r3, #4
 8003b9a:	d112      	bne.n	8003bc2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	691a      	ldr	r2, [r3, #16]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba6:	b2d2      	uxtb	r2, r2
 8003ba8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bae:	1c5a      	adds	r2, r3, #1
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	695b      	ldr	r3, [r3, #20]
 8003bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bcc:	2b40      	cmp	r3, #64	; 0x40
 8003bce:	d112      	bne.n	8003bf6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	691a      	ldr	r2, [r3, #16]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bda:	b2d2      	uxtb	r2, r2
 8003bdc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be2:	1c5a      	adds	r2, r3, #1
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d005      	beq.n	8003c0c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c04:	f043 0204 	orr.w	r2, r3, #4
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d003      	beq.n	8003c1c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 f8b7 	bl	8003d88 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003c1a:	e039      	b.n	8003c90 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003c1c:	7bfb      	ldrb	r3, [r7, #15]
 8003c1e:	2b2a      	cmp	r3, #42	; 0x2a
 8003c20:	d109      	bne.n	8003c36 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2228      	movs	r2, #40	; 0x28
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f7ff f810 	bl	8002c56 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b28      	cmp	r3, #40	; 0x28
 8003c40:	d111      	bne.n	8003c66 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a15      	ldr	r2, [pc, #84]	; (8003c9c <I2C_Slave_STOPF+0x25c>)
 8003c46:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2220      	movs	r2, #32
 8003c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f7ff f80f 	bl	8002c82 <HAL_I2C_ListenCpltCallback>
}
 8003c64:	e014      	b.n	8003c90 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6a:	2b22      	cmp	r3, #34	; 0x22
 8003c6c:	d002      	beq.n	8003c74 <I2C_Slave_STOPF+0x234>
 8003c6e:	7bfb      	ldrb	r3, [r7, #15]
 8003c70:	2b22      	cmp	r3, #34	; 0x22
 8003c72:	d10d      	bne.n	8003c90 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2220      	movs	r2, #32
 8003c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f7fe ffe3 	bl	8002c56 <HAL_I2C_SlaveRxCpltCallback>
}
 8003c90:	bf00      	nop
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	080040f1 	.word	0x080040f1
 8003c9c:	ffff0000 	.word	0xffff0000

08003ca0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cae:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	2b08      	cmp	r3, #8
 8003cba:	d002      	beq.n	8003cc2 <I2C_Slave_AF+0x22>
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	2b20      	cmp	r3, #32
 8003cc0:	d129      	bne.n	8003d16 <I2C_Slave_AF+0x76>
 8003cc2:	7bfb      	ldrb	r3, [r7, #15]
 8003cc4:	2b28      	cmp	r3, #40	; 0x28
 8003cc6:	d126      	bne.n	8003d16 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a2e      	ldr	r2, [pc, #184]	; (8003d84 <I2C_Slave_AF+0xe4>)
 8003ccc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	685a      	ldr	r2, [r3, #4]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003cdc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ce6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cf6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2220      	movs	r2, #32
 8003d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f7fe ffb7 	bl	8002c82 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003d14:	e031      	b.n	8003d7a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003d16:	7bfb      	ldrb	r3, [r7, #15]
 8003d18:	2b21      	cmp	r3, #33	; 0x21
 8003d1a:	d129      	bne.n	8003d70 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a19      	ldr	r2, [pc, #100]	; (8003d84 <I2C_Slave_AF+0xe4>)
 8003d20:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2221      	movs	r2, #33	; 0x21
 8003d26:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d46:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d50:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d60:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7fe fc2a 	bl	80025bc <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f7fe ff6b 	bl	8002c44 <HAL_I2C_SlaveTxCpltCallback>
}
 8003d6e:	e004      	b.n	8003d7a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d78:	615a      	str	r2, [r3, #20]
}
 8003d7a:	bf00      	nop
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	ffff0000 	.word	0xffff0000

08003d88 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d96:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d9e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003da0:	7bbb      	ldrb	r3, [r7, #14]
 8003da2:	2b10      	cmp	r3, #16
 8003da4:	d002      	beq.n	8003dac <I2C_ITError+0x24>
 8003da6:	7bbb      	ldrb	r3, [r7, #14]
 8003da8:	2b40      	cmp	r3, #64	; 0x40
 8003daa:	d10a      	bne.n	8003dc2 <I2C_ITError+0x3a>
 8003dac:	7bfb      	ldrb	r3, [r7, #15]
 8003dae:	2b22      	cmp	r3, #34	; 0x22
 8003db0:	d107      	bne.n	8003dc2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dc0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003dc2:	7bfb      	ldrb	r3, [r7, #15]
 8003dc4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003dc8:	2b28      	cmp	r3, #40	; 0x28
 8003dca:	d107      	bne.n	8003ddc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2228      	movs	r2, #40	; 0x28
 8003dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003dda:	e015      	b.n	8003e08 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003de6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dea:	d00a      	beq.n	8003e02 <I2C_ITError+0x7a>
 8003dec:	7bfb      	ldrb	r3, [r7, #15]
 8003dee:	2b60      	cmp	r3, #96	; 0x60
 8003df0:	d007      	beq.n	8003e02 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2220      	movs	r2, #32
 8003df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e16:	d162      	bne.n	8003ede <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e26:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e2c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d020      	beq.n	8003e78 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e3a:	4a6a      	ldr	r2, [pc, #424]	; (8003fe4 <I2C_ITError+0x25c>)
 8003e3c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7fd fefc 	bl	8001c40 <HAL_DMA_Abort_IT>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f000 8089 	beq.w	8003f62 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f022 0201 	bic.w	r2, r2, #1
 8003e5e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2220      	movs	r2, #32
 8003e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e72:	4610      	mov	r0, r2
 8003e74:	4798      	blx	r3
 8003e76:	e074      	b.n	8003f62 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7c:	4a59      	ldr	r2, [pc, #356]	; (8003fe4 <I2C_ITError+0x25c>)
 8003e7e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7fd fedb 	bl	8001c40 <HAL_DMA_Abort_IT>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d068      	beq.n	8003f62 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e9a:	2b40      	cmp	r3, #64	; 0x40
 8003e9c:	d10b      	bne.n	8003eb6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	691a      	ldr	r2, [r3, #16]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea8:	b2d2      	uxtb	r2, r2
 8003eaa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	1c5a      	adds	r2, r3, #1
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 0201 	bic.w	r2, r2, #1
 8003ec4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ed8:	4610      	mov	r0, r2
 8003eda:	4798      	blx	r3
 8003edc:	e041      	b.n	8003f62 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b60      	cmp	r3, #96	; 0x60
 8003ee8:	d125      	bne.n	8003f36 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2220      	movs	r2, #32
 8003eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f02:	2b40      	cmp	r3, #64	; 0x40
 8003f04:	d10b      	bne.n	8003f1e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	691a      	ldr	r2, [r3, #16]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f10:	b2d2      	uxtb	r2, r2
 8003f12:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f18:	1c5a      	adds	r2, r3, #1
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 0201 	bic.w	r2, r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f7fe fecb 	bl	8002cca <HAL_I2C_AbortCpltCallback>
 8003f34:	e015      	b.n	8003f62 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f40:	2b40      	cmp	r3, #64	; 0x40
 8003f42:	d10b      	bne.n	8003f5c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	691a      	ldr	r2, [r3, #16]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	b2d2      	uxtb	r2, r2
 8003f50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f56:	1c5a      	adds	r2, r3, #1
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f7fe feab 	bl	8002cb8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f66:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10e      	bne.n	8003f90 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d109      	bne.n	8003f90 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d104      	bne.n	8003f90 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d007      	beq.n	8003fa0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	685a      	ldr	r2, [r3, #4]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f9e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fa6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fac:	f003 0304 	and.w	r3, r3, #4
 8003fb0:	2b04      	cmp	r3, #4
 8003fb2:	d113      	bne.n	8003fdc <I2C_ITError+0x254>
 8003fb4:	7bfb      	ldrb	r3, [r7, #15]
 8003fb6:	2b28      	cmp	r3, #40	; 0x28
 8003fb8:	d110      	bne.n	8003fdc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a0a      	ldr	r2, [pc, #40]	; (8003fe8 <I2C_ITError+0x260>)
 8003fbe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7fe fe53 	bl	8002c82 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003fdc:	bf00      	nop
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	080040f1 	.word	0x080040f1
 8003fe8:	ffff0000 	.word	0xffff0000

08003fec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b088      	sub	sp, #32
 8003ff0:	af02      	add	r7, sp, #8
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	607a      	str	r2, [r7, #4]
 8003ff6:	603b      	str	r3, [r7, #0]
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004000:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	2b08      	cmp	r3, #8
 8004006:	d006      	beq.n	8004016 <I2C_MasterRequestWrite+0x2a>
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d003      	beq.n	8004016 <I2C_MasterRequestWrite+0x2a>
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004014:	d108      	bne.n	8004028 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004024:	601a      	str	r2, [r3, #0]
 8004026:	e00b      	b.n	8004040 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402c:	2b12      	cmp	r3, #18
 800402e:	d107      	bne.n	8004040 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800403e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f000 f8f7 	bl	8004240 <I2C_WaitOnFlagUntilTimeout>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00d      	beq.n	8004074 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004066:	d103      	bne.n	8004070 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800406e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e035      	b.n	80040e0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800407c:	d108      	bne.n	8004090 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800407e:	897b      	ldrh	r3, [r7, #10]
 8004080:	b2db      	uxtb	r3, r3
 8004082:	461a      	mov	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800408c:	611a      	str	r2, [r3, #16]
 800408e:	e01b      	b.n	80040c8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004090:	897b      	ldrh	r3, [r7, #10]
 8004092:	11db      	asrs	r3, r3, #7
 8004094:	b2db      	uxtb	r3, r3
 8004096:	f003 0306 	and.w	r3, r3, #6
 800409a:	b2db      	uxtb	r3, r3
 800409c:	f063 030f 	orn	r3, r3, #15
 80040a0:	b2da      	uxtb	r2, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	490e      	ldr	r1, [pc, #56]	; (80040e8 <I2C_MasterRequestWrite+0xfc>)
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f000 f940 	bl	8004334 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d001      	beq.n	80040be <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e010      	b.n	80040e0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80040be:	897b      	ldrh	r3, [r7, #10]
 80040c0:	b2da      	uxtb	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	4907      	ldr	r1, [pc, #28]	; (80040ec <I2C_MasterRequestWrite+0x100>)
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f000 f930 	bl	8004334 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e000      	b.n	80040e0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3718      	adds	r7, #24
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	00010008 	.word	0x00010008
 80040ec:	00010002 	.word	0x00010002

080040f0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80040f8:	2300      	movs	r3, #0
 80040fa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004100:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004108:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800410a:	4b4b      	ldr	r3, [pc, #300]	; (8004238 <I2C_DMAAbort+0x148>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	08db      	lsrs	r3, r3, #3
 8004110:	4a4a      	ldr	r2, [pc, #296]	; (800423c <I2C_DMAAbort+0x14c>)
 8004112:	fba2 2303 	umull	r2, r3, r2, r3
 8004116:	0a1a      	lsrs	r2, r3, #8
 8004118:	4613      	mov	r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	4413      	add	r3, r2
 800411e:	00da      	lsls	r2, r3, #3
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d106      	bne.n	8004138 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412e:	f043 0220 	orr.w	r2, r3, #32
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004136:	e00a      	b.n	800414e <I2C_DMAAbort+0x5e>
    }
    count--;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	3b01      	subs	r3, #1
 800413c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800414c:	d0ea      	beq.n	8004124 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004152:	2b00      	cmp	r3, #0
 8004154:	d003      	beq.n	800415e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800415a:	2200      	movs	r2, #0
 800415c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004162:	2b00      	cmp	r3, #0
 8004164:	d003      	beq.n	800416e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416a:	2200      	movs	r2, #0
 800416c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800417c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	2200      	movs	r2, #0
 8004182:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004188:	2b00      	cmp	r3, #0
 800418a:	d003      	beq.n	8004194 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004190:	2200      	movs	r2, #0
 8004192:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004198:	2b00      	cmp	r3, #0
 800419a:	d003      	beq.n	80041a4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a0:	2200      	movs	r2, #0
 80041a2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f022 0201 	bic.w	r2, r2, #1
 80041b2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b60      	cmp	r3, #96	; 0x60
 80041be:	d10e      	bne.n	80041de <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	2220      	movs	r2, #32
 80041c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	2200      	movs	r2, #0
 80041d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80041d6:	6978      	ldr	r0, [r7, #20]
 80041d8:	f7fe fd77 	bl	8002cca <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80041dc:	e027      	b.n	800422e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80041de:	7cfb      	ldrb	r3, [r7, #19]
 80041e0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80041e4:	2b28      	cmp	r3, #40	; 0x28
 80041e6:	d117      	bne.n	8004218 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f042 0201 	orr.w	r2, r2, #1
 80041f6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004206:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	2200      	movs	r2, #0
 800420c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	2228      	movs	r2, #40	; 0x28
 8004212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004216:	e007      	b.n	8004228 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	2220      	movs	r2, #32
 800421c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004228:	6978      	ldr	r0, [r7, #20]
 800422a:	f7fe fd45 	bl	8002cb8 <HAL_I2C_ErrorCallback>
}
 800422e:	bf00      	nop
 8004230:	3718      	adds	r7, #24
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	20000054 	.word	0x20000054
 800423c:	14f8b589 	.word	0x14f8b589

08004240 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	603b      	str	r3, [r7, #0]
 800424c:	4613      	mov	r3, r2
 800424e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004250:	e048      	b.n	80042e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004258:	d044      	beq.n	80042e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800425a:	f7fd fb5b 	bl	8001914 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	683a      	ldr	r2, [r7, #0]
 8004266:	429a      	cmp	r2, r3
 8004268:	d302      	bcc.n	8004270 <I2C_WaitOnFlagUntilTimeout+0x30>
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d139      	bne.n	80042e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	0c1b      	lsrs	r3, r3, #16
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b01      	cmp	r3, #1
 8004278:	d10d      	bne.n	8004296 <I2C_WaitOnFlagUntilTimeout+0x56>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	43da      	mvns	r2, r3
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	4013      	ands	r3, r2
 8004286:	b29b      	uxth	r3, r3
 8004288:	2b00      	cmp	r3, #0
 800428a:	bf0c      	ite	eq
 800428c:	2301      	moveq	r3, #1
 800428e:	2300      	movne	r3, #0
 8004290:	b2db      	uxtb	r3, r3
 8004292:	461a      	mov	r2, r3
 8004294:	e00c      	b.n	80042b0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	43da      	mvns	r2, r3
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	4013      	ands	r3, r2
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	bf0c      	ite	eq
 80042a8:	2301      	moveq	r3, #1
 80042aa:	2300      	movne	r3, #0
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	461a      	mov	r2, r3
 80042b0:	79fb      	ldrb	r3, [r7, #7]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d116      	bne.n	80042e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2220      	movs	r2, #32
 80042c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d0:	f043 0220 	orr.w	r2, r3, #32
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e023      	b.n	800432c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	0c1b      	lsrs	r3, r3, #16
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d10d      	bne.n	800430a <I2C_WaitOnFlagUntilTimeout+0xca>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	43da      	mvns	r2, r3
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	4013      	ands	r3, r2
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	bf0c      	ite	eq
 8004300:	2301      	moveq	r3, #1
 8004302:	2300      	movne	r3, #0
 8004304:	b2db      	uxtb	r3, r3
 8004306:	461a      	mov	r2, r3
 8004308:	e00c      	b.n	8004324 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	43da      	mvns	r2, r3
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	4013      	ands	r3, r2
 8004316:	b29b      	uxth	r3, r3
 8004318:	2b00      	cmp	r3, #0
 800431a:	bf0c      	ite	eq
 800431c:	2301      	moveq	r3, #1
 800431e:	2300      	movne	r3, #0
 8004320:	b2db      	uxtb	r3, r3
 8004322:	461a      	mov	r2, r3
 8004324:	79fb      	ldrb	r3, [r7, #7]
 8004326:	429a      	cmp	r2, r3
 8004328:	d093      	beq.n	8004252 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800432a:	2300      	movs	r3, #0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3710      	adds	r7, #16
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
 8004340:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004342:	e071      	b.n	8004428 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800434e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004352:	d123      	bne.n	800439c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004362:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800436c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2220      	movs	r2, #32
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004388:	f043 0204 	orr.w	r2, r3, #4
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e067      	b.n	800446c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a2:	d041      	beq.n	8004428 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043a4:	f7fd fab6 	bl	8001914 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d302      	bcc.n	80043ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d136      	bne.n	8004428 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	0c1b      	lsrs	r3, r3, #16
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d10c      	bne.n	80043de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	43da      	mvns	r2, r3
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	4013      	ands	r3, r2
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	bf14      	ite	ne
 80043d6:	2301      	movne	r3, #1
 80043d8:	2300      	moveq	r3, #0
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	e00b      	b.n	80043f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	43da      	mvns	r2, r3
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	4013      	ands	r3, r2
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	bf14      	ite	ne
 80043f0:	2301      	movne	r3, #1
 80043f2:	2300      	moveq	r3, #0
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d016      	beq.n	8004428 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2200      	movs	r2, #0
 80043fe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2220      	movs	r2, #32
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004414:	f043 0220 	orr.w	r2, r3, #32
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e021      	b.n	800446c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	0c1b      	lsrs	r3, r3, #16
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b01      	cmp	r3, #1
 8004430:	d10c      	bne.n	800444c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	695b      	ldr	r3, [r3, #20]
 8004438:	43da      	mvns	r2, r3
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	4013      	ands	r3, r2
 800443e:	b29b      	uxth	r3, r3
 8004440:	2b00      	cmp	r3, #0
 8004442:	bf14      	ite	ne
 8004444:	2301      	movne	r3, #1
 8004446:	2300      	moveq	r3, #0
 8004448:	b2db      	uxtb	r3, r3
 800444a:	e00b      	b.n	8004464 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	43da      	mvns	r2, r3
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	4013      	ands	r3, r2
 8004458:	b29b      	uxth	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	bf14      	ite	ne
 800445e:	2301      	movne	r3, #1
 8004460:	2300      	moveq	r3, #0
 8004462:	b2db      	uxtb	r3, r3
 8004464:	2b00      	cmp	r3, #0
 8004466:	f47f af6d 	bne.w	8004344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	3710      	adds	r7, #16
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004480:	e034      	b.n	80044ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f000 f8b8 	bl	80045f8 <I2C_IsAcknowledgeFailed>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e034      	b.n	80044fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004498:	d028      	beq.n	80044ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800449a:	f7fd fa3b 	bl	8001914 <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	68ba      	ldr	r2, [r7, #8]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d302      	bcc.n	80044b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d11d      	bne.n	80044ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ba:	2b80      	cmp	r3, #128	; 0x80
 80044bc:	d016      	beq.n	80044ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2220      	movs	r2, #32
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d8:	f043 0220 	orr.w	r2, r3, #32
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e007      	b.n	80044fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044f6:	2b80      	cmp	r3, #128	; 0x80
 80044f8:	d1c3      	bne.n	8004482 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3710      	adds	r7, #16
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004510:	e034      	b.n	800457c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f000 f870 	bl	80045f8 <I2C_IsAcknowledgeFailed>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e034      	b.n	800458c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004528:	d028      	beq.n	800457c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800452a:	f7fd f9f3 	bl	8001914 <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	68ba      	ldr	r2, [r7, #8]
 8004536:	429a      	cmp	r2, r3
 8004538:	d302      	bcc.n	8004540 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d11d      	bne.n	800457c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	f003 0304 	and.w	r3, r3, #4
 800454a:	2b04      	cmp	r3, #4
 800454c:	d016      	beq.n	800457c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2220      	movs	r2, #32
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004568:	f043 0220 	orr.w	r2, r3, #32
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e007      	b.n	800458c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	f003 0304 	and.w	r3, r3, #4
 8004586:	2b04      	cmp	r3, #4
 8004588:	d1c3      	bne.n	8004512 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800459c:	2300      	movs	r3, #0
 800459e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80045a0:	4b13      	ldr	r3, [pc, #76]	; (80045f0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	08db      	lsrs	r3, r3, #3
 80045a6:	4a13      	ldr	r2, [pc, #76]	; (80045f4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80045a8:	fba2 2303 	umull	r2, r3, r2, r3
 80045ac:	0a1a      	lsrs	r2, r3, #8
 80045ae:	4613      	mov	r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	4413      	add	r3, r2
 80045b4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	3b01      	subs	r3, #1
 80045ba:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d107      	bne.n	80045d2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c6:	f043 0220 	orr.w	r2, r3, #32
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e008      	b.n	80045e4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045e0:	d0e9      	beq.n	80045b6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3714      	adds	r7, #20
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bc80      	pop	{r7}
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	20000054 	.word	0x20000054
 80045f4:	14f8b589 	.word	0x14f8b589

080045f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800460a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800460e:	d11b      	bne.n	8004648 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004618:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2220      	movs	r2, #32
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004634:	f043 0204 	orr.w	r2, r3, #4
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e000      	b.n	800464a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	370c      	adds	r7, #12
 800464e:	46bd      	mov	sp, r7
 8004650:	bc80      	pop	{r7}
 8004652:	4770      	bx	lr

08004654 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004660:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004664:	d103      	bne.n	800466e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800466c:	e007      	b.n	800467e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004672:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004676:	d102      	bne.n	800467e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2208      	movs	r2, #8
 800467c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800467e:	bf00      	nop
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	bc80      	pop	{r7}
 8004686:	4770      	bx	lr

08004688 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b086      	sub	sp, #24
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e26c      	b.n	8004b74 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f000 8087 	beq.w	80047b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046a8:	4b92      	ldr	r3, [pc, #584]	; (80048f4 <HAL_RCC_OscConfig+0x26c>)
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f003 030c 	and.w	r3, r3, #12
 80046b0:	2b04      	cmp	r3, #4
 80046b2:	d00c      	beq.n	80046ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80046b4:	4b8f      	ldr	r3, [pc, #572]	; (80048f4 <HAL_RCC_OscConfig+0x26c>)
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f003 030c 	and.w	r3, r3, #12
 80046bc:	2b08      	cmp	r3, #8
 80046be:	d112      	bne.n	80046e6 <HAL_RCC_OscConfig+0x5e>
 80046c0:	4b8c      	ldr	r3, [pc, #560]	; (80048f4 <HAL_RCC_OscConfig+0x26c>)
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046cc:	d10b      	bne.n	80046e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046ce:	4b89      	ldr	r3, [pc, #548]	; (80048f4 <HAL_RCC_OscConfig+0x26c>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d06c      	beq.n	80047b4 <HAL_RCC_OscConfig+0x12c>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d168      	bne.n	80047b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e246      	b.n	8004b74 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046ee:	d106      	bne.n	80046fe <HAL_RCC_OscConfig+0x76>
 80046f0:	4b80      	ldr	r3, [pc, #512]	; (80048f4 <HAL_RCC_OscConfig+0x26c>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a7f      	ldr	r2, [pc, #508]	; (80048f4 <HAL_RCC_OscConfig+0x26c>)
 80046f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046fa:	6013      	str	r3, [r2, #0]
 80046fc:	e02e      	b.n	800475c <HAL_RCC_OscConfig+0xd4>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10c      	bne.n	8004720 <HAL_RCC_OscConfig+0x98>
 8004706:	4b7b      	ldr	r3, [pc, #492]	; (80048f4 <HAL_RCC_OscConfig+0x26c>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a7a      	ldr	r2, [pc, #488]	; (80048f4 <HAL_RCC_OscConfig+0x26c>)
 800470c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004710:	6013      	str	r3, [r2, #0]
 8004712:	4b78      	ldr	r3, [pc, #480]	; (80048f4 <HAL_RCC_OscConfig+0x26c>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a77      	ldr	r2, [pc, #476]	; (80048f4 <HAL_RCC_OscConfig+0x26c>)
 8004718:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800471c:	6013      	str	r3, [r2, #0]
 800471e:	e01d      	b.n	800475c <HAL_RCC_OscConfig+0xd4>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004728:	d10c      	bne.n	8004744 <HAL_RCC_OscConfig+0xbc>
 800472a:	4b72      	ldr	r3, [pc, #456]	; (80048f4 <HAL_RCC_OscConfig+0x26c>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a71      	ldr	r2, [pc, #452]	; (80048f4 <HAL_RCC_OscConfig+0x26c>)
 8004730:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004734:	6013      	str	r3, [r2, #0]
 8004736:	4b6f      	ldr	r3, [pc, #444]	; (80048f4 <HAL_RCC_OscConfig+0x26c>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a6e      	ldr	r2, [pc, #440]	; (80048f4 <HAL_RCC_OscConfig+0x26c>)
 800473c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004740:	6013      	str	r3, [r2, #0]
 8004742:	e00b      	b.n	800475c <HAL_RCC_OscConfig+0xd4>
 8004744:	4b6b      	ldr	r3, [pc, #428]	; (80048f4 <HAL_RCC_OscConfig+0x26c>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a6a      	ldr	r2, [pc, #424]	; (80048f4 <HAL_RCC_OscConfig+0x26c>)
 800474a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800474e:	6013      	str	r3, [r2, #0]
 8004750:	4b68      	ldr	r3, [pc, #416]	; (80048f4 <HAL_RCC_OscConfig+0x26c>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a67      	ldr	r2, [pc, #412]	; (80048f4 <HAL_RCC_OscConfig+0x26c>)
 8004756:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800475a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d013      	beq.n	800478c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004764:	f7fd f8d6 	bl	8001914 <HAL_GetTick>
 8004768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800476a:	e008      	b.n	800477e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800476c:	f7fd f8d2 	bl	8001914 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b64      	cmp	r3, #100	; 0x64
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e1fa      	b.n	8004b74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800477e:	4b5d      	ldr	r3, [pc, #372]	; (80048f4 <HAL_RCC_OscConfig+0x26c>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d0f0      	beq.n	800476c <HAL_RCC_OscConfig+0xe4>
 800478a:	e014      	b.n	80047b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800478c:	f7fd f8c2 	bl	8001914 <HAL_GetTick>
 8004790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004792:	e008      	b.n	80047a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004794:	f7fd f8be 	bl	8001914 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b64      	cmp	r3, #100	; 0x64
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e1e6      	b.n	8004b74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047a6:	4b53      	ldr	r3, [pc, #332]	; (80048f4 <HAL_RCC_OscConfig+0x26c>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1f0      	bne.n	8004794 <HAL_RCC_OscConfig+0x10c>
 80047b2:	e000      	b.n	80047b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0302 	and.w	r3, r3, #2
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d063      	beq.n	800488a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80047c2:	4b4c      	ldr	r3, [pc, #304]	; (80048f4 <HAL_RCC_OscConfig+0x26c>)
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f003 030c 	and.w	r3, r3, #12
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00b      	beq.n	80047e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80047ce:	4b49      	ldr	r3, [pc, #292]	; (80048f4 <HAL_RCC_OscConfig+0x26c>)
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f003 030c 	and.w	r3, r3, #12
 80047d6:	2b08      	cmp	r3, #8
 80047d8:	d11c      	bne.n	8004814 <HAL_RCC_OscConfig+0x18c>
 80047da:	4b46      	ldr	r3, [pc, #280]	; (80048f4 <HAL_RCC_OscConfig+0x26c>)
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d116      	bne.n	8004814 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047e6:	4b43      	ldr	r3, [pc, #268]	; (80048f4 <HAL_RCC_OscConfig+0x26c>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d005      	beq.n	80047fe <HAL_RCC_OscConfig+0x176>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d001      	beq.n	80047fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e1ba      	b.n	8004b74 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047fe:	4b3d      	ldr	r3, [pc, #244]	; (80048f4 <HAL_RCC_OscConfig+0x26c>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	00db      	lsls	r3, r3, #3
 800480c:	4939      	ldr	r1, [pc, #228]	; (80048f4 <HAL_RCC_OscConfig+0x26c>)
 800480e:	4313      	orrs	r3, r2
 8004810:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004812:	e03a      	b.n	800488a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d020      	beq.n	800485e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800481c:	4b36      	ldr	r3, [pc, #216]	; (80048f8 <HAL_RCC_OscConfig+0x270>)
 800481e:	2201      	movs	r2, #1
 8004820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004822:	f7fd f877 	bl	8001914 <HAL_GetTick>
 8004826:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004828:	e008      	b.n	800483c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800482a:	f7fd f873 	bl	8001914 <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	2b02      	cmp	r3, #2
 8004836:	d901      	bls.n	800483c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e19b      	b.n	8004b74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800483c:	4b2d      	ldr	r3, [pc, #180]	; (80048f4 <HAL_RCC_OscConfig+0x26c>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	2b00      	cmp	r3, #0
 8004846:	d0f0      	beq.n	800482a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004848:	4b2a      	ldr	r3, [pc, #168]	; (80048f4 <HAL_RCC_OscConfig+0x26c>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	695b      	ldr	r3, [r3, #20]
 8004854:	00db      	lsls	r3, r3, #3
 8004856:	4927      	ldr	r1, [pc, #156]	; (80048f4 <HAL_RCC_OscConfig+0x26c>)
 8004858:	4313      	orrs	r3, r2
 800485a:	600b      	str	r3, [r1, #0]
 800485c:	e015      	b.n	800488a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800485e:	4b26      	ldr	r3, [pc, #152]	; (80048f8 <HAL_RCC_OscConfig+0x270>)
 8004860:	2200      	movs	r2, #0
 8004862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004864:	f7fd f856 	bl	8001914 <HAL_GetTick>
 8004868:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800486a:	e008      	b.n	800487e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800486c:	f7fd f852 	bl	8001914 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b02      	cmp	r3, #2
 8004878:	d901      	bls.n	800487e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e17a      	b.n	8004b74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800487e:	4b1d      	ldr	r3, [pc, #116]	; (80048f4 <HAL_RCC_OscConfig+0x26c>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1f0      	bne.n	800486c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0308 	and.w	r3, r3, #8
 8004892:	2b00      	cmp	r3, #0
 8004894:	d03a      	beq.n	800490c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d019      	beq.n	80048d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800489e:	4b17      	ldr	r3, [pc, #92]	; (80048fc <HAL_RCC_OscConfig+0x274>)
 80048a0:	2201      	movs	r2, #1
 80048a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048a4:	f7fd f836 	bl	8001914 <HAL_GetTick>
 80048a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048aa:	e008      	b.n	80048be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048ac:	f7fd f832 	bl	8001914 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e15a      	b.n	8004b74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048be:	4b0d      	ldr	r3, [pc, #52]	; (80048f4 <HAL_RCC_OscConfig+0x26c>)
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d0f0      	beq.n	80048ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80048ca:	2001      	movs	r0, #1
 80048cc:	f000 facc 	bl	8004e68 <RCC_Delay>
 80048d0:	e01c      	b.n	800490c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048d2:	4b0a      	ldr	r3, [pc, #40]	; (80048fc <HAL_RCC_OscConfig+0x274>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048d8:	f7fd f81c 	bl	8001914 <HAL_GetTick>
 80048dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048de:	e00f      	b.n	8004900 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048e0:	f7fd f818 	bl	8001914 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d908      	bls.n	8004900 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e140      	b.n	8004b74 <HAL_RCC_OscConfig+0x4ec>
 80048f2:	bf00      	nop
 80048f4:	40021000 	.word	0x40021000
 80048f8:	42420000 	.word	0x42420000
 80048fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004900:	4b9e      	ldr	r3, [pc, #632]	; (8004b7c <HAL_RCC_OscConfig+0x4f4>)
 8004902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004904:	f003 0302 	and.w	r3, r3, #2
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1e9      	bne.n	80048e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0304 	and.w	r3, r3, #4
 8004914:	2b00      	cmp	r3, #0
 8004916:	f000 80a6 	beq.w	8004a66 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800491a:	2300      	movs	r3, #0
 800491c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800491e:	4b97      	ldr	r3, [pc, #604]	; (8004b7c <HAL_RCC_OscConfig+0x4f4>)
 8004920:	69db      	ldr	r3, [r3, #28]
 8004922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10d      	bne.n	8004946 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800492a:	4b94      	ldr	r3, [pc, #592]	; (8004b7c <HAL_RCC_OscConfig+0x4f4>)
 800492c:	69db      	ldr	r3, [r3, #28]
 800492e:	4a93      	ldr	r2, [pc, #588]	; (8004b7c <HAL_RCC_OscConfig+0x4f4>)
 8004930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004934:	61d3      	str	r3, [r2, #28]
 8004936:	4b91      	ldr	r3, [pc, #580]	; (8004b7c <HAL_RCC_OscConfig+0x4f4>)
 8004938:	69db      	ldr	r3, [r3, #28]
 800493a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800493e:	60bb      	str	r3, [r7, #8]
 8004940:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004942:	2301      	movs	r3, #1
 8004944:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004946:	4b8e      	ldr	r3, [pc, #568]	; (8004b80 <HAL_RCC_OscConfig+0x4f8>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800494e:	2b00      	cmp	r3, #0
 8004950:	d118      	bne.n	8004984 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004952:	4b8b      	ldr	r3, [pc, #556]	; (8004b80 <HAL_RCC_OscConfig+0x4f8>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a8a      	ldr	r2, [pc, #552]	; (8004b80 <HAL_RCC_OscConfig+0x4f8>)
 8004958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800495c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800495e:	f7fc ffd9 	bl	8001914 <HAL_GetTick>
 8004962:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004964:	e008      	b.n	8004978 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004966:	f7fc ffd5 	bl	8001914 <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	2b64      	cmp	r3, #100	; 0x64
 8004972:	d901      	bls.n	8004978 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e0fd      	b.n	8004b74 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004978:	4b81      	ldr	r3, [pc, #516]	; (8004b80 <HAL_RCC_OscConfig+0x4f8>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004980:	2b00      	cmp	r3, #0
 8004982:	d0f0      	beq.n	8004966 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d106      	bne.n	800499a <HAL_RCC_OscConfig+0x312>
 800498c:	4b7b      	ldr	r3, [pc, #492]	; (8004b7c <HAL_RCC_OscConfig+0x4f4>)
 800498e:	6a1b      	ldr	r3, [r3, #32]
 8004990:	4a7a      	ldr	r2, [pc, #488]	; (8004b7c <HAL_RCC_OscConfig+0x4f4>)
 8004992:	f043 0301 	orr.w	r3, r3, #1
 8004996:	6213      	str	r3, [r2, #32]
 8004998:	e02d      	b.n	80049f6 <HAL_RCC_OscConfig+0x36e>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10c      	bne.n	80049bc <HAL_RCC_OscConfig+0x334>
 80049a2:	4b76      	ldr	r3, [pc, #472]	; (8004b7c <HAL_RCC_OscConfig+0x4f4>)
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	4a75      	ldr	r2, [pc, #468]	; (8004b7c <HAL_RCC_OscConfig+0x4f4>)
 80049a8:	f023 0301 	bic.w	r3, r3, #1
 80049ac:	6213      	str	r3, [r2, #32]
 80049ae:	4b73      	ldr	r3, [pc, #460]	; (8004b7c <HAL_RCC_OscConfig+0x4f4>)
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	4a72      	ldr	r2, [pc, #456]	; (8004b7c <HAL_RCC_OscConfig+0x4f4>)
 80049b4:	f023 0304 	bic.w	r3, r3, #4
 80049b8:	6213      	str	r3, [r2, #32]
 80049ba:	e01c      	b.n	80049f6 <HAL_RCC_OscConfig+0x36e>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	2b05      	cmp	r3, #5
 80049c2:	d10c      	bne.n	80049de <HAL_RCC_OscConfig+0x356>
 80049c4:	4b6d      	ldr	r3, [pc, #436]	; (8004b7c <HAL_RCC_OscConfig+0x4f4>)
 80049c6:	6a1b      	ldr	r3, [r3, #32]
 80049c8:	4a6c      	ldr	r2, [pc, #432]	; (8004b7c <HAL_RCC_OscConfig+0x4f4>)
 80049ca:	f043 0304 	orr.w	r3, r3, #4
 80049ce:	6213      	str	r3, [r2, #32]
 80049d0:	4b6a      	ldr	r3, [pc, #424]	; (8004b7c <HAL_RCC_OscConfig+0x4f4>)
 80049d2:	6a1b      	ldr	r3, [r3, #32]
 80049d4:	4a69      	ldr	r2, [pc, #420]	; (8004b7c <HAL_RCC_OscConfig+0x4f4>)
 80049d6:	f043 0301 	orr.w	r3, r3, #1
 80049da:	6213      	str	r3, [r2, #32]
 80049dc:	e00b      	b.n	80049f6 <HAL_RCC_OscConfig+0x36e>
 80049de:	4b67      	ldr	r3, [pc, #412]	; (8004b7c <HAL_RCC_OscConfig+0x4f4>)
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	4a66      	ldr	r2, [pc, #408]	; (8004b7c <HAL_RCC_OscConfig+0x4f4>)
 80049e4:	f023 0301 	bic.w	r3, r3, #1
 80049e8:	6213      	str	r3, [r2, #32]
 80049ea:	4b64      	ldr	r3, [pc, #400]	; (8004b7c <HAL_RCC_OscConfig+0x4f4>)
 80049ec:	6a1b      	ldr	r3, [r3, #32]
 80049ee:	4a63      	ldr	r2, [pc, #396]	; (8004b7c <HAL_RCC_OscConfig+0x4f4>)
 80049f0:	f023 0304 	bic.w	r3, r3, #4
 80049f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d015      	beq.n	8004a2a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049fe:	f7fc ff89 	bl	8001914 <HAL_GetTick>
 8004a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a04:	e00a      	b.n	8004a1c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a06:	f7fc ff85 	bl	8001914 <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d901      	bls.n	8004a1c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e0ab      	b.n	8004b74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a1c:	4b57      	ldr	r3, [pc, #348]	; (8004b7c <HAL_RCC_OscConfig+0x4f4>)
 8004a1e:	6a1b      	ldr	r3, [r3, #32]
 8004a20:	f003 0302 	and.w	r3, r3, #2
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d0ee      	beq.n	8004a06 <HAL_RCC_OscConfig+0x37e>
 8004a28:	e014      	b.n	8004a54 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a2a:	f7fc ff73 	bl	8001914 <HAL_GetTick>
 8004a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a30:	e00a      	b.n	8004a48 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a32:	f7fc ff6f 	bl	8001914 <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d901      	bls.n	8004a48 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e095      	b.n	8004b74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a48:	4b4c      	ldr	r3, [pc, #304]	; (8004b7c <HAL_RCC_OscConfig+0x4f4>)
 8004a4a:	6a1b      	ldr	r3, [r3, #32]
 8004a4c:	f003 0302 	and.w	r3, r3, #2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1ee      	bne.n	8004a32 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004a54:	7dfb      	ldrb	r3, [r7, #23]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d105      	bne.n	8004a66 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a5a:	4b48      	ldr	r3, [pc, #288]	; (8004b7c <HAL_RCC_OscConfig+0x4f4>)
 8004a5c:	69db      	ldr	r3, [r3, #28]
 8004a5e:	4a47      	ldr	r2, [pc, #284]	; (8004b7c <HAL_RCC_OscConfig+0x4f4>)
 8004a60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a64:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	69db      	ldr	r3, [r3, #28]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f000 8081 	beq.w	8004b72 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a70:	4b42      	ldr	r3, [pc, #264]	; (8004b7c <HAL_RCC_OscConfig+0x4f4>)
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f003 030c 	and.w	r3, r3, #12
 8004a78:	2b08      	cmp	r3, #8
 8004a7a:	d061      	beq.n	8004b40 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	69db      	ldr	r3, [r3, #28]
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d146      	bne.n	8004b12 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a84:	4b3f      	ldr	r3, [pc, #252]	; (8004b84 <HAL_RCC_OscConfig+0x4fc>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a8a:	f7fc ff43 	bl	8001914 <HAL_GetTick>
 8004a8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a90:	e008      	b.n	8004aa4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a92:	f7fc ff3f 	bl	8001914 <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d901      	bls.n	8004aa4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e067      	b.n	8004b74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004aa4:	4b35      	ldr	r3, [pc, #212]	; (8004b7c <HAL_RCC_OscConfig+0x4f4>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1f0      	bne.n	8004a92 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ab8:	d108      	bne.n	8004acc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004aba:	4b30      	ldr	r3, [pc, #192]	; (8004b7c <HAL_RCC_OscConfig+0x4f4>)
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	492d      	ldr	r1, [pc, #180]	; (8004b7c <HAL_RCC_OscConfig+0x4f4>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004acc:	4b2b      	ldr	r3, [pc, #172]	; (8004b7c <HAL_RCC_OscConfig+0x4f4>)
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a19      	ldr	r1, [r3, #32]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004adc:	430b      	orrs	r3, r1
 8004ade:	4927      	ldr	r1, [pc, #156]	; (8004b7c <HAL_RCC_OscConfig+0x4f4>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ae4:	4b27      	ldr	r3, [pc, #156]	; (8004b84 <HAL_RCC_OscConfig+0x4fc>)
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aea:	f7fc ff13 	bl	8001914 <HAL_GetTick>
 8004aee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004af0:	e008      	b.n	8004b04 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004af2:	f7fc ff0f 	bl	8001914 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d901      	bls.n	8004b04 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e037      	b.n	8004b74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b04:	4b1d      	ldr	r3, [pc, #116]	; (8004b7c <HAL_RCC_OscConfig+0x4f4>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d0f0      	beq.n	8004af2 <HAL_RCC_OscConfig+0x46a>
 8004b10:	e02f      	b.n	8004b72 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b12:	4b1c      	ldr	r3, [pc, #112]	; (8004b84 <HAL_RCC_OscConfig+0x4fc>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b18:	f7fc fefc 	bl	8001914 <HAL_GetTick>
 8004b1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b1e:	e008      	b.n	8004b32 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b20:	f7fc fef8 	bl	8001914 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e020      	b.n	8004b74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b32:	4b12      	ldr	r3, [pc, #72]	; (8004b7c <HAL_RCC_OscConfig+0x4f4>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1f0      	bne.n	8004b20 <HAL_RCC_OscConfig+0x498>
 8004b3e:	e018      	b.n	8004b72 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	69db      	ldr	r3, [r3, #28]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d101      	bne.n	8004b4c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e013      	b.n	8004b74 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004b4c:	4b0b      	ldr	r3, [pc, #44]	; (8004b7c <HAL_RCC_OscConfig+0x4f4>)
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a1b      	ldr	r3, [r3, #32]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d106      	bne.n	8004b6e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d001      	beq.n	8004b72 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e000      	b.n	8004b74 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3718      	adds	r7, #24
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	40021000 	.word	0x40021000
 8004b80:	40007000 	.word	0x40007000
 8004b84:	42420060 	.word	0x42420060

08004b88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d101      	bne.n	8004b9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e0d0      	b.n	8004d3e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b9c:	4b6a      	ldr	r3, [pc, #424]	; (8004d48 <HAL_RCC_ClockConfig+0x1c0>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0307 	and.w	r3, r3, #7
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d910      	bls.n	8004bcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004baa:	4b67      	ldr	r3, [pc, #412]	; (8004d48 <HAL_RCC_ClockConfig+0x1c0>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f023 0207 	bic.w	r2, r3, #7
 8004bb2:	4965      	ldr	r1, [pc, #404]	; (8004d48 <HAL_RCC_ClockConfig+0x1c0>)
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bba:	4b63      	ldr	r3, [pc, #396]	; (8004d48 <HAL_RCC_ClockConfig+0x1c0>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0307 	and.w	r3, r3, #7
 8004bc2:	683a      	ldr	r2, [r7, #0]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d001      	beq.n	8004bcc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e0b8      	b.n	8004d3e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0302 	and.w	r3, r3, #2
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d020      	beq.n	8004c1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0304 	and.w	r3, r3, #4
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d005      	beq.n	8004bf0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004be4:	4b59      	ldr	r3, [pc, #356]	; (8004d4c <HAL_RCC_ClockConfig+0x1c4>)
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	4a58      	ldr	r2, [pc, #352]	; (8004d4c <HAL_RCC_ClockConfig+0x1c4>)
 8004bea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004bee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0308 	and.w	r3, r3, #8
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d005      	beq.n	8004c08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bfc:	4b53      	ldr	r3, [pc, #332]	; (8004d4c <HAL_RCC_ClockConfig+0x1c4>)
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	4a52      	ldr	r2, [pc, #328]	; (8004d4c <HAL_RCC_ClockConfig+0x1c4>)
 8004c02:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004c06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c08:	4b50      	ldr	r3, [pc, #320]	; (8004d4c <HAL_RCC_ClockConfig+0x1c4>)
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	494d      	ldr	r1, [pc, #308]	; (8004d4c <HAL_RCC_ClockConfig+0x1c4>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d040      	beq.n	8004ca8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d107      	bne.n	8004c3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c2e:	4b47      	ldr	r3, [pc, #284]	; (8004d4c <HAL_RCC_ClockConfig+0x1c4>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d115      	bne.n	8004c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e07f      	b.n	8004d3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d107      	bne.n	8004c56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c46:	4b41      	ldr	r3, [pc, #260]	; (8004d4c <HAL_RCC_ClockConfig+0x1c4>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d109      	bne.n	8004c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e073      	b.n	8004d3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c56:	4b3d      	ldr	r3, [pc, #244]	; (8004d4c <HAL_RCC_ClockConfig+0x1c4>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d101      	bne.n	8004c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e06b      	b.n	8004d3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c66:	4b39      	ldr	r3, [pc, #228]	; (8004d4c <HAL_RCC_ClockConfig+0x1c4>)
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f023 0203 	bic.w	r2, r3, #3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	4936      	ldr	r1, [pc, #216]	; (8004d4c <HAL_RCC_ClockConfig+0x1c4>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c78:	f7fc fe4c 	bl	8001914 <HAL_GetTick>
 8004c7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c7e:	e00a      	b.n	8004c96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c80:	f7fc fe48 	bl	8001914 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d901      	bls.n	8004c96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e053      	b.n	8004d3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c96:	4b2d      	ldr	r3, [pc, #180]	; (8004d4c <HAL_RCC_ClockConfig+0x1c4>)
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f003 020c 	and.w	r2, r3, #12
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d1eb      	bne.n	8004c80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ca8:	4b27      	ldr	r3, [pc, #156]	; (8004d48 <HAL_RCC_ClockConfig+0x1c0>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0307 	and.w	r3, r3, #7
 8004cb0:	683a      	ldr	r2, [r7, #0]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d210      	bcs.n	8004cd8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cb6:	4b24      	ldr	r3, [pc, #144]	; (8004d48 <HAL_RCC_ClockConfig+0x1c0>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f023 0207 	bic.w	r2, r3, #7
 8004cbe:	4922      	ldr	r1, [pc, #136]	; (8004d48 <HAL_RCC_ClockConfig+0x1c0>)
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cc6:	4b20      	ldr	r3, [pc, #128]	; (8004d48 <HAL_RCC_ClockConfig+0x1c0>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0307 	and.w	r3, r3, #7
 8004cce:	683a      	ldr	r2, [r7, #0]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d001      	beq.n	8004cd8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e032      	b.n	8004d3e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0304 	and.w	r3, r3, #4
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d008      	beq.n	8004cf6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ce4:	4b19      	ldr	r3, [pc, #100]	; (8004d4c <HAL_RCC_ClockConfig+0x1c4>)
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	4916      	ldr	r1, [pc, #88]	; (8004d4c <HAL_RCC_ClockConfig+0x1c4>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0308 	and.w	r3, r3, #8
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d009      	beq.n	8004d16 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d02:	4b12      	ldr	r3, [pc, #72]	; (8004d4c <HAL_RCC_ClockConfig+0x1c4>)
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	00db      	lsls	r3, r3, #3
 8004d10:	490e      	ldr	r1, [pc, #56]	; (8004d4c <HAL_RCC_ClockConfig+0x1c4>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d16:	f000 f821 	bl	8004d5c <HAL_RCC_GetSysClockFreq>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	4b0b      	ldr	r3, [pc, #44]	; (8004d4c <HAL_RCC_ClockConfig+0x1c4>)
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	091b      	lsrs	r3, r3, #4
 8004d22:	f003 030f 	and.w	r3, r3, #15
 8004d26:	490a      	ldr	r1, [pc, #40]	; (8004d50 <HAL_RCC_ClockConfig+0x1c8>)
 8004d28:	5ccb      	ldrb	r3, [r1, r3]
 8004d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d2e:	4a09      	ldr	r2, [pc, #36]	; (8004d54 <HAL_RCC_ClockConfig+0x1cc>)
 8004d30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004d32:	4b09      	ldr	r3, [pc, #36]	; (8004d58 <HAL_RCC_ClockConfig+0x1d0>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7fc fdaa 	bl	8001890 <HAL_InitTick>

  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	40022000 	.word	0x40022000
 8004d4c:	40021000 	.word	0x40021000
 8004d50:	08006158 	.word	0x08006158
 8004d54:	20000054 	.word	0x20000054
 8004d58:	20000058 	.word	0x20000058

08004d5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b087      	sub	sp, #28
 8004d60:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004d62:	2300      	movs	r3, #0
 8004d64:	60fb      	str	r3, [r7, #12]
 8004d66:	2300      	movs	r3, #0
 8004d68:	60bb      	str	r3, [r7, #8]
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	617b      	str	r3, [r7, #20]
 8004d6e:	2300      	movs	r3, #0
 8004d70:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004d72:	2300      	movs	r3, #0
 8004d74:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004d76:	4b1e      	ldr	r3, [pc, #120]	; (8004df0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f003 030c 	and.w	r3, r3, #12
 8004d82:	2b04      	cmp	r3, #4
 8004d84:	d002      	beq.n	8004d8c <HAL_RCC_GetSysClockFreq+0x30>
 8004d86:	2b08      	cmp	r3, #8
 8004d88:	d003      	beq.n	8004d92 <HAL_RCC_GetSysClockFreq+0x36>
 8004d8a:	e027      	b.n	8004ddc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d8c:	4b19      	ldr	r3, [pc, #100]	; (8004df4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004d8e:	613b      	str	r3, [r7, #16]
      break;
 8004d90:	e027      	b.n	8004de2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	0c9b      	lsrs	r3, r3, #18
 8004d96:	f003 030f 	and.w	r3, r3, #15
 8004d9a:	4a17      	ldr	r2, [pc, #92]	; (8004df8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004d9c:	5cd3      	ldrb	r3, [r2, r3]
 8004d9e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d010      	beq.n	8004dcc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004daa:	4b11      	ldr	r3, [pc, #68]	; (8004df0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	0c5b      	lsrs	r3, r3, #17
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	4a11      	ldr	r2, [pc, #68]	; (8004dfc <HAL_RCC_GetSysClockFreq+0xa0>)
 8004db6:	5cd3      	ldrb	r3, [r2, r3]
 8004db8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a0d      	ldr	r2, [pc, #52]	; (8004df4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004dbe:	fb02 f203 	mul.w	r2, r2, r3
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc8:	617b      	str	r3, [r7, #20]
 8004dca:	e004      	b.n	8004dd6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a0c      	ldr	r2, [pc, #48]	; (8004e00 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004dd0:	fb02 f303 	mul.w	r3, r2, r3
 8004dd4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	613b      	str	r3, [r7, #16]
      break;
 8004dda:	e002      	b.n	8004de2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004ddc:	4b05      	ldr	r3, [pc, #20]	; (8004df4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004dde:	613b      	str	r3, [r7, #16]
      break;
 8004de0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004de2:	693b      	ldr	r3, [r7, #16]
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	371c      	adds	r7, #28
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bc80      	pop	{r7}
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	40021000 	.word	0x40021000
 8004df4:	007a1200 	.word	0x007a1200
 8004df8:	08006170 	.word	0x08006170
 8004dfc:	08006180 	.word	0x08006180
 8004e00:	003d0900 	.word	0x003d0900

08004e04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e04:	b480      	push	{r7}
 8004e06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e08:	4b02      	ldr	r3, [pc, #8]	; (8004e14 <HAL_RCC_GetHCLKFreq+0x10>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bc80      	pop	{r7}
 8004e12:	4770      	bx	lr
 8004e14:	20000054 	.word	0x20000054

08004e18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e1c:	f7ff fff2 	bl	8004e04 <HAL_RCC_GetHCLKFreq>
 8004e20:	4602      	mov	r2, r0
 8004e22:	4b05      	ldr	r3, [pc, #20]	; (8004e38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	0a1b      	lsrs	r3, r3, #8
 8004e28:	f003 0307 	and.w	r3, r3, #7
 8004e2c:	4903      	ldr	r1, [pc, #12]	; (8004e3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e2e:	5ccb      	ldrb	r3, [r1, r3]
 8004e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	40021000 	.word	0x40021000
 8004e3c:	08006168 	.word	0x08006168

08004e40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e44:	f7ff ffde 	bl	8004e04 <HAL_RCC_GetHCLKFreq>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	4b05      	ldr	r3, [pc, #20]	; (8004e60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	0adb      	lsrs	r3, r3, #11
 8004e50:	f003 0307 	and.w	r3, r3, #7
 8004e54:	4903      	ldr	r1, [pc, #12]	; (8004e64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e56:	5ccb      	ldrb	r3, [r1, r3]
 8004e58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	40021000 	.word	0x40021000
 8004e64:	08006168 	.word	0x08006168

08004e68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004e70:	4b0a      	ldr	r3, [pc, #40]	; (8004e9c <RCC_Delay+0x34>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a0a      	ldr	r2, [pc, #40]	; (8004ea0 <RCC_Delay+0x38>)
 8004e76:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7a:	0a5b      	lsrs	r3, r3, #9
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	fb02 f303 	mul.w	r3, r2, r3
 8004e82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004e84:	bf00      	nop
  }
  while (Delay --);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	1e5a      	subs	r2, r3, #1
 8004e8a:	60fa      	str	r2, [r7, #12]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d1f9      	bne.n	8004e84 <RCC_Delay+0x1c>
}
 8004e90:	bf00      	nop
 8004e92:	bf00      	nop
 8004e94:	3714      	adds	r7, #20
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bc80      	pop	{r7}
 8004e9a:	4770      	bx	lr
 8004e9c:	20000054 	.word	0x20000054
 8004ea0:	10624dd3 	.word	0x10624dd3

08004ea4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d101      	bne.n	8004eb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e041      	b.n	8004f3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d106      	bne.n	8004ed0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f7fc fa18 	bl	8001300 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	3304      	adds	r3, #4
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	4610      	mov	r0, r2
 8004ee4:	f000 fa5c 	bl	80053a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3708      	adds	r7, #8
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
	...

08004f44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d001      	beq.n	8004f5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e03a      	b.n	8004fd2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2202      	movs	r2, #2
 8004f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68da      	ldr	r2, [r3, #12]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f042 0201 	orr.w	r2, r2, #1
 8004f72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a18      	ldr	r2, [pc, #96]	; (8004fdc <HAL_TIM_Base_Start_IT+0x98>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d00e      	beq.n	8004f9c <HAL_TIM_Base_Start_IT+0x58>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f86:	d009      	beq.n	8004f9c <HAL_TIM_Base_Start_IT+0x58>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a14      	ldr	r2, [pc, #80]	; (8004fe0 <HAL_TIM_Base_Start_IT+0x9c>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d004      	beq.n	8004f9c <HAL_TIM_Base_Start_IT+0x58>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a13      	ldr	r2, [pc, #76]	; (8004fe4 <HAL_TIM_Base_Start_IT+0xa0>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d111      	bne.n	8004fc0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f003 0307 	and.w	r3, r3, #7
 8004fa6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2b06      	cmp	r3, #6
 8004fac:	d010      	beq.n	8004fd0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f042 0201 	orr.w	r2, r2, #1
 8004fbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fbe:	e007      	b.n	8004fd0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f042 0201 	orr.w	r2, r2, #1
 8004fce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3714      	adds	r7, #20
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bc80      	pop	{r7}
 8004fda:	4770      	bx	lr
 8004fdc:	40012c00 	.word	0x40012c00
 8004fe0:	40000400 	.word	0x40000400
 8004fe4:	40000800 	.word	0x40000800

08004fe8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b00      	cmp	r3, #0
 8005008:	d020      	beq.n	800504c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f003 0302 	and.w	r3, r3, #2
 8005010:	2b00      	cmp	r3, #0
 8005012:	d01b      	beq.n	800504c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f06f 0202 	mvn.w	r2, #2
 800501c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2201      	movs	r2, #1
 8005022:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	f003 0303 	and.w	r3, r3, #3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d003      	beq.n	800503a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f998 	bl	8005368 <HAL_TIM_IC_CaptureCallback>
 8005038:	e005      	b.n	8005046 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f98b 	bl	8005356 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 f99a 	bl	800537a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	f003 0304 	and.w	r3, r3, #4
 8005052:	2b00      	cmp	r3, #0
 8005054:	d020      	beq.n	8005098 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f003 0304 	and.w	r3, r3, #4
 800505c:	2b00      	cmp	r3, #0
 800505e:	d01b      	beq.n	8005098 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f06f 0204 	mvn.w	r2, #4
 8005068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2202      	movs	r2, #2
 800506e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800507a:	2b00      	cmp	r3, #0
 800507c:	d003      	beq.n	8005086 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 f972 	bl	8005368 <HAL_TIM_IC_CaptureCallback>
 8005084:	e005      	b.n	8005092 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 f965 	bl	8005356 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 f974 	bl	800537a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	f003 0308 	and.w	r3, r3, #8
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d020      	beq.n	80050e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f003 0308 	and.w	r3, r3, #8
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d01b      	beq.n	80050e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f06f 0208 	mvn.w	r2, #8
 80050b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2204      	movs	r2, #4
 80050ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	69db      	ldr	r3, [r3, #28]
 80050c2:	f003 0303 	and.w	r3, r3, #3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d003      	beq.n	80050d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 f94c 	bl	8005368 <HAL_TIM_IC_CaptureCallback>
 80050d0:	e005      	b.n	80050de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 f93f 	bl	8005356 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 f94e 	bl	800537a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	f003 0310 	and.w	r3, r3, #16
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d020      	beq.n	8005130 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f003 0310 	and.w	r3, r3, #16
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d01b      	beq.n	8005130 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f06f 0210 	mvn.w	r2, #16
 8005100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2208      	movs	r2, #8
 8005106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	69db      	ldr	r3, [r3, #28]
 800510e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005112:	2b00      	cmp	r3, #0
 8005114:	d003      	beq.n	800511e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 f926 	bl	8005368 <HAL_TIM_IC_CaptureCallback>
 800511c:	e005      	b.n	800512a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f919 	bl	8005356 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 f928 	bl	800537a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	f003 0301 	and.w	r3, r3, #1
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00c      	beq.n	8005154 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f003 0301 	and.w	r3, r3, #1
 8005140:	2b00      	cmp	r3, #0
 8005142:	d007      	beq.n	8005154 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f06f 0201 	mvn.w	r2, #1
 800514c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f7fb fe68 	bl	8000e24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00c      	beq.n	8005178 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005164:	2b00      	cmp	r3, #0
 8005166:	d007      	beq.n	8005178 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 fa7f 	bl	8005676 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00c      	beq.n	800519c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005188:	2b00      	cmp	r3, #0
 800518a:	d007      	beq.n	800519c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 f8f8 	bl	800538c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	f003 0320 	and.w	r3, r3, #32
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00c      	beq.n	80051c0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f003 0320 	and.w	r3, r3, #32
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d007      	beq.n	80051c0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f06f 0220 	mvn.w	r2, #32
 80051b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 fa52 	bl	8005664 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051c0:	bf00      	nop
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051d2:	2300      	movs	r3, #0
 80051d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d101      	bne.n	80051e4 <HAL_TIM_ConfigClockSource+0x1c>
 80051e0:	2302      	movs	r3, #2
 80051e2:	e0b4      	b.n	800534e <HAL_TIM_ConfigClockSource+0x186>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2202      	movs	r2, #2
 80051f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005202:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800520a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800521c:	d03e      	beq.n	800529c <HAL_TIM_ConfigClockSource+0xd4>
 800521e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005222:	f200 8087 	bhi.w	8005334 <HAL_TIM_ConfigClockSource+0x16c>
 8005226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800522a:	f000 8086 	beq.w	800533a <HAL_TIM_ConfigClockSource+0x172>
 800522e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005232:	d87f      	bhi.n	8005334 <HAL_TIM_ConfigClockSource+0x16c>
 8005234:	2b70      	cmp	r3, #112	; 0x70
 8005236:	d01a      	beq.n	800526e <HAL_TIM_ConfigClockSource+0xa6>
 8005238:	2b70      	cmp	r3, #112	; 0x70
 800523a:	d87b      	bhi.n	8005334 <HAL_TIM_ConfigClockSource+0x16c>
 800523c:	2b60      	cmp	r3, #96	; 0x60
 800523e:	d050      	beq.n	80052e2 <HAL_TIM_ConfigClockSource+0x11a>
 8005240:	2b60      	cmp	r3, #96	; 0x60
 8005242:	d877      	bhi.n	8005334 <HAL_TIM_ConfigClockSource+0x16c>
 8005244:	2b50      	cmp	r3, #80	; 0x50
 8005246:	d03c      	beq.n	80052c2 <HAL_TIM_ConfigClockSource+0xfa>
 8005248:	2b50      	cmp	r3, #80	; 0x50
 800524a:	d873      	bhi.n	8005334 <HAL_TIM_ConfigClockSource+0x16c>
 800524c:	2b40      	cmp	r3, #64	; 0x40
 800524e:	d058      	beq.n	8005302 <HAL_TIM_ConfigClockSource+0x13a>
 8005250:	2b40      	cmp	r3, #64	; 0x40
 8005252:	d86f      	bhi.n	8005334 <HAL_TIM_ConfigClockSource+0x16c>
 8005254:	2b30      	cmp	r3, #48	; 0x30
 8005256:	d064      	beq.n	8005322 <HAL_TIM_ConfigClockSource+0x15a>
 8005258:	2b30      	cmp	r3, #48	; 0x30
 800525a:	d86b      	bhi.n	8005334 <HAL_TIM_ConfigClockSource+0x16c>
 800525c:	2b20      	cmp	r3, #32
 800525e:	d060      	beq.n	8005322 <HAL_TIM_ConfigClockSource+0x15a>
 8005260:	2b20      	cmp	r3, #32
 8005262:	d867      	bhi.n	8005334 <HAL_TIM_ConfigClockSource+0x16c>
 8005264:	2b00      	cmp	r3, #0
 8005266:	d05c      	beq.n	8005322 <HAL_TIM_ConfigClockSource+0x15a>
 8005268:	2b10      	cmp	r3, #16
 800526a:	d05a      	beq.n	8005322 <HAL_TIM_ConfigClockSource+0x15a>
 800526c:	e062      	b.n	8005334 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6818      	ldr	r0, [r3, #0]
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	6899      	ldr	r1, [r3, #8]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	685a      	ldr	r2, [r3, #4]
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	f000 f974 	bl	800556a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005290:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68ba      	ldr	r2, [r7, #8]
 8005298:	609a      	str	r2, [r3, #8]
      break;
 800529a:	e04f      	b.n	800533c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6818      	ldr	r0, [r3, #0]
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	6899      	ldr	r1, [r3, #8]
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	685a      	ldr	r2, [r3, #4]
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	f000 f95d 	bl	800556a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	689a      	ldr	r2, [r3, #8]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052be:	609a      	str	r2, [r3, #8]
      break;
 80052c0:	e03c      	b.n	800533c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6818      	ldr	r0, [r3, #0]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	6859      	ldr	r1, [r3, #4]
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	461a      	mov	r2, r3
 80052d0:	f000 f8d4 	bl	800547c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2150      	movs	r1, #80	; 0x50
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 f92b 	bl	8005536 <TIM_ITRx_SetConfig>
      break;
 80052e0:	e02c      	b.n	800533c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6818      	ldr	r0, [r3, #0]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	6859      	ldr	r1, [r3, #4]
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	461a      	mov	r2, r3
 80052f0:	f000 f8f2 	bl	80054d8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2160      	movs	r1, #96	; 0x60
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 f91b 	bl	8005536 <TIM_ITRx_SetConfig>
      break;
 8005300:	e01c      	b.n	800533c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6818      	ldr	r0, [r3, #0]
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	6859      	ldr	r1, [r3, #4]
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	461a      	mov	r2, r3
 8005310:	f000 f8b4 	bl	800547c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2140      	movs	r1, #64	; 0x40
 800531a:	4618      	mov	r0, r3
 800531c:	f000 f90b 	bl	8005536 <TIM_ITRx_SetConfig>
      break;
 8005320:	e00c      	b.n	800533c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4619      	mov	r1, r3
 800532c:	4610      	mov	r0, r2
 800532e:	f000 f902 	bl	8005536 <TIM_ITRx_SetConfig>
      break;
 8005332:	e003      	b.n	800533c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	73fb      	strb	r3, [r7, #15]
      break;
 8005338:	e000      	b.n	800533c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800533a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800534c:	7bfb      	ldrb	r3, [r7, #15]
}
 800534e:	4618      	mov	r0, r3
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005356:	b480      	push	{r7}
 8005358:	b083      	sub	sp, #12
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800535e:	bf00      	nop
 8005360:	370c      	adds	r7, #12
 8005362:	46bd      	mov	sp, r7
 8005364:	bc80      	pop	{r7}
 8005366:	4770      	bx	lr

08005368 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	bc80      	pop	{r7}
 8005378:	4770      	bx	lr

0800537a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800537a:	b480      	push	{r7}
 800537c:	b083      	sub	sp, #12
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005382:	bf00      	nop
 8005384:	370c      	adds	r7, #12
 8005386:	46bd      	mov	sp, r7
 8005388:	bc80      	pop	{r7}
 800538a:	4770      	bx	lr

0800538c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005394:	bf00      	nop
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	bc80      	pop	{r7}
 800539c:	4770      	bx	lr
	...

080053a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a2f      	ldr	r2, [pc, #188]	; (8005470 <TIM_Base_SetConfig+0xd0>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d00b      	beq.n	80053d0 <TIM_Base_SetConfig+0x30>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053be:	d007      	beq.n	80053d0 <TIM_Base_SetConfig+0x30>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a2c      	ldr	r2, [pc, #176]	; (8005474 <TIM_Base_SetConfig+0xd4>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d003      	beq.n	80053d0 <TIM_Base_SetConfig+0x30>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a2b      	ldr	r2, [pc, #172]	; (8005478 <TIM_Base_SetConfig+0xd8>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d108      	bne.n	80053e2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	4313      	orrs	r3, r2
 80053e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a22      	ldr	r2, [pc, #136]	; (8005470 <TIM_Base_SetConfig+0xd0>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d00b      	beq.n	8005402 <TIM_Base_SetConfig+0x62>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053f0:	d007      	beq.n	8005402 <TIM_Base_SetConfig+0x62>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a1f      	ldr	r2, [pc, #124]	; (8005474 <TIM_Base_SetConfig+0xd4>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d003      	beq.n	8005402 <TIM_Base_SetConfig+0x62>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a1e      	ldr	r2, [pc, #120]	; (8005478 <TIM_Base_SetConfig+0xd8>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d108      	bne.n	8005414 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005408:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	4313      	orrs	r3, r2
 8005412:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	4313      	orrs	r3, r2
 8005420:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	689a      	ldr	r2, [r3, #8]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a0d      	ldr	r2, [pc, #52]	; (8005470 <TIM_Base_SetConfig+0xd0>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d103      	bne.n	8005448 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	691a      	ldr	r2, [r3, #16]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	f003 0301 	and.w	r3, r3, #1
 8005456:	2b00      	cmp	r3, #0
 8005458:	d005      	beq.n	8005466 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	f023 0201 	bic.w	r2, r3, #1
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	611a      	str	r2, [r3, #16]
  }
}
 8005466:	bf00      	nop
 8005468:	3714      	adds	r7, #20
 800546a:	46bd      	mov	sp, r7
 800546c:	bc80      	pop	{r7}
 800546e:	4770      	bx	lr
 8005470:	40012c00 	.word	0x40012c00
 8005474:	40000400 	.word	0x40000400
 8005478:	40000800 	.word	0x40000800

0800547c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800547c:	b480      	push	{r7}
 800547e:	b087      	sub	sp, #28
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6a1b      	ldr	r3, [r3, #32]
 800548c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6a1b      	ldr	r3, [r3, #32]
 8005492:	f023 0201 	bic.w	r2, r3, #1
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	011b      	lsls	r3, r3, #4
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	f023 030a 	bic.w	r3, r3, #10
 80054b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	4313      	orrs	r3, r2
 80054c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	693a      	ldr	r2, [r7, #16]
 80054c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	621a      	str	r2, [r3, #32]
}
 80054ce:	bf00      	nop
 80054d0:	371c      	adds	r7, #28
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bc80      	pop	{r7}
 80054d6:	4770      	bx	lr

080054d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054d8:	b480      	push	{r7}
 80054da:	b087      	sub	sp, #28
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6a1b      	ldr	r3, [r3, #32]
 80054e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	f023 0210 	bic.w	r2, r3, #16
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005502:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	031b      	lsls	r3, r3, #12
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	4313      	orrs	r3, r2
 800550c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005514:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	011b      	lsls	r3, r3, #4
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	4313      	orrs	r3, r2
 800551e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	621a      	str	r2, [r3, #32]
}
 800552c:	bf00      	nop
 800552e:	371c      	adds	r7, #28
 8005530:	46bd      	mov	sp, r7
 8005532:	bc80      	pop	{r7}
 8005534:	4770      	bx	lr

08005536 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005536:	b480      	push	{r7}
 8005538:	b085      	sub	sp, #20
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
 800553e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800554c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800554e:	683a      	ldr	r2, [r7, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	4313      	orrs	r3, r2
 8005554:	f043 0307 	orr.w	r3, r3, #7
 8005558:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	609a      	str	r2, [r3, #8]
}
 8005560:	bf00      	nop
 8005562:	3714      	adds	r7, #20
 8005564:	46bd      	mov	sp, r7
 8005566:	bc80      	pop	{r7}
 8005568:	4770      	bx	lr

0800556a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800556a:	b480      	push	{r7}
 800556c:	b087      	sub	sp, #28
 800556e:	af00      	add	r7, sp, #0
 8005570:	60f8      	str	r0, [r7, #12]
 8005572:	60b9      	str	r1, [r7, #8]
 8005574:	607a      	str	r2, [r7, #4]
 8005576:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005584:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	021a      	lsls	r2, r3, #8
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	431a      	orrs	r2, r3
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	4313      	orrs	r3, r2
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	4313      	orrs	r3, r2
 8005596:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	609a      	str	r2, [r3, #8]
}
 800559e:	bf00      	nop
 80055a0:	371c      	adds	r7, #28
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bc80      	pop	{r7}
 80055a6:	4770      	bx	lr

080055a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d101      	bne.n	80055c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055bc:	2302      	movs	r3, #2
 80055be:	e046      	b.n	800564e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2202      	movs	r2, #2
 80055cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a16      	ldr	r2, [pc, #88]	; (8005658 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d00e      	beq.n	8005622 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800560c:	d009      	beq.n	8005622 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a12      	ldr	r2, [pc, #72]	; (800565c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d004      	beq.n	8005622 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a10      	ldr	r2, [pc, #64]	; (8005660 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d10c      	bne.n	800563c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005628:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	4313      	orrs	r3, r2
 8005632:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68ba      	ldr	r2, [r7, #8]
 800563a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3714      	adds	r7, #20
 8005652:	46bd      	mov	sp, r7
 8005654:	bc80      	pop	{r7}
 8005656:	4770      	bx	lr
 8005658:	40012c00 	.word	0x40012c00
 800565c:	40000400 	.word	0x40000400
 8005660:	40000800 	.word	0x40000800

08005664 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800566c:	bf00      	nop
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	bc80      	pop	{r7}
 8005674:	4770      	bx	lr

08005676 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005676:	b480      	push	{r7}
 8005678:	b083      	sub	sp, #12
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800567e:	bf00      	nop
 8005680:	370c      	adds	r7, #12
 8005682:	46bd      	mov	sp, r7
 8005684:	bc80      	pop	{r7}
 8005686:	4770      	bx	lr

08005688 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d101      	bne.n	800569a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e042      	b.n	8005720 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d106      	bne.n	80056b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f7fb fe4a 	bl	8001348 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2224      	movs	r2, #36	; 0x24
 80056b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68da      	ldr	r2, [r3, #12]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 f82b 	bl	8005728 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	691a      	ldr	r2, [r3, #16]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	695a      	ldr	r2, [r3, #20]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68da      	ldr	r2, [r3, #12]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005700:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2220      	movs	r2, #32
 800570c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2220      	movs	r2, #32
 8005714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3708      	adds	r7, #8
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	68da      	ldr	r2, [r3, #12]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	430a      	orrs	r2, r1
 8005744:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	689a      	ldr	r2, [r3, #8]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	431a      	orrs	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	695b      	ldr	r3, [r3, #20]
 8005754:	4313      	orrs	r3, r2
 8005756:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005762:	f023 030c 	bic.w	r3, r3, #12
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	6812      	ldr	r2, [r2, #0]
 800576a:	68b9      	ldr	r1, [r7, #8]
 800576c:	430b      	orrs	r3, r1
 800576e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	699a      	ldr	r2, [r3, #24]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	430a      	orrs	r2, r1
 8005784:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a2c      	ldr	r2, [pc, #176]	; (800583c <UART_SetConfig+0x114>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d103      	bne.n	8005798 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005790:	f7ff fb56 	bl	8004e40 <HAL_RCC_GetPCLK2Freq>
 8005794:	60f8      	str	r0, [r7, #12]
 8005796:	e002      	b.n	800579e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005798:	f7ff fb3e 	bl	8004e18 <HAL_RCC_GetPCLK1Freq>
 800579c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	4613      	mov	r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	4413      	add	r3, r2
 80057a6:	009a      	lsls	r2, r3, #2
 80057a8:	441a      	add	r2, r3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b4:	4a22      	ldr	r2, [pc, #136]	; (8005840 <UART_SetConfig+0x118>)
 80057b6:	fba2 2303 	umull	r2, r3, r2, r3
 80057ba:	095b      	lsrs	r3, r3, #5
 80057bc:	0119      	lsls	r1, r3, #4
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	4613      	mov	r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	4413      	add	r3, r2
 80057c6:	009a      	lsls	r2, r3, #2
 80057c8:	441a      	add	r2, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80057d4:	4b1a      	ldr	r3, [pc, #104]	; (8005840 <UART_SetConfig+0x118>)
 80057d6:	fba3 0302 	umull	r0, r3, r3, r2
 80057da:	095b      	lsrs	r3, r3, #5
 80057dc:	2064      	movs	r0, #100	; 0x64
 80057de:	fb00 f303 	mul.w	r3, r0, r3
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	011b      	lsls	r3, r3, #4
 80057e6:	3332      	adds	r3, #50	; 0x32
 80057e8:	4a15      	ldr	r2, [pc, #84]	; (8005840 <UART_SetConfig+0x118>)
 80057ea:	fba2 2303 	umull	r2, r3, r2, r3
 80057ee:	095b      	lsrs	r3, r3, #5
 80057f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057f4:	4419      	add	r1, r3
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	4613      	mov	r3, r2
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4413      	add	r3, r2
 80057fe:	009a      	lsls	r2, r3, #2
 8005800:	441a      	add	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	fbb2 f2f3 	udiv	r2, r2, r3
 800580c:	4b0c      	ldr	r3, [pc, #48]	; (8005840 <UART_SetConfig+0x118>)
 800580e:	fba3 0302 	umull	r0, r3, r3, r2
 8005812:	095b      	lsrs	r3, r3, #5
 8005814:	2064      	movs	r0, #100	; 0x64
 8005816:	fb00 f303 	mul.w	r3, r0, r3
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	011b      	lsls	r3, r3, #4
 800581e:	3332      	adds	r3, #50	; 0x32
 8005820:	4a07      	ldr	r2, [pc, #28]	; (8005840 <UART_SetConfig+0x118>)
 8005822:	fba2 2303 	umull	r2, r3, r2, r3
 8005826:	095b      	lsrs	r3, r3, #5
 8005828:	f003 020f 	and.w	r2, r3, #15
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	440a      	add	r2, r1
 8005832:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005834:	bf00      	nop
 8005836:	3710      	adds	r7, #16
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	40013800 	.word	0x40013800
 8005840:	51eb851f 	.word	0x51eb851f

08005844 <__errno>:
 8005844:	4b01      	ldr	r3, [pc, #4]	; (800584c <__errno+0x8>)
 8005846:	6818      	ldr	r0, [r3, #0]
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	20000060 	.word	0x20000060

08005850 <__libc_init_array>:
 8005850:	b570      	push	{r4, r5, r6, lr}
 8005852:	2600      	movs	r6, #0
 8005854:	4d0c      	ldr	r5, [pc, #48]	; (8005888 <__libc_init_array+0x38>)
 8005856:	4c0d      	ldr	r4, [pc, #52]	; (800588c <__libc_init_array+0x3c>)
 8005858:	1b64      	subs	r4, r4, r5
 800585a:	10a4      	asrs	r4, r4, #2
 800585c:	42a6      	cmp	r6, r4
 800585e:	d109      	bne.n	8005874 <__libc_init_array+0x24>
 8005860:	f000 fc6c 	bl	800613c <_init>
 8005864:	2600      	movs	r6, #0
 8005866:	4d0a      	ldr	r5, [pc, #40]	; (8005890 <__libc_init_array+0x40>)
 8005868:	4c0a      	ldr	r4, [pc, #40]	; (8005894 <__libc_init_array+0x44>)
 800586a:	1b64      	subs	r4, r4, r5
 800586c:	10a4      	asrs	r4, r4, #2
 800586e:	42a6      	cmp	r6, r4
 8005870:	d105      	bne.n	800587e <__libc_init_array+0x2e>
 8005872:	bd70      	pop	{r4, r5, r6, pc}
 8005874:	f855 3b04 	ldr.w	r3, [r5], #4
 8005878:	4798      	blx	r3
 800587a:	3601      	adds	r6, #1
 800587c:	e7ee      	b.n	800585c <__libc_init_array+0xc>
 800587e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005882:	4798      	blx	r3
 8005884:	3601      	adds	r6, #1
 8005886:	e7f2      	b.n	800586e <__libc_init_array+0x1e>
 8005888:	080061b8 	.word	0x080061b8
 800588c:	080061b8 	.word	0x080061b8
 8005890:	080061b8 	.word	0x080061b8
 8005894:	080061bc 	.word	0x080061bc

08005898 <malloc>:
 8005898:	4b02      	ldr	r3, [pc, #8]	; (80058a4 <malloc+0xc>)
 800589a:	4601      	mov	r1, r0
 800589c:	6818      	ldr	r0, [r3, #0]
 800589e:	f000 b85f 	b.w	8005960 <_malloc_r>
 80058a2:	bf00      	nop
 80058a4:	20000060 	.word	0x20000060

080058a8 <free>:
 80058a8:	4b02      	ldr	r3, [pc, #8]	; (80058b4 <free+0xc>)
 80058aa:	4601      	mov	r1, r0
 80058ac:	6818      	ldr	r0, [r3, #0]
 80058ae:	f000 b80b 	b.w	80058c8 <_free_r>
 80058b2:	bf00      	nop
 80058b4:	20000060 	.word	0x20000060

080058b8 <memset>:
 80058b8:	4603      	mov	r3, r0
 80058ba:	4402      	add	r2, r0
 80058bc:	4293      	cmp	r3, r2
 80058be:	d100      	bne.n	80058c2 <memset+0xa>
 80058c0:	4770      	bx	lr
 80058c2:	f803 1b01 	strb.w	r1, [r3], #1
 80058c6:	e7f9      	b.n	80058bc <memset+0x4>

080058c8 <_free_r>:
 80058c8:	b538      	push	{r3, r4, r5, lr}
 80058ca:	4605      	mov	r5, r0
 80058cc:	2900      	cmp	r1, #0
 80058ce:	d043      	beq.n	8005958 <_free_r+0x90>
 80058d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058d4:	1f0c      	subs	r4, r1, #4
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	bfb8      	it	lt
 80058da:	18e4      	addlt	r4, r4, r3
 80058dc:	f000 f8ca 	bl	8005a74 <__malloc_lock>
 80058e0:	4a1e      	ldr	r2, [pc, #120]	; (800595c <_free_r+0x94>)
 80058e2:	6813      	ldr	r3, [r2, #0]
 80058e4:	4610      	mov	r0, r2
 80058e6:	b933      	cbnz	r3, 80058f6 <_free_r+0x2e>
 80058e8:	6063      	str	r3, [r4, #4]
 80058ea:	6014      	str	r4, [r2, #0]
 80058ec:	4628      	mov	r0, r5
 80058ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058f2:	f000 b8c5 	b.w	8005a80 <__malloc_unlock>
 80058f6:	42a3      	cmp	r3, r4
 80058f8:	d90a      	bls.n	8005910 <_free_r+0x48>
 80058fa:	6821      	ldr	r1, [r4, #0]
 80058fc:	1862      	adds	r2, r4, r1
 80058fe:	4293      	cmp	r3, r2
 8005900:	bf01      	itttt	eq
 8005902:	681a      	ldreq	r2, [r3, #0]
 8005904:	685b      	ldreq	r3, [r3, #4]
 8005906:	1852      	addeq	r2, r2, r1
 8005908:	6022      	streq	r2, [r4, #0]
 800590a:	6063      	str	r3, [r4, #4]
 800590c:	6004      	str	r4, [r0, #0]
 800590e:	e7ed      	b.n	80058ec <_free_r+0x24>
 8005910:	461a      	mov	r2, r3
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	b10b      	cbz	r3, 800591a <_free_r+0x52>
 8005916:	42a3      	cmp	r3, r4
 8005918:	d9fa      	bls.n	8005910 <_free_r+0x48>
 800591a:	6811      	ldr	r1, [r2, #0]
 800591c:	1850      	adds	r0, r2, r1
 800591e:	42a0      	cmp	r0, r4
 8005920:	d10b      	bne.n	800593a <_free_r+0x72>
 8005922:	6820      	ldr	r0, [r4, #0]
 8005924:	4401      	add	r1, r0
 8005926:	1850      	adds	r0, r2, r1
 8005928:	4283      	cmp	r3, r0
 800592a:	6011      	str	r1, [r2, #0]
 800592c:	d1de      	bne.n	80058ec <_free_r+0x24>
 800592e:	6818      	ldr	r0, [r3, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	4401      	add	r1, r0
 8005934:	6011      	str	r1, [r2, #0]
 8005936:	6053      	str	r3, [r2, #4]
 8005938:	e7d8      	b.n	80058ec <_free_r+0x24>
 800593a:	d902      	bls.n	8005942 <_free_r+0x7a>
 800593c:	230c      	movs	r3, #12
 800593e:	602b      	str	r3, [r5, #0]
 8005940:	e7d4      	b.n	80058ec <_free_r+0x24>
 8005942:	6820      	ldr	r0, [r4, #0]
 8005944:	1821      	adds	r1, r4, r0
 8005946:	428b      	cmp	r3, r1
 8005948:	bf01      	itttt	eq
 800594a:	6819      	ldreq	r1, [r3, #0]
 800594c:	685b      	ldreq	r3, [r3, #4]
 800594e:	1809      	addeq	r1, r1, r0
 8005950:	6021      	streq	r1, [r4, #0]
 8005952:	6063      	str	r3, [r4, #4]
 8005954:	6054      	str	r4, [r2, #4]
 8005956:	e7c9      	b.n	80058ec <_free_r+0x24>
 8005958:	bd38      	pop	{r3, r4, r5, pc}
 800595a:	bf00      	nop
 800595c:	20000100 	.word	0x20000100

08005960 <_malloc_r>:
 8005960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005962:	1ccd      	adds	r5, r1, #3
 8005964:	f025 0503 	bic.w	r5, r5, #3
 8005968:	3508      	adds	r5, #8
 800596a:	2d0c      	cmp	r5, #12
 800596c:	bf38      	it	cc
 800596e:	250c      	movcc	r5, #12
 8005970:	2d00      	cmp	r5, #0
 8005972:	4606      	mov	r6, r0
 8005974:	db01      	blt.n	800597a <_malloc_r+0x1a>
 8005976:	42a9      	cmp	r1, r5
 8005978:	d903      	bls.n	8005982 <_malloc_r+0x22>
 800597a:	230c      	movs	r3, #12
 800597c:	6033      	str	r3, [r6, #0]
 800597e:	2000      	movs	r0, #0
 8005980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005982:	f000 f877 	bl	8005a74 <__malloc_lock>
 8005986:	4921      	ldr	r1, [pc, #132]	; (8005a0c <_malloc_r+0xac>)
 8005988:	680a      	ldr	r2, [r1, #0]
 800598a:	4614      	mov	r4, r2
 800598c:	b99c      	cbnz	r4, 80059b6 <_malloc_r+0x56>
 800598e:	4f20      	ldr	r7, [pc, #128]	; (8005a10 <_malloc_r+0xb0>)
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	b923      	cbnz	r3, 800599e <_malloc_r+0x3e>
 8005994:	4621      	mov	r1, r4
 8005996:	4630      	mov	r0, r6
 8005998:	f000 f83c 	bl	8005a14 <_sbrk_r>
 800599c:	6038      	str	r0, [r7, #0]
 800599e:	4629      	mov	r1, r5
 80059a0:	4630      	mov	r0, r6
 80059a2:	f000 f837 	bl	8005a14 <_sbrk_r>
 80059a6:	1c43      	adds	r3, r0, #1
 80059a8:	d123      	bne.n	80059f2 <_malloc_r+0x92>
 80059aa:	230c      	movs	r3, #12
 80059ac:	4630      	mov	r0, r6
 80059ae:	6033      	str	r3, [r6, #0]
 80059b0:	f000 f866 	bl	8005a80 <__malloc_unlock>
 80059b4:	e7e3      	b.n	800597e <_malloc_r+0x1e>
 80059b6:	6823      	ldr	r3, [r4, #0]
 80059b8:	1b5b      	subs	r3, r3, r5
 80059ba:	d417      	bmi.n	80059ec <_malloc_r+0x8c>
 80059bc:	2b0b      	cmp	r3, #11
 80059be:	d903      	bls.n	80059c8 <_malloc_r+0x68>
 80059c0:	6023      	str	r3, [r4, #0]
 80059c2:	441c      	add	r4, r3
 80059c4:	6025      	str	r5, [r4, #0]
 80059c6:	e004      	b.n	80059d2 <_malloc_r+0x72>
 80059c8:	6863      	ldr	r3, [r4, #4]
 80059ca:	42a2      	cmp	r2, r4
 80059cc:	bf0c      	ite	eq
 80059ce:	600b      	streq	r3, [r1, #0]
 80059d0:	6053      	strne	r3, [r2, #4]
 80059d2:	4630      	mov	r0, r6
 80059d4:	f000 f854 	bl	8005a80 <__malloc_unlock>
 80059d8:	f104 000b 	add.w	r0, r4, #11
 80059dc:	1d23      	adds	r3, r4, #4
 80059de:	f020 0007 	bic.w	r0, r0, #7
 80059e2:	1ac2      	subs	r2, r0, r3
 80059e4:	d0cc      	beq.n	8005980 <_malloc_r+0x20>
 80059e6:	1a1b      	subs	r3, r3, r0
 80059e8:	50a3      	str	r3, [r4, r2]
 80059ea:	e7c9      	b.n	8005980 <_malloc_r+0x20>
 80059ec:	4622      	mov	r2, r4
 80059ee:	6864      	ldr	r4, [r4, #4]
 80059f0:	e7cc      	b.n	800598c <_malloc_r+0x2c>
 80059f2:	1cc4      	adds	r4, r0, #3
 80059f4:	f024 0403 	bic.w	r4, r4, #3
 80059f8:	42a0      	cmp	r0, r4
 80059fa:	d0e3      	beq.n	80059c4 <_malloc_r+0x64>
 80059fc:	1a21      	subs	r1, r4, r0
 80059fe:	4630      	mov	r0, r6
 8005a00:	f000 f808 	bl	8005a14 <_sbrk_r>
 8005a04:	3001      	adds	r0, #1
 8005a06:	d1dd      	bne.n	80059c4 <_malloc_r+0x64>
 8005a08:	e7cf      	b.n	80059aa <_malloc_r+0x4a>
 8005a0a:	bf00      	nop
 8005a0c:	20000100 	.word	0x20000100
 8005a10:	20000104 	.word	0x20000104

08005a14 <_sbrk_r>:
 8005a14:	b538      	push	{r3, r4, r5, lr}
 8005a16:	2300      	movs	r3, #0
 8005a18:	4d05      	ldr	r5, [pc, #20]	; (8005a30 <_sbrk_r+0x1c>)
 8005a1a:	4604      	mov	r4, r0
 8005a1c:	4608      	mov	r0, r1
 8005a1e:	602b      	str	r3, [r5, #0]
 8005a20:	f7fb fd32 	bl	8001488 <_sbrk>
 8005a24:	1c43      	adds	r3, r0, #1
 8005a26:	d102      	bne.n	8005a2e <_sbrk_r+0x1a>
 8005a28:	682b      	ldr	r3, [r5, #0]
 8005a2a:	b103      	cbz	r3, 8005a2e <_sbrk_r+0x1a>
 8005a2c:	6023      	str	r3, [r4, #0]
 8005a2e:	bd38      	pop	{r3, r4, r5, pc}
 8005a30:	200002a4 	.word	0x200002a4

08005a34 <siprintf>:
 8005a34:	b40e      	push	{r1, r2, r3}
 8005a36:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005a3a:	b500      	push	{lr}
 8005a3c:	b09c      	sub	sp, #112	; 0x70
 8005a3e:	ab1d      	add	r3, sp, #116	; 0x74
 8005a40:	9002      	str	r0, [sp, #8]
 8005a42:	9006      	str	r0, [sp, #24]
 8005a44:	9107      	str	r1, [sp, #28]
 8005a46:	9104      	str	r1, [sp, #16]
 8005a48:	4808      	ldr	r0, [pc, #32]	; (8005a6c <siprintf+0x38>)
 8005a4a:	4909      	ldr	r1, [pc, #36]	; (8005a70 <siprintf+0x3c>)
 8005a4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a50:	9105      	str	r1, [sp, #20]
 8005a52:	6800      	ldr	r0, [r0, #0]
 8005a54:	a902      	add	r1, sp, #8
 8005a56:	9301      	str	r3, [sp, #4]
 8005a58:	f000 f874 	bl	8005b44 <_svfiprintf_r>
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	9b02      	ldr	r3, [sp, #8]
 8005a60:	701a      	strb	r2, [r3, #0]
 8005a62:	b01c      	add	sp, #112	; 0x70
 8005a64:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a68:	b003      	add	sp, #12
 8005a6a:	4770      	bx	lr
 8005a6c:	20000060 	.word	0x20000060
 8005a70:	ffff0208 	.word	0xffff0208

08005a74 <__malloc_lock>:
 8005a74:	4801      	ldr	r0, [pc, #4]	; (8005a7c <__malloc_lock+0x8>)
 8005a76:	f000 bafb 	b.w	8006070 <__retarget_lock_acquire_recursive>
 8005a7a:	bf00      	nop
 8005a7c:	200002ac 	.word	0x200002ac

08005a80 <__malloc_unlock>:
 8005a80:	4801      	ldr	r0, [pc, #4]	; (8005a88 <__malloc_unlock+0x8>)
 8005a82:	f000 baf6 	b.w	8006072 <__retarget_lock_release_recursive>
 8005a86:	bf00      	nop
 8005a88:	200002ac 	.word	0x200002ac

08005a8c <__ssputs_r>:
 8005a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a90:	688e      	ldr	r6, [r1, #8]
 8005a92:	4682      	mov	sl, r0
 8005a94:	429e      	cmp	r6, r3
 8005a96:	460c      	mov	r4, r1
 8005a98:	4690      	mov	r8, r2
 8005a9a:	461f      	mov	r7, r3
 8005a9c:	d838      	bhi.n	8005b10 <__ssputs_r+0x84>
 8005a9e:	898a      	ldrh	r2, [r1, #12]
 8005aa0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005aa4:	d032      	beq.n	8005b0c <__ssputs_r+0x80>
 8005aa6:	6825      	ldr	r5, [r4, #0]
 8005aa8:	6909      	ldr	r1, [r1, #16]
 8005aaa:	3301      	adds	r3, #1
 8005aac:	eba5 0901 	sub.w	r9, r5, r1
 8005ab0:	6965      	ldr	r5, [r4, #20]
 8005ab2:	444b      	add	r3, r9
 8005ab4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ab8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005abc:	106d      	asrs	r5, r5, #1
 8005abe:	429d      	cmp	r5, r3
 8005ac0:	bf38      	it	cc
 8005ac2:	461d      	movcc	r5, r3
 8005ac4:	0553      	lsls	r3, r2, #21
 8005ac6:	d531      	bpl.n	8005b2c <__ssputs_r+0xa0>
 8005ac8:	4629      	mov	r1, r5
 8005aca:	f7ff ff49 	bl	8005960 <_malloc_r>
 8005ace:	4606      	mov	r6, r0
 8005ad0:	b950      	cbnz	r0, 8005ae8 <__ssputs_r+0x5c>
 8005ad2:	230c      	movs	r3, #12
 8005ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ad8:	f8ca 3000 	str.w	r3, [sl]
 8005adc:	89a3      	ldrh	r3, [r4, #12]
 8005ade:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ae2:	81a3      	strh	r3, [r4, #12]
 8005ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ae8:	464a      	mov	r2, r9
 8005aea:	6921      	ldr	r1, [r4, #16]
 8005aec:	f000 fad0 	bl	8006090 <memcpy>
 8005af0:	89a3      	ldrh	r3, [r4, #12]
 8005af2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005afa:	81a3      	strh	r3, [r4, #12]
 8005afc:	6126      	str	r6, [r4, #16]
 8005afe:	444e      	add	r6, r9
 8005b00:	6026      	str	r6, [r4, #0]
 8005b02:	463e      	mov	r6, r7
 8005b04:	6165      	str	r5, [r4, #20]
 8005b06:	eba5 0509 	sub.w	r5, r5, r9
 8005b0a:	60a5      	str	r5, [r4, #8]
 8005b0c:	42be      	cmp	r6, r7
 8005b0e:	d900      	bls.n	8005b12 <__ssputs_r+0x86>
 8005b10:	463e      	mov	r6, r7
 8005b12:	4632      	mov	r2, r6
 8005b14:	4641      	mov	r1, r8
 8005b16:	6820      	ldr	r0, [r4, #0]
 8005b18:	f000 fac8 	bl	80060ac <memmove>
 8005b1c:	68a3      	ldr	r3, [r4, #8]
 8005b1e:	6822      	ldr	r2, [r4, #0]
 8005b20:	1b9b      	subs	r3, r3, r6
 8005b22:	4432      	add	r2, r6
 8005b24:	2000      	movs	r0, #0
 8005b26:	60a3      	str	r3, [r4, #8]
 8005b28:	6022      	str	r2, [r4, #0]
 8005b2a:	e7db      	b.n	8005ae4 <__ssputs_r+0x58>
 8005b2c:	462a      	mov	r2, r5
 8005b2e:	f000 fad7 	bl	80060e0 <_realloc_r>
 8005b32:	4606      	mov	r6, r0
 8005b34:	2800      	cmp	r0, #0
 8005b36:	d1e1      	bne.n	8005afc <__ssputs_r+0x70>
 8005b38:	4650      	mov	r0, sl
 8005b3a:	6921      	ldr	r1, [r4, #16]
 8005b3c:	f7ff fec4 	bl	80058c8 <_free_r>
 8005b40:	e7c7      	b.n	8005ad2 <__ssputs_r+0x46>
	...

08005b44 <_svfiprintf_r>:
 8005b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b48:	4698      	mov	r8, r3
 8005b4a:	898b      	ldrh	r3, [r1, #12]
 8005b4c:	4607      	mov	r7, r0
 8005b4e:	061b      	lsls	r3, r3, #24
 8005b50:	460d      	mov	r5, r1
 8005b52:	4614      	mov	r4, r2
 8005b54:	b09d      	sub	sp, #116	; 0x74
 8005b56:	d50e      	bpl.n	8005b76 <_svfiprintf_r+0x32>
 8005b58:	690b      	ldr	r3, [r1, #16]
 8005b5a:	b963      	cbnz	r3, 8005b76 <_svfiprintf_r+0x32>
 8005b5c:	2140      	movs	r1, #64	; 0x40
 8005b5e:	f7ff feff 	bl	8005960 <_malloc_r>
 8005b62:	6028      	str	r0, [r5, #0]
 8005b64:	6128      	str	r0, [r5, #16]
 8005b66:	b920      	cbnz	r0, 8005b72 <_svfiprintf_r+0x2e>
 8005b68:	230c      	movs	r3, #12
 8005b6a:	603b      	str	r3, [r7, #0]
 8005b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b70:	e0d1      	b.n	8005d16 <_svfiprintf_r+0x1d2>
 8005b72:	2340      	movs	r3, #64	; 0x40
 8005b74:	616b      	str	r3, [r5, #20]
 8005b76:	2300      	movs	r3, #0
 8005b78:	9309      	str	r3, [sp, #36]	; 0x24
 8005b7a:	2320      	movs	r3, #32
 8005b7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b80:	2330      	movs	r3, #48	; 0x30
 8005b82:	f04f 0901 	mov.w	r9, #1
 8005b86:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b8a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005d30 <_svfiprintf_r+0x1ec>
 8005b8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b92:	4623      	mov	r3, r4
 8005b94:	469a      	mov	sl, r3
 8005b96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b9a:	b10a      	cbz	r2, 8005ba0 <_svfiprintf_r+0x5c>
 8005b9c:	2a25      	cmp	r2, #37	; 0x25
 8005b9e:	d1f9      	bne.n	8005b94 <_svfiprintf_r+0x50>
 8005ba0:	ebba 0b04 	subs.w	fp, sl, r4
 8005ba4:	d00b      	beq.n	8005bbe <_svfiprintf_r+0x7a>
 8005ba6:	465b      	mov	r3, fp
 8005ba8:	4622      	mov	r2, r4
 8005baa:	4629      	mov	r1, r5
 8005bac:	4638      	mov	r0, r7
 8005bae:	f7ff ff6d 	bl	8005a8c <__ssputs_r>
 8005bb2:	3001      	adds	r0, #1
 8005bb4:	f000 80aa 	beq.w	8005d0c <_svfiprintf_r+0x1c8>
 8005bb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bba:	445a      	add	r2, fp
 8005bbc:	9209      	str	r2, [sp, #36]	; 0x24
 8005bbe:	f89a 3000 	ldrb.w	r3, [sl]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	f000 80a2 	beq.w	8005d0c <_svfiprintf_r+0x1c8>
 8005bc8:	2300      	movs	r3, #0
 8005bca:	f04f 32ff 	mov.w	r2, #4294967295
 8005bce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bd2:	f10a 0a01 	add.w	sl, sl, #1
 8005bd6:	9304      	str	r3, [sp, #16]
 8005bd8:	9307      	str	r3, [sp, #28]
 8005bda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005bde:	931a      	str	r3, [sp, #104]	; 0x68
 8005be0:	4654      	mov	r4, sl
 8005be2:	2205      	movs	r2, #5
 8005be4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005be8:	4851      	ldr	r0, [pc, #324]	; (8005d30 <_svfiprintf_r+0x1ec>)
 8005bea:	f000 fa43 	bl	8006074 <memchr>
 8005bee:	9a04      	ldr	r2, [sp, #16]
 8005bf0:	b9d8      	cbnz	r0, 8005c2a <_svfiprintf_r+0xe6>
 8005bf2:	06d0      	lsls	r0, r2, #27
 8005bf4:	bf44      	itt	mi
 8005bf6:	2320      	movmi	r3, #32
 8005bf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bfc:	0711      	lsls	r1, r2, #28
 8005bfe:	bf44      	itt	mi
 8005c00:	232b      	movmi	r3, #43	; 0x2b
 8005c02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c06:	f89a 3000 	ldrb.w	r3, [sl]
 8005c0a:	2b2a      	cmp	r3, #42	; 0x2a
 8005c0c:	d015      	beq.n	8005c3a <_svfiprintf_r+0xf6>
 8005c0e:	4654      	mov	r4, sl
 8005c10:	2000      	movs	r0, #0
 8005c12:	f04f 0c0a 	mov.w	ip, #10
 8005c16:	9a07      	ldr	r2, [sp, #28]
 8005c18:	4621      	mov	r1, r4
 8005c1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c1e:	3b30      	subs	r3, #48	; 0x30
 8005c20:	2b09      	cmp	r3, #9
 8005c22:	d94e      	bls.n	8005cc2 <_svfiprintf_r+0x17e>
 8005c24:	b1b0      	cbz	r0, 8005c54 <_svfiprintf_r+0x110>
 8005c26:	9207      	str	r2, [sp, #28]
 8005c28:	e014      	b.n	8005c54 <_svfiprintf_r+0x110>
 8005c2a:	eba0 0308 	sub.w	r3, r0, r8
 8005c2e:	fa09 f303 	lsl.w	r3, r9, r3
 8005c32:	4313      	orrs	r3, r2
 8005c34:	46a2      	mov	sl, r4
 8005c36:	9304      	str	r3, [sp, #16]
 8005c38:	e7d2      	b.n	8005be0 <_svfiprintf_r+0x9c>
 8005c3a:	9b03      	ldr	r3, [sp, #12]
 8005c3c:	1d19      	adds	r1, r3, #4
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	9103      	str	r1, [sp, #12]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	bfbb      	ittet	lt
 8005c46:	425b      	neglt	r3, r3
 8005c48:	f042 0202 	orrlt.w	r2, r2, #2
 8005c4c:	9307      	strge	r3, [sp, #28]
 8005c4e:	9307      	strlt	r3, [sp, #28]
 8005c50:	bfb8      	it	lt
 8005c52:	9204      	strlt	r2, [sp, #16]
 8005c54:	7823      	ldrb	r3, [r4, #0]
 8005c56:	2b2e      	cmp	r3, #46	; 0x2e
 8005c58:	d10c      	bne.n	8005c74 <_svfiprintf_r+0x130>
 8005c5a:	7863      	ldrb	r3, [r4, #1]
 8005c5c:	2b2a      	cmp	r3, #42	; 0x2a
 8005c5e:	d135      	bne.n	8005ccc <_svfiprintf_r+0x188>
 8005c60:	9b03      	ldr	r3, [sp, #12]
 8005c62:	3402      	adds	r4, #2
 8005c64:	1d1a      	adds	r2, r3, #4
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	9203      	str	r2, [sp, #12]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	bfb8      	it	lt
 8005c6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c72:	9305      	str	r3, [sp, #20]
 8005c74:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005d40 <_svfiprintf_r+0x1fc>
 8005c78:	2203      	movs	r2, #3
 8005c7a:	4650      	mov	r0, sl
 8005c7c:	7821      	ldrb	r1, [r4, #0]
 8005c7e:	f000 f9f9 	bl	8006074 <memchr>
 8005c82:	b140      	cbz	r0, 8005c96 <_svfiprintf_r+0x152>
 8005c84:	2340      	movs	r3, #64	; 0x40
 8005c86:	eba0 000a 	sub.w	r0, r0, sl
 8005c8a:	fa03 f000 	lsl.w	r0, r3, r0
 8005c8e:	9b04      	ldr	r3, [sp, #16]
 8005c90:	3401      	adds	r4, #1
 8005c92:	4303      	orrs	r3, r0
 8005c94:	9304      	str	r3, [sp, #16]
 8005c96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c9a:	2206      	movs	r2, #6
 8005c9c:	4825      	ldr	r0, [pc, #148]	; (8005d34 <_svfiprintf_r+0x1f0>)
 8005c9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ca2:	f000 f9e7 	bl	8006074 <memchr>
 8005ca6:	2800      	cmp	r0, #0
 8005ca8:	d038      	beq.n	8005d1c <_svfiprintf_r+0x1d8>
 8005caa:	4b23      	ldr	r3, [pc, #140]	; (8005d38 <_svfiprintf_r+0x1f4>)
 8005cac:	bb1b      	cbnz	r3, 8005cf6 <_svfiprintf_r+0x1b2>
 8005cae:	9b03      	ldr	r3, [sp, #12]
 8005cb0:	3307      	adds	r3, #7
 8005cb2:	f023 0307 	bic.w	r3, r3, #7
 8005cb6:	3308      	adds	r3, #8
 8005cb8:	9303      	str	r3, [sp, #12]
 8005cba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cbc:	4433      	add	r3, r6
 8005cbe:	9309      	str	r3, [sp, #36]	; 0x24
 8005cc0:	e767      	b.n	8005b92 <_svfiprintf_r+0x4e>
 8005cc2:	460c      	mov	r4, r1
 8005cc4:	2001      	movs	r0, #1
 8005cc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cca:	e7a5      	b.n	8005c18 <_svfiprintf_r+0xd4>
 8005ccc:	2300      	movs	r3, #0
 8005cce:	f04f 0c0a 	mov.w	ip, #10
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	3401      	adds	r4, #1
 8005cd6:	9305      	str	r3, [sp, #20]
 8005cd8:	4620      	mov	r0, r4
 8005cda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cde:	3a30      	subs	r2, #48	; 0x30
 8005ce0:	2a09      	cmp	r2, #9
 8005ce2:	d903      	bls.n	8005cec <_svfiprintf_r+0x1a8>
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d0c5      	beq.n	8005c74 <_svfiprintf_r+0x130>
 8005ce8:	9105      	str	r1, [sp, #20]
 8005cea:	e7c3      	b.n	8005c74 <_svfiprintf_r+0x130>
 8005cec:	4604      	mov	r4, r0
 8005cee:	2301      	movs	r3, #1
 8005cf0:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cf4:	e7f0      	b.n	8005cd8 <_svfiprintf_r+0x194>
 8005cf6:	ab03      	add	r3, sp, #12
 8005cf8:	9300      	str	r3, [sp, #0]
 8005cfa:	462a      	mov	r2, r5
 8005cfc:	4638      	mov	r0, r7
 8005cfe:	4b0f      	ldr	r3, [pc, #60]	; (8005d3c <_svfiprintf_r+0x1f8>)
 8005d00:	a904      	add	r1, sp, #16
 8005d02:	f3af 8000 	nop.w
 8005d06:	1c42      	adds	r2, r0, #1
 8005d08:	4606      	mov	r6, r0
 8005d0a:	d1d6      	bne.n	8005cba <_svfiprintf_r+0x176>
 8005d0c:	89ab      	ldrh	r3, [r5, #12]
 8005d0e:	065b      	lsls	r3, r3, #25
 8005d10:	f53f af2c 	bmi.w	8005b6c <_svfiprintf_r+0x28>
 8005d14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d16:	b01d      	add	sp, #116	; 0x74
 8005d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d1c:	ab03      	add	r3, sp, #12
 8005d1e:	9300      	str	r3, [sp, #0]
 8005d20:	462a      	mov	r2, r5
 8005d22:	4638      	mov	r0, r7
 8005d24:	4b05      	ldr	r3, [pc, #20]	; (8005d3c <_svfiprintf_r+0x1f8>)
 8005d26:	a904      	add	r1, sp, #16
 8005d28:	f000 f87c 	bl	8005e24 <_printf_i>
 8005d2c:	e7eb      	b.n	8005d06 <_svfiprintf_r+0x1c2>
 8005d2e:	bf00      	nop
 8005d30:	08006182 	.word	0x08006182
 8005d34:	0800618c 	.word	0x0800618c
 8005d38:	00000000 	.word	0x00000000
 8005d3c:	08005a8d 	.word	0x08005a8d
 8005d40:	08006188 	.word	0x08006188

08005d44 <_printf_common>:
 8005d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d48:	4616      	mov	r6, r2
 8005d4a:	4699      	mov	r9, r3
 8005d4c:	688a      	ldr	r2, [r1, #8]
 8005d4e:	690b      	ldr	r3, [r1, #16]
 8005d50:	4607      	mov	r7, r0
 8005d52:	4293      	cmp	r3, r2
 8005d54:	bfb8      	it	lt
 8005d56:	4613      	movlt	r3, r2
 8005d58:	6033      	str	r3, [r6, #0]
 8005d5a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d5e:	460c      	mov	r4, r1
 8005d60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d64:	b10a      	cbz	r2, 8005d6a <_printf_common+0x26>
 8005d66:	3301      	adds	r3, #1
 8005d68:	6033      	str	r3, [r6, #0]
 8005d6a:	6823      	ldr	r3, [r4, #0]
 8005d6c:	0699      	lsls	r1, r3, #26
 8005d6e:	bf42      	ittt	mi
 8005d70:	6833      	ldrmi	r3, [r6, #0]
 8005d72:	3302      	addmi	r3, #2
 8005d74:	6033      	strmi	r3, [r6, #0]
 8005d76:	6825      	ldr	r5, [r4, #0]
 8005d78:	f015 0506 	ands.w	r5, r5, #6
 8005d7c:	d106      	bne.n	8005d8c <_printf_common+0x48>
 8005d7e:	f104 0a19 	add.w	sl, r4, #25
 8005d82:	68e3      	ldr	r3, [r4, #12]
 8005d84:	6832      	ldr	r2, [r6, #0]
 8005d86:	1a9b      	subs	r3, r3, r2
 8005d88:	42ab      	cmp	r3, r5
 8005d8a:	dc28      	bgt.n	8005dde <_printf_common+0x9a>
 8005d8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d90:	1e13      	subs	r3, r2, #0
 8005d92:	6822      	ldr	r2, [r4, #0]
 8005d94:	bf18      	it	ne
 8005d96:	2301      	movne	r3, #1
 8005d98:	0692      	lsls	r2, r2, #26
 8005d9a:	d42d      	bmi.n	8005df8 <_printf_common+0xb4>
 8005d9c:	4649      	mov	r1, r9
 8005d9e:	4638      	mov	r0, r7
 8005da0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005da4:	47c0      	blx	r8
 8005da6:	3001      	adds	r0, #1
 8005da8:	d020      	beq.n	8005dec <_printf_common+0xa8>
 8005daa:	6823      	ldr	r3, [r4, #0]
 8005dac:	68e5      	ldr	r5, [r4, #12]
 8005dae:	f003 0306 	and.w	r3, r3, #6
 8005db2:	2b04      	cmp	r3, #4
 8005db4:	bf18      	it	ne
 8005db6:	2500      	movne	r5, #0
 8005db8:	6832      	ldr	r2, [r6, #0]
 8005dba:	f04f 0600 	mov.w	r6, #0
 8005dbe:	68a3      	ldr	r3, [r4, #8]
 8005dc0:	bf08      	it	eq
 8005dc2:	1aad      	subeq	r5, r5, r2
 8005dc4:	6922      	ldr	r2, [r4, #16]
 8005dc6:	bf08      	it	eq
 8005dc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	bfc4      	itt	gt
 8005dd0:	1a9b      	subgt	r3, r3, r2
 8005dd2:	18ed      	addgt	r5, r5, r3
 8005dd4:	341a      	adds	r4, #26
 8005dd6:	42b5      	cmp	r5, r6
 8005dd8:	d11a      	bne.n	8005e10 <_printf_common+0xcc>
 8005dda:	2000      	movs	r0, #0
 8005ddc:	e008      	b.n	8005df0 <_printf_common+0xac>
 8005dde:	2301      	movs	r3, #1
 8005de0:	4652      	mov	r2, sl
 8005de2:	4649      	mov	r1, r9
 8005de4:	4638      	mov	r0, r7
 8005de6:	47c0      	blx	r8
 8005de8:	3001      	adds	r0, #1
 8005dea:	d103      	bne.n	8005df4 <_printf_common+0xb0>
 8005dec:	f04f 30ff 	mov.w	r0, #4294967295
 8005df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005df4:	3501      	adds	r5, #1
 8005df6:	e7c4      	b.n	8005d82 <_printf_common+0x3e>
 8005df8:	2030      	movs	r0, #48	; 0x30
 8005dfa:	18e1      	adds	r1, r4, r3
 8005dfc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e00:	1c5a      	adds	r2, r3, #1
 8005e02:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e06:	4422      	add	r2, r4
 8005e08:	3302      	adds	r3, #2
 8005e0a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e0e:	e7c5      	b.n	8005d9c <_printf_common+0x58>
 8005e10:	2301      	movs	r3, #1
 8005e12:	4622      	mov	r2, r4
 8005e14:	4649      	mov	r1, r9
 8005e16:	4638      	mov	r0, r7
 8005e18:	47c0      	blx	r8
 8005e1a:	3001      	adds	r0, #1
 8005e1c:	d0e6      	beq.n	8005dec <_printf_common+0xa8>
 8005e1e:	3601      	adds	r6, #1
 8005e20:	e7d9      	b.n	8005dd6 <_printf_common+0x92>
	...

08005e24 <_printf_i>:
 8005e24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e28:	460c      	mov	r4, r1
 8005e2a:	7e27      	ldrb	r7, [r4, #24]
 8005e2c:	4691      	mov	r9, r2
 8005e2e:	2f78      	cmp	r7, #120	; 0x78
 8005e30:	4680      	mov	r8, r0
 8005e32:	469a      	mov	sl, r3
 8005e34:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005e36:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e3a:	d807      	bhi.n	8005e4c <_printf_i+0x28>
 8005e3c:	2f62      	cmp	r7, #98	; 0x62
 8005e3e:	d80a      	bhi.n	8005e56 <_printf_i+0x32>
 8005e40:	2f00      	cmp	r7, #0
 8005e42:	f000 80d9 	beq.w	8005ff8 <_printf_i+0x1d4>
 8005e46:	2f58      	cmp	r7, #88	; 0x58
 8005e48:	f000 80a4 	beq.w	8005f94 <_printf_i+0x170>
 8005e4c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005e50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e54:	e03a      	b.n	8005ecc <_printf_i+0xa8>
 8005e56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e5a:	2b15      	cmp	r3, #21
 8005e5c:	d8f6      	bhi.n	8005e4c <_printf_i+0x28>
 8005e5e:	a001      	add	r0, pc, #4	; (adr r0, 8005e64 <_printf_i+0x40>)
 8005e60:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005e64:	08005ebd 	.word	0x08005ebd
 8005e68:	08005ed1 	.word	0x08005ed1
 8005e6c:	08005e4d 	.word	0x08005e4d
 8005e70:	08005e4d 	.word	0x08005e4d
 8005e74:	08005e4d 	.word	0x08005e4d
 8005e78:	08005e4d 	.word	0x08005e4d
 8005e7c:	08005ed1 	.word	0x08005ed1
 8005e80:	08005e4d 	.word	0x08005e4d
 8005e84:	08005e4d 	.word	0x08005e4d
 8005e88:	08005e4d 	.word	0x08005e4d
 8005e8c:	08005e4d 	.word	0x08005e4d
 8005e90:	08005fdf 	.word	0x08005fdf
 8005e94:	08005f01 	.word	0x08005f01
 8005e98:	08005fc1 	.word	0x08005fc1
 8005e9c:	08005e4d 	.word	0x08005e4d
 8005ea0:	08005e4d 	.word	0x08005e4d
 8005ea4:	08006001 	.word	0x08006001
 8005ea8:	08005e4d 	.word	0x08005e4d
 8005eac:	08005f01 	.word	0x08005f01
 8005eb0:	08005e4d 	.word	0x08005e4d
 8005eb4:	08005e4d 	.word	0x08005e4d
 8005eb8:	08005fc9 	.word	0x08005fc9
 8005ebc:	680b      	ldr	r3, [r1, #0]
 8005ebe:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005ec2:	1d1a      	adds	r2, r3, #4
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	600a      	str	r2, [r1, #0]
 8005ec8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e0a4      	b.n	800601a <_printf_i+0x1f6>
 8005ed0:	6825      	ldr	r5, [r4, #0]
 8005ed2:	6808      	ldr	r0, [r1, #0]
 8005ed4:	062e      	lsls	r6, r5, #24
 8005ed6:	f100 0304 	add.w	r3, r0, #4
 8005eda:	d50a      	bpl.n	8005ef2 <_printf_i+0xce>
 8005edc:	6805      	ldr	r5, [r0, #0]
 8005ede:	600b      	str	r3, [r1, #0]
 8005ee0:	2d00      	cmp	r5, #0
 8005ee2:	da03      	bge.n	8005eec <_printf_i+0xc8>
 8005ee4:	232d      	movs	r3, #45	; 0x2d
 8005ee6:	426d      	negs	r5, r5
 8005ee8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005eec:	230a      	movs	r3, #10
 8005eee:	485e      	ldr	r0, [pc, #376]	; (8006068 <_printf_i+0x244>)
 8005ef0:	e019      	b.n	8005f26 <_printf_i+0x102>
 8005ef2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005ef6:	6805      	ldr	r5, [r0, #0]
 8005ef8:	600b      	str	r3, [r1, #0]
 8005efa:	bf18      	it	ne
 8005efc:	b22d      	sxthne	r5, r5
 8005efe:	e7ef      	b.n	8005ee0 <_printf_i+0xbc>
 8005f00:	680b      	ldr	r3, [r1, #0]
 8005f02:	6825      	ldr	r5, [r4, #0]
 8005f04:	1d18      	adds	r0, r3, #4
 8005f06:	6008      	str	r0, [r1, #0]
 8005f08:	0628      	lsls	r0, r5, #24
 8005f0a:	d501      	bpl.n	8005f10 <_printf_i+0xec>
 8005f0c:	681d      	ldr	r5, [r3, #0]
 8005f0e:	e002      	b.n	8005f16 <_printf_i+0xf2>
 8005f10:	0669      	lsls	r1, r5, #25
 8005f12:	d5fb      	bpl.n	8005f0c <_printf_i+0xe8>
 8005f14:	881d      	ldrh	r5, [r3, #0]
 8005f16:	2f6f      	cmp	r7, #111	; 0x6f
 8005f18:	bf0c      	ite	eq
 8005f1a:	2308      	moveq	r3, #8
 8005f1c:	230a      	movne	r3, #10
 8005f1e:	4852      	ldr	r0, [pc, #328]	; (8006068 <_printf_i+0x244>)
 8005f20:	2100      	movs	r1, #0
 8005f22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f26:	6866      	ldr	r6, [r4, #4]
 8005f28:	2e00      	cmp	r6, #0
 8005f2a:	bfa8      	it	ge
 8005f2c:	6821      	ldrge	r1, [r4, #0]
 8005f2e:	60a6      	str	r6, [r4, #8]
 8005f30:	bfa4      	itt	ge
 8005f32:	f021 0104 	bicge.w	r1, r1, #4
 8005f36:	6021      	strge	r1, [r4, #0]
 8005f38:	b90d      	cbnz	r5, 8005f3e <_printf_i+0x11a>
 8005f3a:	2e00      	cmp	r6, #0
 8005f3c:	d04d      	beq.n	8005fda <_printf_i+0x1b6>
 8005f3e:	4616      	mov	r6, r2
 8005f40:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f44:	fb03 5711 	mls	r7, r3, r1, r5
 8005f48:	5dc7      	ldrb	r7, [r0, r7]
 8005f4a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f4e:	462f      	mov	r7, r5
 8005f50:	42bb      	cmp	r3, r7
 8005f52:	460d      	mov	r5, r1
 8005f54:	d9f4      	bls.n	8005f40 <_printf_i+0x11c>
 8005f56:	2b08      	cmp	r3, #8
 8005f58:	d10b      	bne.n	8005f72 <_printf_i+0x14e>
 8005f5a:	6823      	ldr	r3, [r4, #0]
 8005f5c:	07df      	lsls	r7, r3, #31
 8005f5e:	d508      	bpl.n	8005f72 <_printf_i+0x14e>
 8005f60:	6923      	ldr	r3, [r4, #16]
 8005f62:	6861      	ldr	r1, [r4, #4]
 8005f64:	4299      	cmp	r1, r3
 8005f66:	bfde      	ittt	le
 8005f68:	2330      	movle	r3, #48	; 0x30
 8005f6a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f6e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f72:	1b92      	subs	r2, r2, r6
 8005f74:	6122      	str	r2, [r4, #16]
 8005f76:	464b      	mov	r3, r9
 8005f78:	4621      	mov	r1, r4
 8005f7a:	4640      	mov	r0, r8
 8005f7c:	f8cd a000 	str.w	sl, [sp]
 8005f80:	aa03      	add	r2, sp, #12
 8005f82:	f7ff fedf 	bl	8005d44 <_printf_common>
 8005f86:	3001      	adds	r0, #1
 8005f88:	d14c      	bne.n	8006024 <_printf_i+0x200>
 8005f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f8e:	b004      	add	sp, #16
 8005f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f94:	4834      	ldr	r0, [pc, #208]	; (8006068 <_printf_i+0x244>)
 8005f96:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005f9a:	680e      	ldr	r6, [r1, #0]
 8005f9c:	6823      	ldr	r3, [r4, #0]
 8005f9e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005fa2:	061f      	lsls	r7, r3, #24
 8005fa4:	600e      	str	r6, [r1, #0]
 8005fa6:	d514      	bpl.n	8005fd2 <_printf_i+0x1ae>
 8005fa8:	07d9      	lsls	r1, r3, #31
 8005faa:	bf44      	itt	mi
 8005fac:	f043 0320 	orrmi.w	r3, r3, #32
 8005fb0:	6023      	strmi	r3, [r4, #0]
 8005fb2:	b91d      	cbnz	r5, 8005fbc <_printf_i+0x198>
 8005fb4:	6823      	ldr	r3, [r4, #0]
 8005fb6:	f023 0320 	bic.w	r3, r3, #32
 8005fba:	6023      	str	r3, [r4, #0]
 8005fbc:	2310      	movs	r3, #16
 8005fbe:	e7af      	b.n	8005f20 <_printf_i+0xfc>
 8005fc0:	6823      	ldr	r3, [r4, #0]
 8005fc2:	f043 0320 	orr.w	r3, r3, #32
 8005fc6:	6023      	str	r3, [r4, #0]
 8005fc8:	2378      	movs	r3, #120	; 0x78
 8005fca:	4828      	ldr	r0, [pc, #160]	; (800606c <_printf_i+0x248>)
 8005fcc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005fd0:	e7e3      	b.n	8005f9a <_printf_i+0x176>
 8005fd2:	065e      	lsls	r6, r3, #25
 8005fd4:	bf48      	it	mi
 8005fd6:	b2ad      	uxthmi	r5, r5
 8005fd8:	e7e6      	b.n	8005fa8 <_printf_i+0x184>
 8005fda:	4616      	mov	r6, r2
 8005fdc:	e7bb      	b.n	8005f56 <_printf_i+0x132>
 8005fde:	680b      	ldr	r3, [r1, #0]
 8005fe0:	6826      	ldr	r6, [r4, #0]
 8005fe2:	1d1d      	adds	r5, r3, #4
 8005fe4:	6960      	ldr	r0, [r4, #20]
 8005fe6:	600d      	str	r5, [r1, #0]
 8005fe8:	0635      	lsls	r5, r6, #24
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	d501      	bpl.n	8005ff2 <_printf_i+0x1ce>
 8005fee:	6018      	str	r0, [r3, #0]
 8005ff0:	e002      	b.n	8005ff8 <_printf_i+0x1d4>
 8005ff2:	0671      	lsls	r1, r6, #25
 8005ff4:	d5fb      	bpl.n	8005fee <_printf_i+0x1ca>
 8005ff6:	8018      	strh	r0, [r3, #0]
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	4616      	mov	r6, r2
 8005ffc:	6123      	str	r3, [r4, #16]
 8005ffe:	e7ba      	b.n	8005f76 <_printf_i+0x152>
 8006000:	680b      	ldr	r3, [r1, #0]
 8006002:	1d1a      	adds	r2, r3, #4
 8006004:	600a      	str	r2, [r1, #0]
 8006006:	681e      	ldr	r6, [r3, #0]
 8006008:	2100      	movs	r1, #0
 800600a:	4630      	mov	r0, r6
 800600c:	6862      	ldr	r2, [r4, #4]
 800600e:	f000 f831 	bl	8006074 <memchr>
 8006012:	b108      	cbz	r0, 8006018 <_printf_i+0x1f4>
 8006014:	1b80      	subs	r0, r0, r6
 8006016:	6060      	str	r0, [r4, #4]
 8006018:	6863      	ldr	r3, [r4, #4]
 800601a:	6123      	str	r3, [r4, #16]
 800601c:	2300      	movs	r3, #0
 800601e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006022:	e7a8      	b.n	8005f76 <_printf_i+0x152>
 8006024:	4632      	mov	r2, r6
 8006026:	4649      	mov	r1, r9
 8006028:	4640      	mov	r0, r8
 800602a:	6923      	ldr	r3, [r4, #16]
 800602c:	47d0      	blx	sl
 800602e:	3001      	adds	r0, #1
 8006030:	d0ab      	beq.n	8005f8a <_printf_i+0x166>
 8006032:	6823      	ldr	r3, [r4, #0]
 8006034:	079b      	lsls	r3, r3, #30
 8006036:	d413      	bmi.n	8006060 <_printf_i+0x23c>
 8006038:	68e0      	ldr	r0, [r4, #12]
 800603a:	9b03      	ldr	r3, [sp, #12]
 800603c:	4298      	cmp	r0, r3
 800603e:	bfb8      	it	lt
 8006040:	4618      	movlt	r0, r3
 8006042:	e7a4      	b.n	8005f8e <_printf_i+0x16a>
 8006044:	2301      	movs	r3, #1
 8006046:	4632      	mov	r2, r6
 8006048:	4649      	mov	r1, r9
 800604a:	4640      	mov	r0, r8
 800604c:	47d0      	blx	sl
 800604e:	3001      	adds	r0, #1
 8006050:	d09b      	beq.n	8005f8a <_printf_i+0x166>
 8006052:	3501      	adds	r5, #1
 8006054:	68e3      	ldr	r3, [r4, #12]
 8006056:	9903      	ldr	r1, [sp, #12]
 8006058:	1a5b      	subs	r3, r3, r1
 800605a:	42ab      	cmp	r3, r5
 800605c:	dcf2      	bgt.n	8006044 <_printf_i+0x220>
 800605e:	e7eb      	b.n	8006038 <_printf_i+0x214>
 8006060:	2500      	movs	r5, #0
 8006062:	f104 0619 	add.w	r6, r4, #25
 8006066:	e7f5      	b.n	8006054 <_printf_i+0x230>
 8006068:	08006193 	.word	0x08006193
 800606c:	080061a4 	.word	0x080061a4

08006070 <__retarget_lock_acquire_recursive>:
 8006070:	4770      	bx	lr

08006072 <__retarget_lock_release_recursive>:
 8006072:	4770      	bx	lr

08006074 <memchr>:
 8006074:	4603      	mov	r3, r0
 8006076:	b510      	push	{r4, lr}
 8006078:	b2c9      	uxtb	r1, r1
 800607a:	4402      	add	r2, r0
 800607c:	4293      	cmp	r3, r2
 800607e:	4618      	mov	r0, r3
 8006080:	d101      	bne.n	8006086 <memchr+0x12>
 8006082:	2000      	movs	r0, #0
 8006084:	e003      	b.n	800608e <memchr+0x1a>
 8006086:	7804      	ldrb	r4, [r0, #0]
 8006088:	3301      	adds	r3, #1
 800608a:	428c      	cmp	r4, r1
 800608c:	d1f6      	bne.n	800607c <memchr+0x8>
 800608e:	bd10      	pop	{r4, pc}

08006090 <memcpy>:
 8006090:	440a      	add	r2, r1
 8006092:	4291      	cmp	r1, r2
 8006094:	f100 33ff 	add.w	r3, r0, #4294967295
 8006098:	d100      	bne.n	800609c <memcpy+0xc>
 800609a:	4770      	bx	lr
 800609c:	b510      	push	{r4, lr}
 800609e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060a2:	4291      	cmp	r1, r2
 80060a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060a8:	d1f9      	bne.n	800609e <memcpy+0xe>
 80060aa:	bd10      	pop	{r4, pc}

080060ac <memmove>:
 80060ac:	4288      	cmp	r0, r1
 80060ae:	b510      	push	{r4, lr}
 80060b0:	eb01 0402 	add.w	r4, r1, r2
 80060b4:	d902      	bls.n	80060bc <memmove+0x10>
 80060b6:	4284      	cmp	r4, r0
 80060b8:	4623      	mov	r3, r4
 80060ba:	d807      	bhi.n	80060cc <memmove+0x20>
 80060bc:	1e43      	subs	r3, r0, #1
 80060be:	42a1      	cmp	r1, r4
 80060c0:	d008      	beq.n	80060d4 <memmove+0x28>
 80060c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80060c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80060ca:	e7f8      	b.n	80060be <memmove+0x12>
 80060cc:	4601      	mov	r1, r0
 80060ce:	4402      	add	r2, r0
 80060d0:	428a      	cmp	r2, r1
 80060d2:	d100      	bne.n	80060d6 <memmove+0x2a>
 80060d4:	bd10      	pop	{r4, pc}
 80060d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80060da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80060de:	e7f7      	b.n	80060d0 <memmove+0x24>

080060e0 <_realloc_r>:
 80060e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060e2:	4607      	mov	r7, r0
 80060e4:	4614      	mov	r4, r2
 80060e6:	460e      	mov	r6, r1
 80060e8:	b921      	cbnz	r1, 80060f4 <_realloc_r+0x14>
 80060ea:	4611      	mov	r1, r2
 80060ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80060f0:	f7ff bc36 	b.w	8005960 <_malloc_r>
 80060f4:	b922      	cbnz	r2, 8006100 <_realloc_r+0x20>
 80060f6:	f7ff fbe7 	bl	80058c8 <_free_r>
 80060fa:	4625      	mov	r5, r4
 80060fc:	4628      	mov	r0, r5
 80060fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006100:	f000 f814 	bl	800612c <_malloc_usable_size_r>
 8006104:	42a0      	cmp	r0, r4
 8006106:	d20f      	bcs.n	8006128 <_realloc_r+0x48>
 8006108:	4621      	mov	r1, r4
 800610a:	4638      	mov	r0, r7
 800610c:	f7ff fc28 	bl	8005960 <_malloc_r>
 8006110:	4605      	mov	r5, r0
 8006112:	2800      	cmp	r0, #0
 8006114:	d0f2      	beq.n	80060fc <_realloc_r+0x1c>
 8006116:	4631      	mov	r1, r6
 8006118:	4622      	mov	r2, r4
 800611a:	f7ff ffb9 	bl	8006090 <memcpy>
 800611e:	4631      	mov	r1, r6
 8006120:	4638      	mov	r0, r7
 8006122:	f7ff fbd1 	bl	80058c8 <_free_r>
 8006126:	e7e9      	b.n	80060fc <_realloc_r+0x1c>
 8006128:	4635      	mov	r5, r6
 800612a:	e7e7      	b.n	80060fc <_realloc_r+0x1c>

0800612c <_malloc_usable_size_r>:
 800612c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006130:	1f18      	subs	r0, r3, #4
 8006132:	2b00      	cmp	r3, #0
 8006134:	bfbc      	itt	lt
 8006136:	580b      	ldrlt	r3, [r1, r0]
 8006138:	18c0      	addlt	r0, r0, r3
 800613a:	4770      	bx	lr

0800613c <_init>:
 800613c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800613e:	bf00      	nop
 8006140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006142:	bc08      	pop	{r3}
 8006144:	469e      	mov	lr, r3
 8006146:	4770      	bx	lr

08006148 <_fini>:
 8006148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800614a:	bf00      	nop
 800614c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800614e:	bc08      	pop	{r3}
 8006150:	469e      	mov	lr, r3
 8006152:	4770      	bx	lr
